Line:599 ,(IDENTIFIER , CONST)
Line:599 ,(SEPERATOR  , ,)
Line:599 ,(IDENTIFIER , secondBuffer)
Line:599 ,(SEPERATOR  , ))
Line:599 ,(SEPERATOR  , ;)
Line:600 ,(SEPERATOR  , })
Line:601 ,(SEPERATOR  , })
Line:602 ,(KEYWORD    , else)
Line:602 ,(SEPERATOR  , {)
Line:603 ,(IDENTIFIER , raiseSyntaxError)
Line:603 ,(SEPERATOR  , ()
Line:603 ,(IDENTIFIER , curLine)
Line:603 ,(SEPERATOR  , ,)
Line:603 ,(IDENTIFIER , SYNTAX_ERROR)
Line:603 ,(OPERATOR   , ::)
Line:603 ,(IDENTIFIER , NUM_CONST_UNCOMPELET_ERROR)
Line:603 ,(SEPERATOR  , ))
Line:603 ,(SEPERATOR  , ;)
Line:604 ,(SEPERATOR  , })
Line:605 ,(KEYWORD    , break)
Line:605 ,(SEPERATOR  , ;)
Line:606 ,(KEYWORD    , case)
Line:606 ,(CONST      , 'b')
Line:606 ,(SEPERATOR  , :)
Line:606 ,(KEYWORD    , case)
Line:606 ,(CONST      , 'B')
Line:606 ,(SEPERATOR  , :)
Line:607 ,(IDENTIFIER , secondBuffer)
Line:607 ,(OPERATOR   , +=)
Line:607 ,(IDENTIFIER , buffer)
Line:607 ,(SEPERATOR  , [)
Line:607 ,(IDENTIFIER , cur)
Line:607 ,(OPERATOR   , ++)
Line:607 ,(SEPERATOR  , ])
Line:607 ,(SEPERATOR  , ;)
Line:608 ,(IDENTIFIER , secondBuffer)
Line:608 ,(OPERATOR   , +=)
Line:608 ,(IDENTIFIER , buffer)
Line:608 ,(SEPERATOR  , [)
Line:608 ,(IDENTIFIER , cur)
Line:608 ,(OPERATOR   , ++)
Line:608 ,(SEPERATOR  , ])
Line:608 ,(SEPERATOR  , ;)
Line:609 ,(KEYWORD    , if)
Line:609 ,(SEPERATOR  , ()
Line:609 ,(IDENTIFIER , buffer)
Line:609 ,(SEPERATOR  , [)
Line:609 ,(IDENTIFIER , cur)
Line:609 ,(SEPERATOR  , ])
Line:609 ,(OPERATOR   , >=)
Line:609 ,(CONST      , '0')
Line:609 ,(OPERATOR   , &&)
Line:609 ,(IDENTIFIER , buffer)
Line:609 ,(SEPERATOR  , [)
Line:609 ,(IDENTIFIER , cur)
Line:609 ,(SEPERATOR  , ])
Line:609 ,(OPERATOR   , <=)
Line:609 ,(CONST      , '1')
Line:609 ,(SEPERATOR  , ))
Line:609 ,(SEPERATOR  , {)
Line:610 ,(KEYWORD    , while)
Line:610 ,(SEPERATOR  , ()
Line:610 ,(IDENTIFIER , buffer)
Line:610 ,(SEPERATOR  , [)
Line:610 ,(IDENTIFIER , cur)
Line:610 ,(SEPERATOR  , ])
Line:610 ,(OPERATOR   , >=)
Line:610 ,(CONST      , '0')
Line:610 ,(OPERATOR   , &&)
Line:610 ,(IDENTIFIER , buffer)
Line:610 ,(SEPERATOR  , [)
Line:610 ,(IDENTIFIER , cur)
Line:610 ,(SEPERATOR  , ])
Line:610 ,(OPERATOR   , <=)
Line:610 ,(CONST      , '1')
Line:610 ,(SEPERATOR  , ))
Line:610 ,(SEPERATOR  , {)
Line:611 ,(IDENTIFIER , secondBuffer)
Line:611 ,(OPERATOR   , +=)
Line:611 ,(IDENTIFIER , buffer)
Line:611 ,(SEPERATOR  , [)
Line:611 ,(IDENTIFIER , cur)
Line:611 ,(OPERATOR   , ++)
Line:611 ,(SEPERATOR  , ])
Line:611 ,(SEPERATOR  , ;)
Line:612 ,(SEPERATOR  , })
Line:613 ,(KEYWORD    , if)
Line:613 ,(SEPERATOR  , ()
Line:613 ,(IDENTIFIER , isValidID)
Line:613 ,(SEPERATOR  , ()
Line:613 ,(IDENTIFIER , buffer)
Line:613 ,(SEPERATOR  , [)
Line:613 ,(IDENTIFIER , cur)
Line:613 ,(SEPERATOR  , ])
Line:613 ,(SEPERATOR  , ))
Line:613 ,(SEPERATOR  , ))
Line:613 ,(SEPERATOR  , {)
Line:614 ,(IDENTIFIER , raiseSyntaxError)
Line:614 ,(SEPERATOR  , ()
Line:614 ,(IDENTIFIER , curLine)
Line:614 ,(SEPERATOR  , ,)
Line:614 ,(IDENTIFIER , SYNTAX_ERROR)
Line:614 ,(OPERATOR   , ::)
Line:614 ,(IDENTIFIER , NUM_CONST_FORMAT_ERROR)
Line:614 ,(SEPERATOR  , ))
Line:614 ,(SEPERATOR  , ;)
Line:615 ,(SEPERATOR  , })
Line:616 ,(KEYWORD    , else)
Line:616 ,(SEPERATOR  , {)
Line:617 ,(IDENTIFIER , storeLex)
Line:617 ,(SEPERATOR  , ()
Line:617 ,(IDENTIFIER , LEX_TYPE)
Line:617 ,(OPERATOR   , ::)
Line:617 ,(IDENTIFIER , CONST)
Line:617 ,(SEPERATOR  , ,)
Line:617 ,(IDENTIFIER , secondBuffer)
Line:617 ,(SEPERATOR  , ))
Line:617 ,(SEPERATOR  , ;)
Line:618 ,(SEPERATOR  , })
Line:619 ,(SEPERATOR  , })
Line:620 ,(KEYWORD    , else)
Line:620 ,(SEPERATOR  , {)
Line:621 ,(IDENTIFIER , raiseSyntaxError)
Line:621 ,(SEPERATOR  , ()
Line:621 ,(IDENTIFIER , curLine)
Line:621 ,(SEPERATOR  , ,)
Line:621 ,(IDENTIFIER , SYNTAX_ERROR)
Line:621 ,(OPERATOR   , ::)
Line:621 ,(IDENTIFIER , NUM_CONST_UNCOMPELET_ERROR)
Line:621 ,(SEPERATOR  , ))
Line:621 ,(SEPERATOR  , ;)
Line:622 ,(SEPERATOR  , })
Line:623 ,(KEYWORD    , break)
Line:623 ,(SEPERATOR  , ;)
Line:624 ,(KEYWORD    , default)
Line:624 ,(SEPERATOR  , :)
Line:625 ,(KEYWORD    , break)
Line:625 ,(SEPERATOR  , ;)
Line:626 ,(SEPERATOR  , })
Line:627 ,(SEPERATOR  , })
Line:628 ,(KEYWORD    , else)
Line:628 ,(SEPERATOR  , {)
Line:629 ,(KEYWORD    , while)
Line:629 ,(SEPERATOR  , ()
Line:629 ,(IDENTIFIER , buffer)
Line:629 ,(SEPERATOR  , [)
Line:629 ,(IDENTIFIER , cur)
Line:629 ,(SEPERATOR  , ])
Line:629 ,(OPERATOR   , >=)
Line:629 ,(CONST      , '0')
Line:629 ,(OPERATOR   , &&)
Line:629 ,(IDENTIFIER , buffer)
Line:629 ,(SEPERATOR  , [)
Line:629 ,(IDENTIFIER , cur)
Line:629 ,(SEPERATOR  , ])
Line:629 ,(OPERATOR   , <=)
Line:629 ,(CONST      , '9')
Line:629 ,(SEPERATOR  , ))
Line:629 ,(SEPERATOR  , {)
Line:630 ,(IDENTIFIER , secondBuffer)
Line:630 ,(OPERATOR   , +=)
Line:630 ,(IDENTIFIER , buffer)
Line:630 ,(SEPERATOR  , [)
Line:630 ,(IDENTIFIER , cur)
Line:630 ,(OPERATOR   , ++)
Line:630 ,(SEPERATOR  , ])
Line:630 ,(SEPERATOR  , ;)
Line:631 ,(SEPERATOR  , })
Line:632 ,(KEYWORD    , if)
Line:632 ,(SEPERATOR  , ()
Line:632 ,(IDENTIFIER , buffer)
Line:632 ,(SEPERATOR  , [)
Line:632 ,(IDENTIFIER , cur)
Line:632 ,(SEPERATOR  , ])
Line:632 ,(OPERATOR   , ==)
Line:632 ,(CONST      , '.')
Line:632 ,(SEPERATOR  , ))
Line:632 ,(SEPERATOR  , {)
Line:633 ,(IDENTIFIER , secondBuffer)
Line:633 ,(OPERATOR   , +=)
Line:633 ,(IDENTIFIER , buffer)
Line:633 ,(SEPERATOR  , [)
Line:633 ,(IDENTIFIER , cur)
Line:633 ,(OPERATOR   , ++)
Line:633 ,(SEPERATOR  , ])
Line:633 ,(SEPERATOR  , ;)
Line:634 ,(KEYWORD    , if)
Line:634 ,(SEPERATOR  , ()
Line:634 ,(IDENTIFIER , buffer)
Line:634 ,(SEPERATOR  , [)
Line:634 ,(IDENTIFIER , cur)
Line:634 ,(SEPERATOR  , ])
Line:634 ,(OPERATOR   , >=)
Line:634 ,(CONST      , '0')
Line:634 ,(OPERATOR   , &&)
Line:634 ,(IDENTIFIER , buffer)
Line:634 ,(SEPERATOR  , [)
Line:634 ,(IDENTIFIER , cur)
Line:634 ,(SEPERATOR  , ])
Line:634 ,(OPERATOR   , <=)
Line:634 ,(CONST      , '9')
Line:634 ,(SEPERATOR  , ))
Line:634 ,(SEPERATOR  , {)
Line:635 ,(KEYWORD    , while)
Line:635 ,(SEPERATOR  , ()
Line:635 ,(IDENTIFIER , buffer)
Line:635 ,(SEPERATOR  , [)
Line:635 ,(IDENTIFIER , cur)
Line:635 ,(SEPERATOR  , ])
Line:635 ,(OPERATOR   , >=)
Line:635 ,(CONST      , '0')
Line:635 ,(OPERATOR   , &&)
Line:635 ,(IDENTIFIER , buffer)
Line:635 ,(SEPERATOR  , [)
Line:635 ,(IDENTIFIER , cur)
Line:635 ,(SEPERATOR  , ])
Line:635 ,(OPERATOR   , <=)
Line:635 ,(CONST      , '9')
Line:635 ,(SEPERATOR  , ))
Line:635 ,(SEPERATOR  , {)
Line:636 ,(IDENTIFIER , secondBuffer)
Line:636 ,(OPERATOR   , +=)
Line:636 ,(IDENTIFIER , buffer)
Line:636 ,(SEPERATOR  , [)
Line:636 ,(IDENTIFIER , cur)
Line:636 ,(OPERATOR   , ++)
Line:636 ,(SEPERATOR  , ])
Line:636 ,(SEPERATOR  , ;)
Line:637 ,(SEPERATOR  , })
Line:638 ,(KEYWORD    , if)
Line:638 ,(SEPERATOR  , ()
Line:638 ,(IDENTIFIER , buffer)
Line:638 ,(SEPERATOR  , [)
Line:638 ,(IDENTIFIER , cur)
Line:638 ,(SEPERATOR  , ])
Line:638 ,(OPERATOR   , ==)
Line:638 ,(CONST      , 'F')
Line:638 ,(SEPERATOR  , ))
Line:638 ,(SEPERATOR  , {)
Line:639 ,(IDENTIFIER , secondBuffer)
Line:639 ,(OPERATOR   , +=)
Line:639 ,(IDENTIFIER , buffer)
Line:639 ,(SEPERATOR  , [)
Line:639 ,(IDENTIFIER , cur)
Line:639 ,(OPERATOR   , ++)
Line:639 ,(SEPERATOR  , ])
Line:639 ,(SEPERATOR  , ;)
Line:640 ,(KEYWORD    , if)
Line:640 ,(SEPERATOR  , ()
Line:640 ,(IDENTIFIER , isValidID)
Line:640 ,(SEPERATOR  , ()
Line:640 ,(IDENTIFIER , buffer)
Line:640 ,(SEPERATOR  , [)
Line:640 ,(IDENTIFIER , cur)
Line:640 ,(SEPERATOR  , ])
Line:640 ,(SEPERATOR  , ))
Line:640 ,(SEPERATOR  , ))
Line:640 ,(SEPERATOR  , {)
Line:641 ,(IDENTIFIER , raiseSyntaxError)
Line:641 ,(SEPERATOR  , ()
Line:641 ,(IDENTIFIER , curLine)
Line:641 ,(SEPERATOR  , ,)
Line:641 ,(IDENTIFIER , SYNTAX_ERROR)
Line:641 ,(OPERATOR   , ::)
Line:641 ,(IDENTIFIER , NUM_CONST_FORMAT_ERROR)
Line:641 ,(SEPERATOR  , ))
Line:641 ,(SEPERATOR  , ;)
Line:642 ,(SEPERATOR  , })
Line:643 ,(KEYWORD    , else)
Line:643 ,(SEPERATOR  , {)
Line:644 ,(IDENTIFIER , storeLex)
Line:644 ,(SEPERATOR  , ()
Line:644 ,(IDENTIFIER , LEX_TYPE)
Line:644 ,(OPERATOR   , ::)
Line:644 ,(IDENTIFIER , CONST)
Line:644 ,(SEPERATOR  , ,)
Line:644 ,(IDENTIFIER , secondBuffer)
Line:644 ,(SEPERATOR  , ))
Line:644 ,(SEPERATOR  , ;)
Line:645 ,(SEPERATOR  , })
Line:646 ,(SEPERATOR  , })
Line:647 ,(KEYWORD    , else)
Line:647 ,(KEYWORD    , if)
Line:647 ,(SEPERATOR  , ()
Line:647 ,(IDENTIFIER , buffer)
Line:647 ,(SEPERATOR  , [)
Line:647 ,(IDENTIFIER , cur)
Line:647 ,(SEPERATOR  , ])
Line:647 ,(OPERATOR   , ==)
Line:647 ,(CONST      , 'E')
Line:647 ,(OPERATOR   , ||)
Line:647 ,(IDENTIFIER , buffer)
Line:647 ,(SEPERATOR  , [)
Line:647 ,(IDENTIFIER , cur)
Line:647 ,(SEPERATOR  , ])
Line:647 ,(OPERATOR   , ==)
Line:647 ,(CONST      , 'e')
Line:647 ,(SEPERATOR  , ))
Line:647 ,(SEPERATOR  , {)
Line:648 ,(IDENTIFIER , secondBuffer)
Line:648 ,(OPERATOR   , +=)
Line:648 ,(IDENTIFIER , buffer)
Line:648 ,(SEPERATOR  , [)
Line:648 ,(IDENTIFIER , cur)
Line:648 ,(OPERATOR   , ++)
Line:648 ,(SEPERATOR  , ])
Line:648 ,(SEPERATOR  , ;)
Line:649 ,(KEYWORD    , if)
Line:649 ,(SEPERATOR  , ()
Line:649 ,(IDENTIFIER , buffer)
Line:649 ,(SEPERATOR  , [)
Line:649 ,(IDENTIFIER , cur)
Line:649 ,(SEPERATOR  , ])
Line:649 ,(OPERATOR   , ==)
Line:649 ,(CONST      , '+')
Line:649 ,(OPERATOR   , ||)
Line:649 ,(IDENTIFIER , buffer)
Line:649 ,(SEPERATOR  , [)
Line:649 ,(IDENTIFIER , cur)
Line:649 ,(SEPERATOR  , ])
Line:649 ,(OPERATOR   , ==)
Line:649 ,(CONST      , '-')
Line:649 ,(SEPERATOR  , ))
Line:649 ,(SEPERATOR  , {)
Line:650 ,(IDENTIFIER , secondBuffer)
Line:650 ,(OPERATOR   , +=)
Line:650 ,(IDENTIFIER , buffer)
Line:650 ,(SEPERATOR  , [)
Line:650 ,(IDENTIFIER , cur)
Line:650 ,(OPERATOR   , ++)
Line:650 ,(SEPERATOR  , ])
Line:650 ,(SEPERATOR  , ;)
Line:651 ,(SEPERATOR  , })
Line:652 ,(KEYWORD    , if)
Line:652 ,(SEPERATOR  , ()
Line:652 ,(IDENTIFIER , buffer)
Line:652 ,(SEPERATOR  , [)
Line:652 ,(IDENTIFIER , cur)
Line:652 ,(SEPERATOR  , ])
Line:652 ,(OPERATOR   , >=)
Line:652 ,(CONST      , '0')
Line:652 ,(OPERATOR   , &&)
Line:652 ,(IDENTIFIER , buffer)
Line:652 ,(SEPERATOR  , [)
Line:652 ,(IDENTIFIER , cur)
Line:652 ,(SEPERATOR  , ])
Line:652 ,(OPERATOR   , <=)
Line:652 ,(CONST      , '9')
Line:652 ,(SEPERATOR  , ))
Line:652 ,(SEPERATOR  , {)
Line:653 ,(KEYWORD    , while)
Line:653 ,(SEPERATOR  , ()
Line:653 ,(IDENTIFIER , buffer)
Line:653 ,(SEPERATOR  , [)
Line:653 ,(IDENTIFIER , cur)
Line:653 ,(SEPERATOR  , ])
Line:653 ,(OPERATOR   , >=)
Line:653 ,(CONST      , '0')
Line:653 ,(OPERATOR   , &&)
Line:653 ,(IDENTIFIER , buffer)
Line:653 ,(SEPERATOR  , [)
Line:653 ,(IDENTIFIER , cur)
Line:653 ,(SEPERATOR  , ])
Line:653 ,(OPERATOR   , <=)
Line:653 ,(CONST      , '9')
Line:653 ,(SEPERATOR  , ))
Line:653 ,(SEPERATOR  , {)
Line:654 ,(IDENTIFIER , secondBuffer)
Line:654 ,(OPERATOR   , +=)
Line:654 ,(IDENTIFIER , buffer)
Line:654 ,(SEPERATOR  , [)
Line:654 ,(IDENTIFIER , cur)
Line:654 ,(OPERATOR   , ++)
Line:654 ,(SEPERATOR  , ])
Line:654 ,(SEPERATOR  , ;)
Line:655 ,(SEPERATOR  , })
Line:656 ,(KEYWORD    , if)
Line:656 ,(SEPERATOR  , ()
Line:656 ,(IDENTIFIER , isValidID)
Line:656 ,(SEPERATOR  , ()
Line:656 ,(IDENTIFIER , buffer)
Line:656 ,(SEPERATOR  , [)
Line:656 ,(IDENTIFIER , cur)
Line:656 ,(SEPERATOR  , ])
Line:656 ,(SEPERATOR  , ))
Line:656 ,(OPERATOR   , ||)
Line:656 ,(IDENTIFIER , buffer)
Line:656 ,(SEPERATOR  , [)
Line:656 ,(IDENTIFIER , cur)
Line:656 ,(SEPERATOR  , ])
Line:656 ,(OPERATOR   , ==)
Line:656 ,(CONST      , '.')
Line:656 ,(SEPERATOR  , ))
Line:656 ,(SEPERATOR  , {)
Line:657 ,(IDENTIFIER , raiseSyntaxError)
Line:657 ,(SEPERATOR  , ()
Line:657 ,(IDENTIFIER , curLine)
Line:657 ,(SEPERATOR  , ,)
Line:657 ,(IDENTIFIER , SYNTAX_ERROR)
Line:657 ,(OPERATOR   , ::)
Line:657 ,(IDENTIFIER , NUM_CONST_FORMAT_ERROR)
Line:657 ,(SEPERATOR  , ))
Line:657 ,(SEPERATOR  , ;)
Line:658 ,(SEPERATOR  , })
Line:659 ,(KEYWORD    , else)
Line:659 ,(SEPERATOR  , {)
Line:660 ,(IDENTIFIER , storeLex)
Line:660 ,(SEPERATOR  , ()
Line:660 ,(IDENTIFIER , LEX_TYPE)
Line:660 ,(OPERATOR   , ::)
Line:660 ,(IDENTIFIER , CONST)
Line:660 ,(SEPERATOR  , ,)
Line:660 ,(IDENTIFIER , secondBuffer)
Line:660 ,(SEPERATOR  , ))
Line:660 ,(SEPERATOR  , ;)
Line:661 ,(SEPERATOR  , })
Line:662 ,(SEPERATOR  , })
Line:663 ,(KEYWORD    , else)
Line:663 ,(SEPERATOR  , {)
Line:664 ,(KEYWORD    , if)
Line:664 ,(SEPERATOR  , ()
Line:664 ,(IDENTIFIER , isValidID)
Line:664 ,(SEPERATOR  , ()
Line:664 ,(IDENTIFIER , buffer)
Line:664 ,(SEPERATOR  , [)
Line:664 ,(IDENTIFIER , cur)
Line:664 ,(SEPERATOR  , ])
Line:664 ,(SEPERATOR  , ))
Line:664 ,(SEPERATOR  , ))
Line:664 ,(SEPERATOR  , {)
Line:665 ,(IDENTIFIER , raiseSyntaxError)
Line:665 ,(SEPERATOR  , ()
Line:665 ,(IDENTIFIER , curLine)
Line:665 ,(SEPERATOR  , ,)
Line:665 ,(IDENTIFIER , SYNTAX_ERROR)
Line:665 ,(OPERATOR   , ::)
Line:665 ,(IDENTIFIER , NUM_CONST_FORMAT_ERROR)
Line:665 ,(SEPERATOR  , ))
Line:665 ,(SEPERATOR  , ;)
Line:666 ,(SEPERATOR  , })
Line:667 ,(KEYWORD    , else)
Line:667 ,(SEPERATOR  , {)
Line:668 ,(IDENTIFIER , raiseSyntaxError)
Line:668 ,(SEPERATOR  , ()
Line:668 ,(IDENTIFIER , curLine)
Line:668 ,(SEPERATOR  , ,)
Line:668 ,(IDENTIFIER , SYNTAX_ERROR)
Line:668 ,(OPERATOR   , ::)
Line:668 ,(IDENTIFIER , NUM_CONST_UNCOMPELET_ERROR)
Line:668 ,(SEPERATOR  , ))
Line:668 ,(SEPERATOR  , ;)
Line:669 ,(SEPERATOR  , })
Line:670 ,(SEPERATOR  , })
Line:671 ,(SEPERATOR  , })
Line:672 ,(KEYWORD    , else)
Line:672 ,(KEYWORD    , if)
Line:672 ,(SEPERATOR  , ()
Line:672 ,(IDENTIFIER , isValidID)
Line:672 ,(SEPERATOR  , ()
Line:672 ,(IDENTIFIER , buffer)
Line:672 ,(SEPERATOR  , [)
Line:672 ,(IDENTIFIER , cur)
Line:672 ,(SEPERATOR  , ])
Line:672 ,(SEPERATOR  , ))
Line:672 ,(SEPERATOR  , ))
Line:672 ,(SEPERATOR  , {)
Line:673 ,(IDENTIFIER , raiseSyntaxError)
Line:673 ,(SEPERATOR  , ()
Line:673 ,(IDENTIFIER , curLine)
Line:673 ,(SEPERATOR  , ,)
Line:673 ,(IDENTIFIER , SYNTAX_ERROR)
Line:673 ,(OPERATOR   , ::)
Line:673 ,(IDENTIFIER , NUM_CONST_FORMAT_ERROR)
Line:673 ,(SEPERATOR  , ))
Line:673 ,(SEPERATOR  , ;)
Line:674 ,(SEPERATOR  , })
Line:675 ,(KEYWORD    , else)
Line:675 ,(SEPERATOR  , {)
Line:676 ,(IDENTIFIER , storeLex)
Line:676 ,(SEPERATOR  , ()
Line:676 ,(IDENTIFIER , LEX_TYPE)
Line:676 ,(OPERATOR   , ::)
Line:676 ,(IDENTIFIER , CONST)
Line:676 ,(SEPERATOR  , ,)
Line:676 ,(IDENTIFIER , secondBuffer)
Line:676 ,(SEPERATOR  , ))
Line:676 ,(SEPERATOR  , ;)
Line:677 ,(SEPERATOR  , })
Line:678 ,(SEPERATOR  , })
Line:679 ,(KEYWORD    , else)
Line:679 ,(SEPERATOR  , {)
Line:680 ,(KEYWORD    , if)
Line:680 ,(SEPERATOR  , ()
Line:680 ,(IDENTIFIER , isValidID)
Line:680 ,(SEPERATOR  , ()
Line:680 ,(IDENTIFIER , buffer)
Line:680 ,(SEPERATOR  , [)
Line:680 ,(IDENTIFIER , cur)
Line:680 ,(SEPERATOR  , ])
Line:680 ,(SEPERATOR  , ))
Line:680 ,(SEPERATOR  , ))
Line:680 ,(SEPERATOR  , {)
Line:681 ,(IDENTIFIER , raiseSyntaxError)
Line:681 ,(SEPERATOR  , ()
Line:681 ,(IDENTIFIER , curLine)
Line:681 ,(SEPERATOR  , ,)
Line:681 ,(IDENTIFIER , SYNTAX_ERROR)
Line:681 ,(OPERATOR   , ::)
Line:681 ,(IDENTIFIER , NUM_CONST_FORMAT_ERROR)
Line:681 ,(SEPERATOR  , ))
Line:681 ,(SEPERATOR  , ;)
Line:682 ,(SEPERATOR  , })
Line:683 ,(KEYWORD    , else)
Line:683 ,(SEPERATOR  , {)
Line:684 ,(IDENTIFIER , raiseSyntaxError)
Line:684 ,(SEPERATOR  , ()
Line:684 ,(IDENTIFIER , curLine)
Line:684 ,(SEPERATOR  , ,)
Line:684 ,(IDENTIFIER , SYNTAX_ERROR)
Line:684 ,(OPERATOR   , ::)
Line:684 ,(IDENTIFIER , NUM_CONST_UNCOMPELET_ERROR)
Line:684 ,(SEPERATOR  , ))
Line:684 ,(SEPERATOR  , ;)
Line:685 ,(SEPERATOR  , })
Line:686 ,(SEPERATOR  , })
Line:687 ,(SEPERATOR  , })
Line:688 ,(KEYWORD    , else)
Line:688 ,(KEYWORD    , if)
Line:688 ,(SEPERATOR  , ()
Line:688 ,(IDENTIFIER , buffer)
Line:688 ,(SEPERATOR  , [)
Line:688 ,(IDENTIFIER , cur)
Line:688 ,(SEPERATOR  , ])
Line:688 ,(OPERATOR   , ==)
Line:688 ,(CONST      , 'E')
Line:688 ,(OPERATOR   , ||)
Line:688 ,(IDENTIFIER , buffer)
Line:688 ,(SEPERATOR  , [)
Line:688 ,(IDENTIFIER , cur)
Line:688 ,(SEPERATOR  , ])
Line:688 ,(OPERATOR   , ==)
Line:688 ,(CONST      , 'e')
Line:688 ,(SEPERATOR  , ))
Line:688 ,(SEPERATOR  , {)
Line:689 ,(IDENTIFIER , secondBuffer)
Line:689 ,(OPERATOR   , +=)
Line:689 ,(IDENTIFIER , buffer)
Line:689 ,(SEPERATOR  , [)
Line:689 ,(IDENTIFIER , cur)
Line:689 ,(OPERATOR   , ++)
Line:689 ,(SEPERATOR  , ])
Line:689 ,(SEPERATOR  , ;)
Line:690 ,(KEYWORD    , if)
Line:690 ,(SEPERATOR  , ()
Line:690 ,(IDENTIFIER , buffer)
Line:690 ,(SEPERATOR  , [)
Line:690 ,(IDENTIFIER , cur)
Line:690 ,(SEPERATOR  , ])
Line:690 ,(OPERATOR   , ==)
Line:690 ,(CONST      , '+')
Line:690 ,(OPERATOR   , ||)
Line:690 ,(IDENTIFIER , buffer)
Line:690 ,(SEPERATOR  , [)
Line:690 ,(IDENTIFIER , cur)
Line:690 ,(SEPERATOR  , ])
Line:690 ,(OPERATOR   , ==)
Line:690 ,(CONST      , '-')
Line:690 ,(SEPERATOR  , ))
Line:690 ,(SEPERATOR  , {)
Line:691 ,(IDENTIFIER , secondBuffer)
Line:691 ,(OPERATOR   , +=)
Line:691 ,(IDENTIFIER , buffer)
Line:691 ,(SEPERATOR  , [)
Line:691 ,(IDENTIFIER , cur)
Line:691 ,(OPERATOR   , ++)
Line:691 ,(SEPERATOR  , ])
Line:691 ,(SEPERATOR  , ;)
Line:692 ,(SEPERATOR  , })
Line:693 ,(KEYWORD    , if)
Line:693 ,(SEPERATOR  , ()
Line:693 ,(IDENTIFIER , buffer)
Line:693 ,(SEPERATOR  , [)
Line:693 ,(IDENTIFIER , cur)
Line:693 ,(SEPERATOR  , ])
Line:693 ,(OPERATOR   , >=)
Line:693 ,(CONST      , '0')
Line:693 ,(OPERATOR   , &&)
Line:693 ,(IDENTIFIER , buffer)
Line:693 ,(SEPERATOR  , [)
Line:693 ,(IDENTIFIER , cur)
Line:693 ,(SEPERATOR  , ])
Line:693 ,(OPERATOR   , <=)
Line:693 ,(CONST      , '9')
Line:693 ,(SEPERATOR  , ))
Line:693 ,(SEPERATOR  , {)
Line:694 ,(KEYWORD    , while)
Line:694 ,(SEPERATOR  , ()
Line:694 ,(IDENTIFIER , buffer)
Line:694 ,(SEPERATOR  , [)
Line:694 ,(IDENTIFIER , cur)
Line:694 ,(SEPERATOR  , ])
Line:694 ,(OPERATOR   , >=)
Line:694 ,(CONST      , '0')
Line:694 ,(OPERATOR   , &&)
Line:694 ,(IDENTIFIER , buffer)
Line:694 ,(SEPERATOR  , [)
Line:694 ,(IDENTIFIER , cur)
Line:694 ,(SEPERATOR  , ])
Line:694 ,(OPERATOR   , <=)
Line:694 ,(CONST      , '9')
Line:694 ,(SEPERATOR  , ))
Line:694 ,(SEPERATOR  , {)
Line:695 ,(IDENTIFIER , secondBuffer)
Line:695 ,(OPERATOR   , +=)
Line:695 ,(IDENTIFIER , buffer)
Line:695 ,(SEPERATOR  , [)
Line:695 ,(IDENTIFIER , cur)
Line:695 ,(OPERATOR   , ++)
Line:695 ,(SEPERATOR  , ])
Line:695 ,(SEPERATOR  , ;)
Line:696 ,(SEPERATOR  , })
Line:697 ,(KEYWORD    , if)
Line:697 ,(SEPERATOR  , ()
Line:697 ,(IDENTIFIER , isValidID)
Line:697 ,(SEPERATOR  , ()
Line:697 ,(IDENTIFIER , buffer)
Line:697 ,(SEPERATOR  , [)
Line:697 ,(IDENTIFIER , cur)
Line:697 ,(SEPERATOR  , ])
Line:697 ,(SEPERATOR  , ))
Line:697 ,(OPERATOR   , ||)
Line:697 ,(IDENTIFIER , buffer)
Line:697 ,(SEPERATOR  , [)
Line:697 ,(IDENTIFIER , cur)
Line:697 ,(SEPERATOR  , ])
Line:697 ,(OPERATOR   , ==)
Line:697 ,(CONST      , '.')
Line:697 ,(SEPERATOR  , ))
Line:697 ,(SEPERATOR  , {)
Line:698 ,(IDENTIFIER , raiseSyntaxError)
Line:698 ,(SEPERATOR  , ()
Line:698 ,(IDENTIFIER , curLine)
Line:698 ,(SEPERATOR  , ,)
Line:698 ,(IDENTIFIER , SYNTAX_ERROR)
Line:698 ,(OPERATOR   , ::)
Line:698 ,(IDENTIFIER , NUM_CONST_FORMAT_ERROR)
Line:698 ,(SEPERATOR  , ))
Line:698 ,(SEPERATOR  , ;)
Line:699 ,(SEPERATOR  , })
Line:700 ,(KEYWORD    , else)
Line:700 ,(SEPERATOR  , {)
Line:701 ,(IDENTIFIER , storeLex)
Line:701 ,(SEPERATOR  , ()
Line:701 ,(IDENTIFIER , LEX_TYPE)
Line:701 ,(OPERATOR   , ::)
Line:701 ,(IDENTIFIER , CONST)
Line:701 ,(SEPERATOR  , ,)
Line:701 ,(IDENTIFIER , secondBuffer)
Line:701 ,(SEPERATOR  , ))
Line:701 ,(SEPERATOR  , ;)
Line:702 ,(SEPERATOR  , })
Line:703 ,(SEPERATOR  , })
Line:704 ,(KEYWORD    , else)
Line:704 ,(SEPERATOR  , {)
Line:705 ,(KEYWORD    , if)
Line:705 ,(SEPERATOR  , ()
Line:705 ,(IDENTIFIER , isValidID)
Line:705 ,(SEPERATOR  , ()
Line:705 ,(IDENTIFIER , buffer)
Line:705 ,(SEPERATOR  , [)
Line:705 ,(IDENTIFIER , cur)
Line:705 ,(SEPERATOR  , ])
Line:705 ,(SEPERATOR  , ))
Line:705 ,(SEPERATOR  , ))
Line:705 ,(SEPERATOR  , {)
Line:706 ,(IDENTIFIER , raiseSyntaxError)
Line:706 ,(SEPERATOR  , ()
Line:706 ,(IDENTIFIER , curLine)
Line:706 ,(SEPERATOR  , ,)
Line:706 ,(IDENTIFIER , SYNTAX_ERROR)
Line:706 ,(OPERATOR   , ::)
Line:706 ,(IDENTIFIER , NUM_CONST_FORMAT_ERROR)
Line:706 ,(SEPERATOR  , ))
Line:706 ,(SEPERATOR  , ;)
Line:707 ,(SEPERATOR  , })
Line:708 ,(KEYWORD    , else)
Line:708 ,(SEPERATOR  , {)
Line:709 ,(IDENTIFIER , raiseSyntaxError)
Line:709 ,(SEPERATOR  , ()
Line:709 ,(IDENTIFIER , curLine)
Line:709 ,(SEPERATOR  , ,)
Line:709 ,(IDENTIFIER , SYNTAX_ERROR)
Line:709 ,(OPERATOR   , ::)
Line:709 ,(IDENTIFIER , NUM_CONST_UNCOMPELET_ERROR)
Line:709 ,(SEPERATOR  , ))
Line:709 ,(SEPERATOR  , ;)
Line:710 ,(SEPERATOR  , })
Line:711 ,(SEPERATOR  , })
Line:712 ,(SEPERATOR  , })
Line:713 ,(KEYWORD    , else)
Line:713 ,(KEYWORD    , if)
Line:713 ,(SEPERATOR  , ()
Line:713 ,(IDENTIFIER , buffer)
Line:713 ,(SEPERATOR  , [)
Line:713 ,(IDENTIFIER , cur)
Line:713 ,(SEPERATOR  , ])
Line:713 ,(OPERATOR   , ==)
Line:713 ,(CONST      , 'L')
Line:713 ,(SEPERATOR  , ))
Line:713 ,(SEPERATOR  , {)
Line:714 ,(IDENTIFIER , secondBuffer)
Line:714 ,(OPERATOR   , +=)
Line:714 ,(IDENTIFIER , buffer)
Line:714 ,(SEPERATOR  , [)
Line:714 ,(IDENTIFIER , cur)
Line:714 ,(OPERATOR   , ++)
Line:714 ,(SEPERATOR  , ])
Line:714 ,(SEPERATOR  , ;)
Line:715 ,(KEYWORD    , if)
Line:715 ,(SEPERATOR  , ()
Line:715 ,(IDENTIFIER , isValidID)
Line:715 ,(SEPERATOR  , ()
Line:715 ,(IDENTIFIER , buffer)
Line:715 ,(SEPERATOR  , [)
Line:715 ,(IDENTIFIER , cur)
Line:715 ,(SEPERATOR  , ])
Line:715 ,(SEPERATOR  , ))
Line:715 ,(SEPERATOR  , ))
Line:715 ,(SEPERATOR  , {)
Line:716 ,(IDENTIFIER , raiseSyntaxError)
Line:716 ,(SEPERATOR  , ()
Line:716 ,(IDENTIFIER , curLine)
Line:716 ,(SEPERATOR  , ,)
Line:716 ,(IDENTIFIER , SYNTAX_ERROR)
Line:716 ,(OPERATOR   , ::)
Line:716 ,(IDENTIFIER , NUM_CONST_FORMAT_ERROR)
Line:716 ,(SEPERATOR  , ))
Line:716 ,(SEPERATOR  , ;)
Line:717 ,(SEPERATOR  , })
Line:718 ,(KEYWORD    , else)
Line:718 ,(SEPERATOR  , {)
Line:719 ,(IDENTIFIER , storeLex)
Line:719 ,(SEPERATOR  , ()
Line:719 ,(IDENTIFIER , LEX_TYPE)
Line:719 ,(OPERATOR   , ::)
Line:719 ,(IDENTIFIER , CONST)
Line:719 ,(SEPERATOR  , ,)
Line:719 ,(IDENTIFIER , secondBuffer)
Line:719 ,(SEPERATOR  , ))
Line:719 ,(SEPERATOR  , ;)
Line:720 ,(SEPERATOR  , })
Line:721 ,(SEPERATOR  , })
Line:722 ,(KEYWORD    , else)
Line:722 ,(KEYWORD    , if)
Line:722 ,(SEPERATOR  , ()
Line:722 ,(IDENTIFIER , isValidID)
Line:722 ,(SEPERATOR  , ()
Line:722 ,(IDENTIFIER , buffer)
Line:722 ,(SEPERATOR  , [)
Line:722 ,(IDENTIFIER , cur)
Line:722 ,(SEPERATOR  , ])
Line:722 ,(SEPERATOR  , ))
Line:722 ,(SEPERATOR  , ))
Line:722 ,(SEPERATOR  , {)
Line:723 ,(IDENTIFIER , raiseSyntaxError)
Line:723 ,(SEPERATOR  , ()
Line:723 ,(IDENTIFIER , curLine)
Line:723 ,(SEPERATOR  , ,)
Line:723 ,(IDENTIFIER , SYNTAX_ERROR)
Line:723 ,(OPERATOR   , ::)
Line:723 ,(IDENTIFIER , NUM_CONST_FORMAT_ERROR)
Line:723 ,(SEPERATOR  , ))
Line:723 ,(SEPERATOR  , ;)
Line:724 ,(SEPERATOR  , })
Line:725 ,(KEYWORD    , else)
Line:725 ,(SEPERATOR  , {)
Line:726 ,(IDENTIFIER , storeLex)
Line:726 ,(SEPERATOR  , ()
Line:726 ,(IDENTIFIER , LEX_TYPE)
Line:726 ,(OPERATOR   , ::)
Line:726 ,(IDENTIFIER , CONST)
Line:726 ,(SEPERATOR  , ,)
Line:726 ,(IDENTIFIER , secondBuffer)
Line:726 ,(SEPERATOR  , ))
Line:726 ,(SEPERATOR  , ;)
Line:727 ,(SEPERATOR  , })
Line:728 ,(SEPERATOR  , })
Line:729 ,(SEPERATOR  , })
Line:736 ,(KEYWORD    , void)
Line:736 ,(IDENTIFIER , handleCharConst)
Line:736 ,(SEPERATOR  , ()
Line:736 ,(SEPERATOR  , ))
Line:736 ,(SEPERATOR  , {)
Line:737 ,(IDENTIFIER , string)
Line:737 ,(IDENTIFIER , secondBuffer)
Line:737 ,(OPERATOR   , =)
Line:737 ,(CONST      , "")
Line:737 ,(SEPERATOR  , ;)
Line:738 ,(KEYWORD    , if)
Line:738 ,(SEPERATOR  , ()
Line:738 ,(IDENTIFIER , buffer)
Line:738 ,(SEPERATOR  , [)
Line:738 ,(SEPERATOR  , ()
Line:738 ,(OPERATOR   , ++)
Line:738 ,(IDENTIFIER , cur)
Line:738 ,(SEPERATOR  , ))
Line:738 ,(SEPERATOR  , ])
Line:738 ,(OPERATOR   , ==)
Line:738 ,(CONST      , \)
Line:738 ,(SEPERATOR  , ))
Line:738 ,(SEPERATOR  , {)
Line:739 ,(KEYWORD    , if)
Line:739 ,(SEPERATOR  , ()
Line:739 ,(IDENTIFIER , buffer)
Line:739 ,(SEPERATOR  , [)
Line:739 ,(IDENTIFIER , cur)
Line:739 ,(OPERATOR   , +)
Line:739 ,(CONST      , 2)
Line:739 ,(SEPERATOR  , ])
Line:739 ,(OPERATOR   , ==)
Line:739 ,(CONST      , ')
Line:739 ,(SEPERATOR  , ))
Line:739 ,(SEPERATOR  , {)
Line:740 ,(IDENTIFIER , secondBuffer)
Line:740 ,(OPERATOR   , +=)
Line:740 ,(IDENTIFIER , buffer)
Line:740 ,(SEPERATOR  , [)
Line:740 ,(SEPERATOR  , ()
Line:740 ,(OPERATOR   , ++)
Line:740 ,(IDENTIFIER , cur)
Line:740 ,(SEPERATOR  , ))
Line:740 ,(SEPERATOR  , ])
Line:740 ,(SEPERATOR  , ;)
Line:741 ,(IDENTIFIER , storeLex)
Line:741 ,(SEPERATOR  , ()
Line:741 ,(IDENTIFIER , LEX_TYPE)
Line:741 ,(OPERATOR   , ::)
Line:741 ,(IDENTIFIER , CONST)
Line:741 ,(SEPERATOR  , ,)
Line:741 ,(IDENTIFIER , secondBuffer)
Line:741 ,(SEPERATOR  , ))
Line:741 ,(SEPERATOR  , ;)
Line:742 ,(IDENTIFIER , cur)
Line:742 ,(OPERATOR   , +=)
Line:742 ,(CONST      , 2)
Line:742 ,(SEPERATOR  , ;)
Line:743 ,(SEPERATOR  , })
Line:744 ,(KEYWORD    , else)
Line:744 ,(SEPERATOR  , {)
Line:745 ,(IDENTIFIER , raiseSyntaxError)
Line:745 ,(SEPERATOR  , ()
Line:745 ,(IDENTIFIER , curLine)
Line:745 ,(SEPERATOR  , ,)
Line:745 ,(IDENTIFIER , SYNTAX_ERROR)
Line:745 ,(OPERATOR   , ::)
Line:745 ,(IDENTIFIER , CHAR_SINGLE_QUOTE_UNMATCH_ERROR)
Line:745 ,(SEPERATOR  , ))
Line:745 ,(SEPERATOR  , ;)
Line:746 ,(SEPERATOR  , })
Line:747 ,(SEPERATOR  , })
Line:748 ,(KEYWORD    , else)
Line:748 ,(SEPERATOR  , {)
Line:749 ,(KEYWORD    , if)
Line:749 ,(SEPERATOR  , ()
Line:749 ,(IDENTIFIER , buffer)
Line:749 ,(SEPERATOR  , [)
Line:749 ,(IDENTIFIER , cur)
Line:749 ,(OPERATOR   , +)
Line:749 ,(CONST      , 1)
Line:749 ,(SEPERATOR  , ])
Line:749 ,(OPERATOR   , ==)
Line:749 ,(CONST      , ')
Line:749 ,(SEPERATOR  , ))
Line:749 ,(SEPERATOR  , {)
Line:750 ,(IDENTIFIER , secondBuffer)
Line:750 ,(OPERATOR   , +=)
Line:750 ,(IDENTIFIER , buffer)
Line:750 ,(SEPERATOR  , [)
Line:750 ,(IDENTIFIER , cur)
Line:750 ,(OPERATOR   , ++)
Line:750 ,(SEPERATOR  , ])
Line:750 ,(SEPERATOR  , ;)
Line:751 ,(IDENTIFIER , storeLex)
Line:751 ,(SEPERATOR  , ()
Line:751 ,(IDENTIFIER , LEX_TYPE)
Line:751 ,(OPERATOR   , ::)
Line:751 ,(IDENTIFIER , CONST)
Line:751 ,(SEPERATOR  , ,)
Line:751 ,(IDENTIFIER , secondBuffer)
Line:751 ,(SEPERATOR  , ))
Line:751 ,(SEPERATOR  , ;)
Line:752 ,(IDENTIFIER , cur)
Line:752 ,(OPERATOR   , ++)
Line:752 ,(SEPERATOR  , ;)
Line:753 ,(SEPERATOR  , })
Line:754 ,(KEYWORD    , else)
Line:754 ,(SEPERATOR  , {)
Line:755 ,(IDENTIFIER , raiseSyntaxError)
Line:755 ,(SEPERATOR  , ()
Line:755 ,(IDENTIFIER , curLine)
Line:755 ,(SEPERATOR  , ,)
Line:755 ,(IDENTIFIER , SYNTAX_ERROR)
Line:755 ,(OPERATOR   , ::)
Line:755 ,(IDENTIFIER , CHAR_SINGLE_QUOTE_UNMATCH_ERROR)
Line:755 ,(SEPERATOR  , ))
Line:755 ,(SEPERATOR  , ;)
Line:756 ,(SEPERATOR  , })
Line:757 ,(SEPERATOR  , })
Line:758 ,(SEPERATOR  , })
Line:765 ,(KEYWORD    , void)
Line:765 ,(IDENTIFIER , handleStringConst)
Line:765 ,(SEPERATOR  , ()
Line:765 ,(SEPERATOR  , ))
Line:765 ,(SEPERATOR  , {)
Line:766 ,(IDENTIFIER , string)
Line:766 ,(IDENTIFIER , secondBuffer)
Line:766 ,(OPERATOR   , =)
Line:766 ,(CONST      , "")
Line:766 ,(SEPERATOR  , ;)
Line:767 ,(IDENTIFIER , cur)
Line:767 ,(OPERATOR   , ++)
Line:767 ,(SEPERATOR  , ;)
Line:768 ,(KEYWORD    , while)
Line:768 ,(SEPERATOR  , ()
Line:768 ,(IDENTIFIER , buffer)
Line:768 ,(SEPERATOR  , [)
Line:768 ,(IDENTIFIER , cur)
Line:768 ,(SEPERATOR  , ])
Line:768 ,(OPERATOR   , !=)
Line:768 ,(CONST      , ")
Line:768 ,(SEPERATOR  , ))
Line:768 ,(SEPERATOR  , {)
Line:769 ,(KEYWORD    , if)
Line:769 ,(SEPERATOR  , ()
Line:769 ,(IDENTIFIER , buffer)
Line:769 ,(SEPERATOR  , [)
Line:769 ,(IDENTIFIER , cur)
Line:769 ,(SEPERATOR  , ])
Line:769 ,(OPERATOR   , ==)
Line:769 ,(CONST      , 0)
Line:769 ,(SEPERATOR  , ))
Line:769 ,(SEPERATOR  , {)
Line:770 ,(IDENTIFIER , raiseSyntaxError)
Line:770 ,(SEPERATOR  , ()
Line:770 ,(IDENTIFIER , curLine)
Line:770 ,(SEPERATOR  , ,)
Line:770 ,(IDENTIFIER , SYNTAX_ERROR)
Line:770 ,(OPERATOR   , ::)
Line:770 ,(IDENTIFIER , STRING_UNCLOSE_ERROR)
Line:770 ,(SEPERATOR  , ))
Line:770 ,(SEPERATOR  , ;)
Line:771 ,(SEPERATOR  , })
Line:772 ,(KEYWORD    , else)
Line:772 ,(SEPERATOR  , {)
Line:773 ,(KEYWORD    , if)
Line:773 ,(SEPERATOR  , ()
Line:773 ,(IDENTIFIER , buffer)
Line:773 ,(SEPERATOR  , [)
Line:773 ,(IDENTIFIER , cur)
Line:773 ,(SEPERATOR  , ])
Line:773 ,(OPERATOR   , ==)
Line:773 ,(CONST      , ')
Line:773 ,(SEPERATOR  , ))
Line:773 ,(SEPERATOR  , {)
Line:774 ,(IDENTIFIER , secondBuffer)
Line:774 ,(OPERATOR   , +=)
Line:774 ,(IDENTIFIER , buffer)
Line:774 ,(SEPERATOR  , [)
Line:774 ,(IDENTIFIER , cur)
Line:774 ,(OPERATOR   , ++)
Line:774 ,(SEPERATOR  , ])
Line:774 ,(SEPERATOR  , ;)
Line:775 ,(SEPERATOR  , })
Line:776 ,(IDENTIFIER , secondBuffer)
Line:776 ,(OPERATOR   , +=)
Line:776 ,(IDENTIFIER , buffer)
Line:776 ,(SEPERATOR  , [)
Line:776 ,(IDENTIFIER , cur)
Line:776 ,(OPERATOR   , ++)
Line:776 ,(SEPERATOR  , ])
Line:776 ,(SEPERATOR  , ;)
Line:777 ,(SEPERATOR  , })
Line:778 ,(SEPERATOR  , })
Line:779 ,(IDENTIFIER , cur)
Line:779 ,(OPERATOR   , ++)
Line:779 ,(SEPERATOR  , ;)
Line:780 ,(IDENTIFIER , storeLex)
Line:780 ,(SEPERATOR  , ()
Line:780 ,(IDENTIFIER , LEX_TYPE)
Line:780 ,(OPERATOR   , ::)
Line:780 ,(IDENTIFIER , CONST)
Line:780 ,(SEPERATOR  , ,)
Line:780 ,(IDENTIFIER , secondBuffer)
Line:780 ,(SEPERATOR  , ))
Line:780 ,(SEPERATOR  , ;)
Line:781 ,(SEPERATOR  , })
Line:788 ,(KEYWORD    , bool)
Line:788 ,(IDENTIFIER , isTemplateClass)
Line:788 ,(SEPERATOR  , ()
Line:788 ,(IDENTIFIER , string)
Line:788 ,(IDENTIFIER , name)
Line:788 ,(SEPERATOR  , ))
Line:788 ,(SEPERATOR  , {)
Line:789 ,(KEYWORD    , for)
Line:789 ,(SEPERATOR  , ()
Line:789 ,(IDENTIFIER , string)
Line:789 ,(IDENTIFIER , kw)
Line:789 ,(SEPERATOR  , :)
Line:789 ,(IDENTIFIER , existTemplate)
Line:789 ,(SEPERATOR  , ))
Line:789 ,(SEPERATOR  , {)
Line:790 ,(KEYWORD    , if)
Line:790 ,(SEPERATOR  , ()
Line:790 ,(IDENTIFIER , name)
Line:790 ,(OPERATOR   , ==)
Line:790 ,(IDENTIFIER , kw)
Line:790 ,(SEPERATOR  , ))
Line:790 ,(SEPERATOR  , {)
Line:791 ,(KEYWORD    , return)
Line:791 ,(KEYWORD    , true)
Line:791 ,(SEPERATOR  , ;)
Line:792 ,(SEPERATOR  , })
Line:793 ,(SEPERATOR  , })
Line:794 ,(KEYWORD    , return)
Line:794 ,(KEYWORD    , false)
Line:794 ,(SEPERATOR  , ;)
Line:795 ,(SEPERATOR  , })
Line:802 ,(KEYWORD    , void)
Line:802 ,(IDENTIFIER , handleLeftRightAngleBra)
Line:802 ,(SEPERATOR  , ()
Line:802 ,(SEPERATOR  , ))
Line:802 ,(SEPERATOR  , {)
Line:803 ,(KEYWORD    , auto)
Line:803 ,(IDENTIFIER , token)
Line:803 ,(OPERATOR   , =)
Line:803 ,(IDENTIFIER , tokenRes)
Line:803 ,(SEPERATOR  , [)
Line:803 ,(IDENTIFIER , tokenRes)
Line:803 ,(OPERATOR   , .)
Line:803 ,(IDENTIFIER , size)
Line:803 ,(SEPERATOR  , ()
Line:803 ,(SEPERATOR  , ))
Line:803 ,(OPERATOR   , -)
Line:803 ,(CONST      , 1)
Line:803 ,(SEPERATOR  , ])
Line:803 ,(SEPERATOR  , ;)
Line:804 ,(KEYWORD    , if)
Line:804 ,(SEPERATOR  , ()
Line:804 ,(IDENTIFIER , isTemplateClass)
Line:804 ,(SEPERATOR  , ()
Line:804 ,(IDENTIFIER , token)
Line:804 ,(OPERATOR   , .)
Line:804 ,(IDENTIFIER , second)
Line:804 ,(OPERATOR   , .)
Line:804 ,(IDENTIFIER , second)
Line:804 ,(SEPERATOR  , ))
Line:804 ,(SEPERATOR  , ))
Line:804 ,(SEPERATOR  , {)
Line:805 ,(KEYWORD    , char)
Line:805 ,(IDENTIFIER , bra)
Line:805 ,(OPERATOR   , =)
Line:805 ,(IDENTIFIER , buffer)
Line:805 ,(SEPERATOR  , [)
Line:805 ,(IDENTIFIER , cur)
Line:805 ,(SEPERATOR  , ])
Line:805 ,(SEPERATOR  , ;)
Line:806 ,(IDENTIFIER , string)
Line:806 ,(IDENTIFIER , secondBuffer)
Line:806 ,(OPERATOR   , =)
Line:806 ,(CONST      , "")
Line:806 ,(SEPERATOR  , ;)
Line:807 ,(IDENTIFIER , secondBuffer)
Line:807 ,(OPERATOR   , +=)
Line:807 ,(IDENTIFIER , buffer)
Line:807 ,(SEPERATOR  , [)
Line:807 ,(IDENTIFIER , cur)
Line:807 ,(OPERATOR   , ++)
Line:807 ,(SEPERATOR  , ])
Line:807 ,(SEPERATOR  , ;)
Line:808 ,(KEYWORD    , while)
Line:808 ,(SEPERATOR  , ()
Line:808 ,(IDENTIFIER , bra)
Line:808 ,(OPERATOR   , ==)
Line:808 ,(IDENTIFIER , buffer)
Line:808 ,(SEPERATOR  , [)
Line:808 ,(IDENTIFIER , cur)
Line:808 ,(SEPERATOR  , ])
Line:808 ,(SEPERATOR  , ))
Line:808 ,(SEPERATOR  , {)
Line:809 ,(IDENTIFIER , secondBuffer)
Line:809 ,(OPERATOR   , +=)
Line:809 ,(IDENTIFIER , buffer)
Line:809 ,(SEPERATOR  , [)
Line:809 ,(IDENTIFIER , cur)
Line:809 ,(OPERATOR   , ++)
Line:809 ,(SEPERATOR  , ])
Line:809 ,(SEPERATOR  , ;)
Line:810 ,(SEPERATOR  , })
Line:811 ,(KEYWORD    , if)
Line:811 ,(SEPERATOR  , ()
Line:811 ,(IDENTIFIER , isOp)
Line:811 ,(SEPERATOR  , ()
Line:811 ,(IDENTIFIER , buffer)
Line:811 ,(SEPERATOR  , [)
Line:811 ,(IDENTIFIER , cur)
Line:811 ,(SEPERATOR  , ])
Line:811 ,(SEPERATOR  , ))
Line:811 ,(SEPERATOR  , ))
Line:811 ,(SEPERATOR  , {)
Line:812 ,(IDENTIFIER , raiseSyntaxError)
Line:812 ,(SEPERATOR  , ()
Line:812 ,(IDENTIFIER , curLine)
Line:812 ,(SEPERATOR  , ,)
Line:812 ,(IDENTIFIER , SYNTAX_ERROR)
Line:812 ,(OPERATOR   , ::)
Line:812 ,(IDENTIFIER , OP_FORMAT_ERROR)
Line:812 ,(SEPERATOR  , ))
Line:812 ,(SEPERATOR  , ;)
Line:813 ,(SEPERATOR  , })
Line:814 ,(KEYWORD    , else)
Line:814 ,(SEPERATOR  , {)
Line:815 ,(KEYWORD    , for)
Line:815 ,(SEPERATOR  , ()
Line:815 ,(KEYWORD    , unsigned)
Line:815 ,(KEYWORD    , int)
Line:815 ,(IDENTIFIER , i)
Line:815 ,(OPERATOR   , =)
Line:815 ,(CONST      , 0)
Line:815 ,(SEPERATOR  , ;)
Line:815 ,(IDENTIFIER , i)
Line:815 ,(OPERATOR   , <)
Line:815 ,(IDENTIFIER , secondBuffer)
Line:815 ,(OPERATOR   , .)
Line:815 ,(IDENTIFIER , size)
Line:815 ,(SEPERATOR  , ()
Line:815 ,(SEPERATOR  , ))
Line:815 ,(SEPERATOR  , ;)
Line:815 ,(IDENTIFIER , i)
Line:815 ,(OPERATOR   , ++)
Line:815 ,(SEPERATOR  , ))
Line:815 ,(SEPERATOR  , {)
Line:816 ,(IDENTIFIER , storeLex)
Line:816 ,(SEPERATOR  , ()
Line:816 ,(IDENTIFIER , LEX_TYPE)
Line:816 ,(OPERATOR   , ::)
Line:816 ,(IDENTIFIER , SEPERATOR)
Line:816 ,(SEPERATOR  , ,)
Line:816 ,(IDENTIFIER , string)
Line:816 ,(SEPERATOR  , ()
Line:816 ,(CONST      , 1)
Line:816 ,(SEPERATOR  , ,)
Line:816 ,(IDENTIFIER , secondBuffer)
Line:816 ,(SEPERATOR  , [)
Line:816 ,(IDENTIFIER , i)
Line:816 ,(SEPERATOR  , ])
Line:816 ,(SEPERATOR  , ))
Line:816 ,(SEPERATOR  , ))
Line:816 ,(SEPERATOR  , ;)
Line:817 ,(SEPERATOR  , })
Line:818 ,(SEPERATOR  , })
Line:819 ,(SEPERATOR  , })
Line:820 ,(KEYWORD    , else)
Line:820 ,(SEPERATOR  , {)
Line:821 ,(IDENTIFIER , handleOperator)
Line:821 ,(SEPERATOR  , ()
Line:821 ,(SEPERATOR  , ))
Line:821 ,(SEPERATOR  , ;)
Line:822 ,(SEPERATOR  , })
Line:823 ,(SEPERATOR  , })
Line:830 ,(KEYWORD    , void)
Line:830 ,(IDENTIFIER , analyseToken)
Line:830 ,(SEPERATOR  , ()
Line:830 ,(SEPERATOR  , ))
Line:830 ,(SEPERATOR  , {)
Line:831 ,(KEYWORD    , if)
Line:831 ,(SEPERATOR  , ()
Line:831 ,(IDENTIFIER , buffer)
Line:831 ,(SEPERATOR  , [)
Line:831 ,(IDENTIFIER , cur)
Line:831 ,(SEPERATOR  , ])
Line:831 ,(OPERATOR   , ==)
Line:831 ,(CONST      , 0)
Line:831 ,(OPERATOR   , ||)
Line:831 ,(IDENTIFIER , buffer)
Line:831 ,(SEPERATOR  , [)
Line:831 ,(IDENTIFIER , cur)
Line:831 ,(SEPERATOR  , ])
Line:831 ,(OPERATOR   , ==)
Line:831 ,(CONST      , n)
Line:831 ,(SEPERATOR  , ))
Line:831 ,(SEPERATOR  , {)
Line:832 ,(KEYWORD    , return)
Line:832 ,(SEPERATOR  , ;)
Line:833 ,(SEPERATOR  , })
Line:834 ,(KEYWORD    , char)
Line:834 ,(IDENTIFIER , tmp)
Line:834 ,(OPERATOR   , =)
Line:834 ,(IDENTIFIER , buffer)
Line:834 ,(SEPERATOR  , [)
Line:834 ,(IDENTIFIER , cur)
Line:834 ,(SEPERATOR  , ])
Line:834 ,(SEPERATOR  , ;)
Line:835 ,(KEYWORD    , switch)
Line:835 ,(SEPERATOR  , ()
Line:835 ,(IDENTIFIER , tmp)
Line:835 ,(SEPERATOR  , ))
Line:836 ,(SEPERATOR  , {)
Line:837 ,(KEYWORD    , case)
Line:837 ,(CONST      , '/')
Line:837 ,(SEPERATOR  , :)
Line:838 ,(KEYWORD    , if)
Line:838 ,(SEPERATOR  , ()
Line:838 ,(IDENTIFIER , buffer)
Line:838 ,(SEPERATOR  , [)
Line:838 ,(IDENTIFIER , cur)
Line:838 ,(OPERATOR   , +)
Line:838 ,(CONST      , 1)
Line:838 ,(SEPERATOR  , ])
Line:838 ,(OPERATOR   , ==)
Line:838 ,(CONST      , '*')
Line:838 ,(SEPERATOR  , ))
Line:838 ,(SEPERATOR  , {)
Line:839 ,(KEYWORD    , if)
Line:839 ,(SEPERATOR  , ()
Line:839 ,(OPERATOR   , !)
Line:839 ,(IDENTIFIER , searchForNoteEndType_1)
Line:839 ,(SEPERATOR  , ()
Line:839 ,(SEPERATOR  , ))
Line:839 ,(SEPERATOR  , ))
Line:839 ,(SEPERATOR  , {)
Line:840 ,(IDENTIFIER , raiseSyntaxError)
Line:840 ,(SEPERATOR  , ()
Line:840 ,(IDENTIFIER , curLine)
Line:840 ,(SEPERATOR  , ,)
Line:840 ,(IDENTIFIER , SYNTAX_ERROR)
Line:840 ,(OPERATOR   , ::)
Line:840 ,(IDENTIFIER , MULLINE_NOTE_NOT_END_ERROR)
Line:840 ,(SEPERATOR  , ))
Line:840 ,(SEPERATOR  , ;)
Line:841 ,(SEPERATOR  , })
Line:842 ,(SEPERATOR  , })
Line:843 ,(KEYWORD    , if)
Line:843 ,(SEPERATOR  , ()
Line:843 ,(IDENTIFIER , buffer)
Line:843 ,(SEPERATOR  , [)
Line:843 ,(IDENTIFIER , cur)
Line:843 ,(OPERATOR   , +)
Line:843 ,(CONST      , 1)
Line:843 ,(SEPERATOR  , ])
Line:843 ,(OPERATOR   , ==)
Line:843 ,(CONST      , '/')
Line:843 ,(SEPERATOR  , ))
Line:843 ,(SEPERATOR  , {)
Line:844 ,(KEYWORD    , if)
Line:844 ,(SEPERATOR  , ()
Line:844 ,(OPERATOR   , !)
Line:844 ,(IDENTIFIER , searchForNoteEndType_2)
Line:844 ,(SEPERATOR  , ()
Line:844 ,(SEPERATOR  , ))
Line:844 ,(SEPERATOR  , ))
Line:844 ,(SEPERATOR  , {)
Line:845 ,(IDENTIFIER , raiseSyntaxError)
Line:845 ,(SEPERATOR  , ()
Line:845 ,(IDENTIFIER , curLine)
Line:845 ,(SEPERATOR  , ,)
Line:845 ,(IDENTIFIER , SYNTAX_ERROR)
Line:845 ,(OPERATOR   , ::)
Line:845 ,(IDENTIFIER , UNVALID_CHAR_ERROR)
Line:845 ,(SEPERATOR  , ))
Line:845 ,(SEPERATOR  , ;)
Line:846 ,(SEPERATOR  , })
Line:847 ,(SEPERATOR  , })
Line:848 ,(KEYWORD    , else)
Line:848 ,(SEPERATOR  , {)
Line:849 ,(IDENTIFIER , handleOperator)
Line:849 ,(SEPERATOR  , ()
Line:849 ,(SEPERATOR  , ))
Line:849 ,(SEPERATOR  , ;)
Line:850 ,(SEPERATOR  , })
Line:851 ,(KEYWORD    , break)
Line:851 ,(SEPERATOR  , ;)
Line:852 ,(KEYWORD    , case)
Line:852 ,(CONST      , '#')
Line:852 ,(SEPERATOR  , :)
Line:853 ,(IDENTIFIER , extractMacro)
Line:853 ,(SEPERATOR  , ()
Line:853 ,(SEPERATOR  , ))
Line:853 ,(SEPERATOR  , ;)
Line:854 ,(KEYWORD    , break)
Line:854 ,(SEPERATOR  , ;)
Line:855 ,(KEYWORD    , case)
Line:855 ,(CONST      , '{')
Line:855 ,(SEPERATOR  , :)
Line:855 ,(KEYWORD    , case)
Line:855 ,(CONST      , '}')
Line:855 ,(SEPERATOR  , :)
Line:855 ,(KEYWORD    , case)
Line:855 ,(CONST      , '[')
Line:855 ,(SEPERATOR  , :)
Line:855 ,(KEYWORD    , case)
Line:855 ,(CONST      , ']')
Line:855 ,(SEPERATOR  , :)
Line:855 ,(KEYWORD    , case)
Line:855 ,(CONST      , '(')
Line:855 ,(SEPERATOR  , :)
Line:855 ,(KEYWORD    , case)
Line:855 ,(CONST      , ')')
Line:855 ,(SEPERATOR  , :)
Line:855 ,(KEYWORD    , case)
Line:855 ,(CONST      , ':')
Line:855 ,(SEPERATOR  , :)
Line:855 ,(KEYWORD    , case)
Line:855 ,(CONST      , ',')
Line:855 ,(SEPERATOR  , :)
Line:855 ,(KEYWORD    , case)
Line:855 ,(CONST      , ';')
Line:855 ,(SEPERATOR  , :)
Line:856 ,(IDENTIFIER , handleSeperator)
Line:856 ,(SEPERATOR  , ()
Line:856 ,(SEPERATOR  , ))
Line:856 ,(SEPERATOR  , ;)
Line:857 ,(KEYWORD    , break)
Line:857 ,(SEPERATOR  , ;)
Line:858 ,(KEYWORD    , case)
Line:858 ,(CONST      , '<')
Line:858 ,(SEPERATOR  , :)
Line:858 ,(KEYWORD    , case)
Line:858 ,(CONST      , '>')
Line:858 ,(SEPERATOR  , :)
Line:859 ,(IDENTIFIER , handleLeftRightAngleBra)
Line:859 ,(SEPERATOR  , ()
Line:859 ,(SEPERATOR  , ))
Line:859 ,(SEPERATOR  , ;)
Line:860 ,(KEYWORD    , break)
Line:860 ,(SEPERATOR  , ;)
Line:861 ,(KEYWORD    , case)
Line:861 ,(CONST      , '=')
Line:861 ,(SEPERATOR  , :)
Line:861 ,(KEYWORD    , case)
Line:861 ,(CONST      , '?')
Line:861 ,(SEPERATOR  , :)
Line:861 ,(KEYWORD    , case)
Line:861 ,(CONST      , '*')
Line:861 ,(SEPERATOR  , :)
Line:861 ,(KEYWORD    , case)
Line:861 ,(CONST      , '+')
Line:861 ,(SEPERATOR  , :)
Line:861 ,(KEYWORD    , case)
Line:861 ,(CONST      , '-')
Line:861 ,(SEPERATOR  , :)
Line:861 ,(KEYWORD    , case)
Line:861 ,(CONST      , '&')
Line:861 ,(SEPERATOR  , :)
Line:861 ,(KEYWORD    , case)
Line:861 ,(CONST      , '|')
Line:861 ,(SEPERATOR  , :)
Line:861 ,(KEYWORD    , case)
Line:861 ,(CONST      , '%')
Line:861 ,(SEPERATOR  , :)
Line:861 ,(KEYWORD    , case)
Line:861 ,(CONST      , '.')
Line:861 ,(SEPERATOR  , :)
Line:861 ,(KEYWORD    , case)
Line:861 ,(CONST      , '!')
Line:861 ,(SEPERATOR  , :)
Line:861 ,(KEYWORD    , case)
Line:861 ,(CONST      , '~')
Line:861 ,(SEPERATOR  , :)
Line:861 ,(KEYWORD    , case)
Line:861 ,(CONST      , '^')
Line:861 ,(SEPERATOR  , :)
Line:862 ,(IDENTIFIER , handleOperator)
Line:862 ,(SEPERATOR  , ()
Line:862 ,(SEPERATOR  , ))
Line:862 ,(SEPERATOR  , ;)
Line:863 ,(KEYWORD    , break)
Line:863 ,(SEPERATOR  , ;)
Line:864 ,(KEYWORD    , case)
Line:864 ,(CONST      , '_')
Line:864 ,(SEPERATOR  , :)
Line:864 ,(KEYWORD    , case)
Line:864 ,(CONST      , 'a')
Line:864 ,(SEPERATOR  , :)
Line:864 ,(KEYWORD    , case)
Line:864 ,(CONST      , 'b')
Line:864 ,(SEPERATOR  , :)
Line:864 ,(KEYWORD    , case)
Line:864 ,(CONST      , 'c')
Line:864 ,(SEPERATOR  , :)
Line:864 ,(KEYWORD    , case)
Line:864 ,(CONST      , 'd')
Line:864 ,(SEPERATOR  , :)
Line:864 ,(KEYWORD    , case)
Line:864 ,(CONST      , 'e')
Line:864 ,(SEPERATOR  , :)
Line:864 ,(KEYWORD    , case)
Line:864 ,(CONST      , 'f')
Line:864 ,(SEPERATOR  , :)
Line:864 ,(KEYWORD    , case)
Line:864 ,(CONST      , 'g')
Line:864 ,(SEPERATOR  , :)
Line:864 ,(KEYWORD    , case)
Line:864 ,(CONST      , 'h')
Line:864 ,(SEPERATOR  , :)
Line:864 ,(KEYWORD    , case)
Line:864 ,(CONST      , 'i')
Line:864 ,(SEPERATOR  , :)
Line:865 ,(KEYWORD    , case)
Line:865 ,(CONST      , 'j')
Line:865 ,(SEPERATOR  , :)
Line:865 ,(KEYWORD    , case)
Line:865 ,(CONST      , 'k')
Line:865 ,(SEPERATOR  , :)
Line:865 ,(KEYWORD    , case)
Line:865 ,(CONST      , 'l')
Line:865 ,(SEPERATOR  , :)
Line:865 ,(KEYWORD    , case)
Line:865 ,(CONST      , 'm')
Line:865 ,(SEPERATOR  , :)
Line:865 ,(KEYWORD    , case)
Line:865 ,(CONST      , 'n')
Line:865 ,(SEPERATOR  , :)
Line:865 ,(KEYWORD    , case)
Line:865 ,(CONST      , 'o')
Line:865 ,(SEPERATOR  , :)
Line:865 ,(KEYWORD    , case)
Line:865 ,(CONST      , 'p')
Line:865 ,(SEPERATOR  , :)
Line:865 ,(KEYWORD    , case)
Line:865 ,(CONST      , 'q')
Line:865 ,(SEPERATOR  , :)
Line:865 ,(KEYWORD    , case)
Line:865 ,(CONST      , 'r')
Line:865 ,(SEPERATOR  , :)
Line:865 ,(KEYWORD    , case)
Line:865 ,(CONST      , 's')
Line:865 ,(SEPERATOR  , :)
Line:866 ,(KEYWORD    , case)
Line:866 ,(CONST      , 't')
Line:866 ,(SEPERATOR  , :)
Line:866 ,(KEYWORD    , case)
Line:866 ,(CONST      , 'u')
Line:866 ,(SEPERATOR  , :)
Line:866 ,(KEYWORD    , case)
Line:866 ,(CONST      , 'v')
Line:866 ,(SEPERATOR  , :)
Line:866 ,(KEYWORD    , case)
Line:866 ,(CONST      , 'w')
Line:866 ,(SEPERATOR  , :)
Line:866 ,(KEYWORD    , case)
Line:866 ,(CONST      , 'x')
Line:866 ,(SEPERATOR  , :)
Line:866 ,(KEYWORD    , case)
Line:866 ,(CONST      , 'y')
Line:866 ,(SEPERATOR  , :)
Line:866 ,(KEYWORD    , case)
Line:866 ,(CONST      , 'z')
Line:866 ,(SEPERATOR  , :)
Line:866 ,(KEYWORD    , case)
Line:866 ,(CONST      , 'A')
Line:866 ,(SEPERATOR  , :)
Line:866 ,(KEYWORD    , case)
Line:866 ,(CONST      , 'B')
Line:866 ,(SEPERATOR  , :)
Line:866 ,(KEYWORD    , case)
Line:866 ,(CONST      , 'C')
Line:866 ,(SEPERATOR  , :)
Line:867 ,(KEYWORD    , case)
Line:867 ,(CONST      , 'D')
Line:867 ,(SEPERATOR  , :)
Line:867 ,(KEYWORD    , case)
Line:867 ,(CONST      , 'E')
Line:867 ,(SEPERATOR  , :)
Line:867 ,(KEYWORD    , case)
Line:867 ,(CONST      , 'F')
Line:867 ,(SEPERATOR  , :)
Line:867 ,(KEYWORD    , case)
Line:867 ,(CONST      , 'G')
Line:867 ,(SEPERATOR  , :)
Line:867 ,(KEYWORD    , case)
Line:867 ,(CONST      , 'H')
Line:867 ,(SEPERATOR  , :)
Line:867 ,(KEYWORD    , case)
Line:867 ,(CONST      , 'I')
Line:867 ,(SEPERATOR  , :)
Line:867 ,(KEYWORD    , case)
Line:867 ,(CONST      , 'J')
Line:867 ,(SEPERATOR  , :)
Line:867 ,(KEYWORD    , case)
Line:867 ,(CONST      , 'K')
Line:867 ,(SEPERATOR  , :)
Line:867 ,(KEYWORD    , case)
Line:867 ,(CONST      , 'L')
Line:867 ,(SEPERATOR  , :)
Line:867 ,(KEYWORD    , case)
Line:867 ,(CONST      , 'M')
Line:867 ,(SEPERATOR  , :)
Line:868 ,(KEYWORD    , case)
Line:868 ,(CONST      , 'N')
Line:868 ,(SEPERATOR  , :)
Line:868 ,(KEYWORD    , case)
Line:868 ,(CONST      , 'O')
Line:868 ,(SEPERATOR  , :)
Line:868 ,(KEYWORD    , case)
Line:868 ,(CONST      , 'P')
Line:868 ,(SEPERATOR  , :)
Line:868 ,(KEYWORD    , case)
Line:868 ,(CONST      , 'Q')
Line:868 ,(SEPERATOR  , :)
Line:868 ,(KEYWORD    , case)
Line:868 ,(CONST      , 'R')
Line:868 ,(SEPERATOR  , :)
Line:868 ,(KEYWORD    , case)
Line:868 ,(CONST      , 'S')
Line:868 ,(SEPERATOR  , :)
Line:868 ,(KEYWORD    , case)
Line:868 ,(CONST      , 'T')
Line:868 ,(SEPERATOR  , :)
Line:868 ,(KEYWORD    , case)
Line:868 ,(CONST      , 'U')
Line:868 ,(SEPERATOR  , :)
Line:868 ,(KEYWORD    , case)
Line:868 ,(CONST      , 'V')
Line:868 ,(SEPERATOR  , :)
Line:868 ,(KEYWORD    , case)
Line:868 ,(CONST      , 'W')
Line:868 ,(SEPERATOR  , :)
Line:869 ,(KEYWORD    , case)
Line:869 ,(CONST      , 'X')
Line:869 ,(SEPERATOR  , :)
Line:869 ,(KEYWORD    , case)
Line:869 ,(CONST      , 'Y')
Line:869 ,(SEPERATOR  , :)
Line:869 ,(KEYWORD    , case)
Line:869 ,(CONST      , 'Z')
Line:869 ,(SEPERATOR  , :)
Line:870 ,(IDENTIFIER , handlerIdentifier)
Line:870 ,(SEPERATOR  , ()
Line:870 ,(SEPERATOR  , ))
Line:870 ,(SEPERATOR  , ;)
Line:871 ,(KEYWORD    , break)
Line:871 ,(SEPERATOR  , ;)
Line:872 ,(KEYWORD    , case)
Line:872 ,(CONST      , '1')
Line:872 ,(SEPERATOR  , :)
Line:872 ,(KEYWORD    , case)
Line:872 ,(CONST      , '2')
Line:872 ,(SEPERATOR  , :)
Line:872 ,(KEYWORD    , case)
Line:872 ,(CONST      , '3')
Line:872 ,(SEPERATOR  , :)
Line:872 ,(KEYWORD    , case)
Line:872 ,(CONST      , '4')
Line:872 ,(SEPERATOR  , :)
Line:872 ,(KEYWORD    , case)
Line:872 ,(CONST      , '5')
Line:872 ,(SEPERATOR  , :)
Line:872 ,(KEYWORD    , case)
Line:872 ,(CONST      , '6')
Line:872 ,(SEPERATOR  , :)
Line:872 ,(KEYWORD    , case)
Line:872 ,(CONST      , '7')
Line:872 ,(SEPERATOR  , :)
Line:872 ,(KEYWORD    , case)
Line:872 ,(CONST      , '8')
Line:872 ,(SEPERATOR  , :)
Line:872 ,(KEYWORD    , case)
Line:872 ,(CONST      , '9')
Line:872 ,(SEPERATOR  , :)
Line:872 ,(KEYWORD    , case)
Line:872 ,(CONST      , '0')
Line:872 ,(SEPERATOR  , :)
Line:873 ,(IDENTIFIER , handleNumber)
Line:873 ,(SEPERATOR  , ()
Line:873 ,(SEPERATOR  , ))
Line:873 ,(SEPERATOR  , ;)
Line:874 ,(KEYWORD    , break)
Line:874 ,(SEPERATOR  , ;)
Line:875 ,(KEYWORD    , case)
Line:875 ,(CONST      , ')
Line:875 ,(SEPERATOR  , :)
Line:876 ,(IDENTIFIER , handleCharConst)
Line:876 ,(SEPERATOR  , ()
Line:876 ,(SEPERATOR  , ))
Line:876 ,(SEPERATOR  , ;)
Line:877 ,(KEYWORD    , break)
Line:877 ,(SEPERATOR  , ;)
Line:878 ,(KEYWORD    , case)
Line:878 ,(CONST      , ")
Line:878 ,(SEPERATOR  , :)
Line:879 ,(IDENTIFIER , handleStringConst)
Line:879 ,(SEPERATOR  , ()
Line:879 ,(SEPERATOR  , ))
Line:879 ,(SEPERATOR  , ;)
Line:880 ,(KEYWORD    , break)
Line:880 ,(SEPERATOR  , ;)
Line:881 ,(KEYWORD    , default)
Line:881 ,(SEPERATOR  , :)
Line:882 ,(IDENTIFIER , raiseSyntaxError)
Line:882 ,(SEPERATOR  , ()
Line:882 ,(IDENTIFIER , curLine)
Line:882 ,(SEPERATOR  , ,)
Line:882 ,(IDENTIFIER , SYNTAX_ERROR)
Line:882 ,(OPERATOR   , ::)
Line:882 ,(IDENTIFIER , UNVALID_CHAR_ERROR)
Line:882 ,(SEPERATOR  , ))
Line:882 ,(SEPERATOR  , ;)
Line:883 ,(KEYWORD    , break)
Line:883 ,(SEPERATOR  , ;)
Line:884 ,(SEPERATOR  , })
Line:885 ,(SEPERATOR  , })
Line:892 ,(KEYWORD    , void)
Line:892 ,(IDENTIFIER , lex)
Line:892 ,(SEPERATOR  , ()
Line:892 ,(SEPERATOR  , ))
Line:892 ,(SEPERATOR  , {)
Line:893 ,(KEYWORD    , while)
Line:893 ,(SEPERATOR  , ()
Line:893 ,(OPERATOR   , !)
Line:893 ,(SEPERATOR  , ()
Line:893 ,(OPERATOR   , *)
Line:893 ,(IDENTIFIER , fin)
Line:893 ,(SEPERATOR  , ))
Line:893 ,(OPERATOR   , .)
Line:893 ,(IDENTIFIER , eof)
Line:893 ,(SEPERATOR  , ()
Line:893 ,(SEPERATOR  , ))
Line:893 ,(OPERATOR   , ||)
Line:893 ,(IDENTIFIER , buffer)
Line:893 ,(SEPERATOR  , [)
Line:893 ,(IDENTIFIER , cur)
Line:893 ,(SEPERATOR  , ])
Line:893 ,(OPERATOR   , !=)
Line:893 ,(CONST      , 0)
Line:893 ,(SEPERATOR  , ))
Line:893 ,(SEPERATOR  , {)
Line:894 ,(IDENTIFIER , shiftToNextToken)
Line:894 ,(SEPERATOR  , ()
Line:894 ,(SEPERATOR  , ))
Line:894 ,(SEPERATOR  , ;)
Line:895 ,(IDENTIFIER , analyseToken)
Line:895 ,(SEPERATOR  , ()
Line:895 ,(SEPERATOR  , ))
Line:895 ,(SEPERATOR  , ;)
Line:896 ,(SEPERATOR  , })
Line:897 ,(SEPERATOR  , })
Line:904 ,(KEYWORD    , void)
Line:904 ,(IDENTIFIER , printLexRes)
Line:904 ,(SEPERATOR  , ()
Line:904 ,(SEPERATOR  , ))
Line:904 ,(SEPERATOR  , {)
Line:905 ,(IDENTIFIER , cout)
Line:905 ,(OPERATOR   , <<)
Line:905 ,(CONST      , "宏定义：")
Line:905 ,(OPERATOR   , <<)
Line:905 ,(IDENTIFIER , endl)
Line:905 ,(SEPERATOR  , ;)
Line:906 ,(KEYWORD    , for)
Line:906 ,(SEPERATOR  , ()
Line:906 ,(IDENTIFIER , string)
Line:906 ,(IDENTIFIER , it)
Line:906 ,(SEPERATOR  , :)
Line:906 ,(IDENTIFIER , macroBin)
Line:906 ,(SEPERATOR  , ))
Line:906 ,(SEPERATOR  , {)
Line:907 ,(IDENTIFIER , cout)
Line:907 ,(OPERATOR   , <<)
Line:907 ,(IDENTIFIER , it)
Line:907 ,(OPERATOR   , <<)
Line:907 ,(IDENTIFIER , endl)
Line:907 ,(SEPERATOR  , ;)
Line:908 ,(SEPERATOR  , })
Line:909 ,(IDENTIFIER , cout)
Line:909 ,(OPERATOR   , <<)
Line:909 ,(CONST      , "词法分析词素：")
Line:909 ,(OPERATOR   , <<)
Line:909 ,(IDENTIFIER , endl)
Line:909 ,(SEPERATOR  , ;)
Line:910 ,(KEYWORD    , for)
Line:910 ,(SEPERATOR  , ()
Line:910 ,(IDENTIFIER , pair)
Line:910 ,(SEPERATOR  , <)
Line:910 ,(KEYWORD    , int)
Line:910 ,(SEPERATOR  , ,)
Line:910 ,(IDENTIFIER , pair)
Line:910 ,(SEPERATOR  , <)
Line:910 ,(IDENTIFIER , LEX_TYPE)
Line:910 ,(SEPERATOR  , ,)
Line:910 ,(IDENTIFIER , string)
Line:910 ,(SEPERATOR  , >)
Line:910 ,(SEPERATOR  , >)
Line:910 ,(IDENTIFIER , it)
Line:910 ,(SEPERATOR  , :)
Line:910 ,(IDENTIFIER , tokenRes)
Line:910 ,(SEPERATOR  , ))
Line:910 ,(SEPERATOR  , {)
Line:911 ,(IDENTIFIER , LEX_TYPE)
Line:911 ,(IDENTIFIER , type)
Line:911 ,(OPERATOR   , =)
Line:911 ,(IDENTIFIER , it)
Line:911 ,(OPERATOR   , .)
Line:911 ,(IDENTIFIER , second)
Line:911 ,(OPERATOR   , .)
Line:911 ,(IDENTIFIER , first)
Line:911 ,(SEPERATOR  , ;)
Line:912 ,(IDENTIFIER , string)
Line:912 ,(IDENTIFIER , typeStr)
Line:912 ,(OPERATOR   , =)
Line:912 ,(SEPERATOR  , ()
Line:912 ,(IDENTIFIER , type)
Line:912 ,(OPERATOR   , ==)
Line:912 ,(IDENTIFIER , LEX_TYPE)
Line:912 ,(OPERATOR   , ::)
Line:912 ,(IDENTIFIER , SEPERATOR)
Line:912 ,(SEPERATOR  , ))
Line:912 ,(OPERATOR   , ?)
Line:912 ,(CONST      , "LEX_TYPE::SEPERATOR")
Line:912 ,(SEPERATOR  , :)
Line:912 ,(SEPERATOR  , ()
Line:912 ,(SEPERATOR  , ()
Line:912 ,(IDENTIFIER , type)
Line:912 ,(OPERATOR   , ==)
Line:912 ,(IDENTIFIER , LEX_TYPE)
Line:912 ,(OPERATOR   , ::)
Line:912 ,(IDENTIFIER , IDENTIFIER)
Line:912 ,(SEPERATOR  , ))
Line:912 ,(OPERATOR   , ?)
Line:912 ,(CONST      , "LEX_TYPE::IDENTIFIER")
Line:912 ,(SEPERATOR  , :)
Line:912 ,(SEPERATOR  , ()
Line:912 ,(SEPERATOR  , ()
Line:912 ,(IDENTIFIER , type)
Line:912 ,(OPERATOR   , ==)
Line:912 ,(IDENTIFIER , LEX_TYPE)
Line:912 ,(OPERATOR   , ::)
Line:912 ,(IDENTIFIER , OPERATOR)
Line:912 ,(SEPERATOR  , ))
Line:912 ,(OPERATOR   , ?)
Line:912 ,(CONST      , "LEX_TYPE::OPERATOR")
Line:912 ,(SEPERATOR  , :)
Line:912 ,(SEPERATOR  , ()
Line:912 ,(IDENTIFIER , type)
Line:912 ,(OPERATOR   , ==)
Line:912 ,(IDENTIFIER , LEX_TYPE)
Line:912 ,(OPERATOR   , ::)
Line:912 ,(IDENTIFIER , CONST)
Line:912 ,(SEPERATOR  , ))
Line:912 ,(OPERATOR   , ?)
Line:912 ,(CONST      , "LEX_TYPE::CONST    ")
Line:912 ,(SEPERATOR  , :)
Line:912 ,(CONST      , "LEX_TYPE::KEYWORD  ")
Line:912 ,(SEPERATOR  , ))
Line:912 ,(SEPERATOR  , ))
Line:912 ,(SEPERATOR  , ;)
Line:913 ,(IDENTIFIER , cout)
Line:913 ,(OPERATOR   , <<)
Line:913 ,(CONST      , "Line:")
Line:913 ,(OPERATOR   , <<)
Line:913 ,(IDENTIFIER , it)
Line:913 ,(OPERATOR   , .)
Line:913 ,(IDENTIFIER , first)
Line:913 ,(OPERATOR   , <<)
Line:913 ,(CONST      , "  ,Type:")
Line:913 ,(OPERATOR   , <<)
Line:913 ,(IDENTIFIER , typeStr)
Line:913 ,(OPERATOR   , <<)
Line:913 ,(CONST      , " \t,Content:")
Line:913 ,(OPERATOR   , <<)
Line:913 ,(IDENTIFIER , it)
Line:913 ,(OPERATOR   , .)
Line:913 ,(IDENTIFIER , second)
Line:913 ,(OPERATOR   , .)
Line:913 ,(IDENTIFIER , second)
Line:913 ,(OPERATOR   , <<)
Line:913 ,(IDENTIFIER , endl)
Line:913 ,(SEPERATOR  , ;)
Line:914 ,(SEPERATOR  , })
Line:915 ,(IDENTIFIER , cout)
Line:915 ,(OPERATOR   , <<)
Line:915 ,(CONST      , "每行开始空格数:")
Line:915 ,(OPERATOR   , <<)
Line:915 ,(IDENTIFIER , endl)
Line:915 ,(SEPERATOR  , ;)
Line:916 ,(KEYWORD    , for)
Line:916 ,(SEPERATOR  , ()
Line:916 ,(IDENTIFIER , pair)
Line:916 ,(SEPERATOR  , <)
Line:916 ,(KEYWORD    , int)
Line:916 ,(SEPERATOR  , ,)
Line:916 ,(KEYWORD    , int)
Line:916 ,(SEPERATOR  , >)
Line:916 ,(IDENTIFIER , p)
Line:916 ,(SEPERATOR  , :)
Line:916 ,(IDENTIFIER , spaceRecord)
Line:916 ,(SEPERATOR  , ))
Line:916 ,(SEPERATOR  , {)
Line:917 ,(IDENTIFIER , cout)
Line:917 ,(OPERATOR   , <<)
Line:917 ,(CONST      , "Line:")
Line:917 ,(OPERATOR   , <<)
Line:917 ,(IDENTIFIER , p)
Line:917 ,(OPERATOR   , .)
Line:917 ,(IDENTIFIER , first)
Line:917 ,(OPERATOR   , <<)
Line:917 ,(CONST      , " , has ")
Line:917 ,(OPERATOR   , <<)
Line:917 ,(IDENTIFIER , p)
Line:917 ,(OPERATOR   , .)
Line:917 ,(IDENTIFIER , second)
Line:917 ,(OPERATOR   , <<)
Line:917 ,(CONST      , " Space")
Line:917 ,(OPERATOR   , <<)
Line:917 ,(IDENTIFIER , endl)
Line:917 ,(SEPERATOR  , ;)
Line:918 ,(SEPERATOR  , })
Line:919 ,(SEPERATOR  , })
Line:927 ,(KEYWORD    , void)
Line:927 ,(IDENTIFIER , raiseSyntaxError)
Line:927 ,(SEPERATOR  , ()
Line:927 ,(KEYWORD    , int)
Line:927 ,(IDENTIFIER , line)
Line:927 ,(SEPERATOR  , ,)
Line:927 ,(IDENTIFIER , SYNTAX_ERROR)
Line:927 ,(IDENTIFIER , errorId)
Line:927 ,(SEPERATOR  , ))
Line:927 ,(SEPERATOR  , {)
Line:928 ,(KEYWORD    , switch)
Line:928 ,(SEPERATOR  , ()
Line:928 ,(IDENTIFIER , errorId)
Line:928 ,(SEPERATOR  , ))
Line:929 ,(SEPERATOR  , {)
Line:930 ,(KEYWORD    , case)
Line:930 ,(IDENTIFIER , SYNTAX_ERROR)
Line:930 ,(OPERATOR   , ::)
Line:930 ,(IDENTIFIER , NUM_CONST_FORMAT_ERROR)
Line:930 ,(SEPERATOR  , :)
Line:931 ,(IDENTIFIER , cout)
Line:931 ,(OPERATOR   , <<)
Line:931 ,(CONST      , "Line:")
Line:931 ,(OPERATOR   , <<)
Line:931 ,(IDENTIFIER , line)
Line:931 ,(OPERATOR   , <<)
Line:931 ,(CONST      , ",出现非法数字常量格式错误")
Line:931 ,(OPERATOR   , <<)
Line:931 ,(IDENTIFIER , endl)
Line:931 ,(SEPERATOR  , ;)
Line:932 ,(IDENTIFIER , abort)
Line:932 ,(SEPERATOR  , ()
Line:932 ,(SEPERATOR  , ))
Line:932 ,(SEPERATOR  , ;)
Line:933 ,(KEYWORD    , break)
Line:933 ,(SEPERATOR  , ;)
Line:934 ,(KEYWORD    , case)
Line:934 ,(IDENTIFIER , SYNTAX_ERROR)
Line:934 ,(OPERATOR   , ::)
Line:934 ,(IDENTIFIER , UNVALID_CHAR_ERROR)
Line:934 ,(SEPERATOR  , :)
Line:935 ,(IDENTIFIER , cout)
Line:935 ,(OPERATOR   , <<)
Line:935 ,(CONST      , "Line:")
Line:935 ,(OPERATOR   , <<)
Line:935 ,(IDENTIFIER , line)
Line:935 ,(OPERATOR   , <<)
Line:935 ,(CONST      , ",出现非法字符错误")
Line:935 ,(OPERATOR   , <<)
Line:935 ,(IDENTIFIER , endl)
Line:935 ,(SEPERATOR  , ;)
Line:936 ,(IDENTIFIER , abort)
Line:936 ,(SEPERATOR  , ()
Line:936 ,(SEPERATOR  , ))
Line:936 ,(SEPERATOR  , ;)
Line:937 ,(KEYWORD    , break)
Line:937 ,(SEPERATOR  , ;)
Line:938 ,(KEYWORD    , case)
Line:938 ,(IDENTIFIER , SYNTAX_ERROR)
Line:938 ,(OPERATOR   , ::)
Line:938 ,(IDENTIFIER , STRING_UNCLOSE_ERROR)
Line:938 ,(SEPERATOR  , :)
Line:939 ,(IDENTIFIER , cout)
Line:939 ,(OPERATOR   , <<)
Line:939 ,(CONST      , "Line:")
Line:939 ,(OPERATOR   , <<)
Line:939 ,(IDENTIFIER , line)
Line:939 ,(OPERATOR   , <<)
Line:939 ,(CONST      , ",出现字符串常量格式错误")
Line:939 ,(OPERATOR   , <<)
Line:939 ,(IDENTIFIER , endl)
Line:939 ,(SEPERATOR  , ;)
Line:940 ,(IDENTIFIER , abort)
Line:940 ,(SEPERATOR  , ()
Line:940 ,(SEPERATOR  , ))
Line:940 ,(SEPERATOR  , ;)
Line:941 ,(KEYWORD    , break)
Line:941 ,(SEPERATOR  , ;)
Line:942 ,(KEYWORD    , case)
Line:942 ,(IDENTIFIER , SYNTAX_ERROR)
Line:942 ,(OPERATOR   , ::)
Line:942 ,(IDENTIFIER , CHAR_SINGLE_QUOTE_UNMATCH_ERROR)
Line:942 ,(SEPERATOR  , :)
Line:943 ,(IDENTIFIER , cout)
Line:943 ,(OPERATOR   , <<)
Line:943 ,(CONST      , "Line:")
Line:943 ,(OPERATOR   , <<)
Line:943 ,(IDENTIFIER , line)
Line:943 ,(OPERATOR   , <<)
Line:943 ,(CONST      , ",出现非法字符错误")
Line:943 ,(OPERATOR   , <<)
Line:943 ,(IDENTIFIER , endl)
Line:943 ,(SEPERATOR  , ;)
Line:944 ,(IDENTIFIER , abort)
Line:944 ,(SEPERATOR  , ()
Line:944 ,(SEPERATOR  , ))
Line:944 ,(SEPERATOR  , ;)
Line:945 ,(KEYWORD    , break)
Line:945 ,(SEPERATOR  , ;)
Line:946 ,(KEYWORD    , case)
Line:946 ,(IDENTIFIER , SYNTAX_ERROR)
Line:946 ,(OPERATOR   , ::)
Line:946 ,(IDENTIFIER , OP_FORMAT_ERROR)
Line:946 ,(SEPERATOR  , :)
Line:947 ,(IDENTIFIER , cout)
Line:947 ,(OPERATOR   , <<)
Line:947 ,(CONST      , "Line:")
Line:947 ,(OPERATOR   , <<)
Line:947 ,(IDENTIFIER , line)
Line:947 ,(OPERATOR   , <<)
Line:947 ,(CONST      , "出现非法运算符错误(〃ω〃)")
Line:947 ,(OPERATOR   , <<)
Line:947 ,(IDENTIFIER , endl)
Line:947 ,(SEPERATOR  , ;)
Line:948 ,(IDENTIFIER , abort)
Line:948 ,(SEPERATOR  , ()
Line:948 ,(SEPERATOR  , ))
Line:948 ,(SEPERATOR  , ;)
Line:949 ,(KEYWORD    , break)
Line:949 ,(SEPERATOR  , ;)
Line:950 ,(KEYWORD    , case)
Line:950 ,(IDENTIFIER , SYNTAX_ERROR)
Line:950 ,(OPERATOR   , ::)
Line:950 ,(IDENTIFIER , MULLINE_NOTE_NOT_END_ERROR)
Line:950 ,(SEPERATOR  , :)
Line:951 ,(IDENTIFIER , cout)
Line:951 ,(OPERATOR   , <<)
Line:951 ,(CONST      , "Line:")
Line:951 ,(OPERATOR   , <<)
Line:951 ,(IDENTIFIER , line)
Line:951 ,(OPERATOR   , <<)
Line:951 ,(CONST      , ",发生注释无结尾错误TnT")
Line:951 ,(OPERATOR   , <<)
Line:951 ,(IDENTIFIER , endl)
Line:951 ,(SEPERATOR  , ;)
Line:952 ,(IDENTIFIER , abort)
Line:952 ,(SEPERATOR  , ()
Line:952 ,(SEPERATOR  , ))
Line:952 ,(SEPERATOR  , ;)
Line:953 ,(KEYWORD    , break)
Line:953 ,(SEPERATOR  , ;)
Line:954 ,(KEYWORD    , default)
Line:954 ,(SEPERATOR  , :)
Line:955 ,(KEYWORD    , break)
Line:955 ,(SEPERATOR  , ;)
Line:956 ,(SEPERATOR  , })
Line:957 ,(SEPERATOR  , })
每行开始空格数:
Line:1 , has 0 Space
Line:2 , has 0 Space
Line:3 , has 0 Space
Line:4 , has 0 Space
Line:5 , has 0 Space
Line:6 , has 0 Space
Line:7 , has 0 Space
Line:8 , has 0 Space
Line:9 , has 0 Space
Line:10 , has 0 Space
Line:11 , has 0 Space
Line:12 , has 0 Space
Line:13 , has 0 Space
Line:14 , has 0 Space
Line:15 , has 0 Space
Line:16 , has 0 Space
Line:17 , has 0 Space
Line:18 , has 0 Space
Line:19 , has 0 Space
Line:20 , has 0 Space
Line:21 , has 0 Space
Line:22 , has 0 Space
Line:23 , has 0 Space
Line:24 , has 0 Space
Line:25 , has 0 Space
Line:26 , has 4 Space
Line:27 , has 4 Space
Line:28 , has 4 Space
Line:29 , has 8 Space
Line:30 , has 4 Space
Line:31 , has 4 Space
Line:32 , has 0 Space
Line:33 , has 0 Space
Line:34 , has 0 Space
Line:35 , has 0 Space
Line:36 , has 0 Space
Line:37 , has 0 Space
Line:38 , has 0 Space
Line:39 , has 0 Space
Line:40 , has 4 Space
Line:41 , has 4 Space
Line:42 , has 8 Space
Line:43 , has 4 Space
Line:44 , has 0 Space
Line:45 , has 0 Space
Line:46 , has 0 Space
Line:47 , has 0 Space
Line:48 , has 0 Space
Line:49 , has 0 Space
Line:50 , has 0 Space
Line:51 , has 0 Space
Line:52 , has 4 Space
Line:53 , has 8 Space
Line:54 , has 8 Space
Line:55 , has 8 Space
Line:56 , has 8 Space
Line:57 , has 4 Space
Line:58 , has 4 Space
Line:59 , has 0 Space
Line:60 , has 0 Space
Line:61 , has 0 Space
Line:62 , has 0 Space
Line:63 , has 0 Space
Line:64 , has 0 Space
Line:65 , has 0 Space
Line:66 , has 0 Space
Line:67 , has 4 Space
Line:68 , has 4 Space
Line:69 , has 8 Space
Line:70 , has 4 Space
Line:71 , has 0 Space
Line:72 , has 0 Space
Line:73 , has 0 Space
Line:74 , has 0 Space
Line:75 , has 0 Space
Line:76 , has 0 Space
Line:77 , has 0 Space
Line:78 , has 0 Space
Line:79 , has 4 Space
Line:80 , has 8 Space
Line:81 , has 12 Space
Line:82 , has 16 Space
Line:83 , has 12 Space
Line:84 , has 12 Space
Line:85 , has 12 Space
Line:86 , has 8 Space
Line:87 , has 8 Space
Line:88 , has 12 Space
Line:89 , has 8 Space
Line:90 , has 4 Space
Line:91 , has 0 Space
Line:92 , has 0 Space
Line:93 , has 0 Space
Line:94 , has 0 Space
Line:95 , has 0 Space
Line:96 , has 0 Space
Line:97 , has 0 Space
Line:98 , has 0 Space
Line:99 , has 4 Space
Line:100 , has 4 Space
Line:101 , has 4 Space
Line:102 , has 8 Space
Line:103 , has 12 Space
Line:104 , has 12 Space
Line:105 , has 12 Space
Line:106 , has 8 Space
Line:107 , has 8 Space
Line:108 , has 12 Space
Line:109 , has 8 Space
Line:110 , has 8 Space
Line:111 , has 12 Space
Line:112 , has 12 Space
Line:113 , has 8 Space
Line:114 , has 4 Space
Line:115 , has 4 Space
Line:116 , has 0 Space
Line:117 , has 0 Space
Line:118 , has 0 Space
Line:119 , has 0 Space
Line:120 , has 0 Space
Line:121 , has 0 Space
Line:122 , has 0 Space
Line:123 , has 0 Space
Line:124 , has 4 Space
Line:125 , has 4 Space
Line:126 , has 8 Space
Line:127 , has 4 Space
Line:128 , has 4 Space
Line:129 , has 8 Space
Line:130 , has 8 Space
Line:131 , has 4 Space
Line:132 , has 4 Space
Line:133 , has 8 Space
Line:134 , has 4 Space
Line:135 , has 0 Space
Line:136 , has 0 Space
Line:137 , has 0 Space
Line:138 , has 0 Space
Line:139 , has 0 Space
Line:140 , has 0 Space
Line:141 , has 0 Space
Line:142 , has 4 Space
Line:143 , has 4 Space
Line:144 , has 0 Space
Line:145 , has 0 Space
Line:146 , has 0 Space
Line:147 , has 0 Space
Line:148 , has 0 Space
Line:149 , has 0 Space
Line:150 , has 0 Space
Line:151 , has 4 Space
Line:152 , has 8 Space
Line:153 , has 8 Space
Line:154 , has 4 Space
Line:155 , has 4 Space
Line:156 , has 8 Space
Line:157 , has 8 Space
Line:158 , has 4 Space
Line:159 , has 0 Space
Line:160 , has 0 Space
Line:161 , has 0 Space
Line:162 , has 0 Space
Line:163 , has 0 Space
Line:164 , has 0 Space
Line:165 , has 0 Space
Line:166 , has 4 Space
Line:167 , has 0 Space
Line:168 , has 0 Space
Line:169 , has 0 Space
Line:170 , has 0 Space
Line:171 , has 0 Space
Line:172 , has 0 Space
Line:173 , has 0 Space
Line:174 , has 0 Space
Line:175 , has 4 Space
Line:176 , has 4 Space
Line:177 , has 4 Space
Line:178 , has 4 Space
Line:179 , has 8 Space
Line:180 , has 12 Space
Line:181 , has 16 Space
Line:182 , has 16 Space
Line:183 , has 12 Space
Line:184 , has 12 Space
Line:185 , has 16 Space
Line:186 , has 12 Space
Line:187 , has 12 Space
Line:188 , has 16 Space
Line:189 , has 16 Space
Line:190 , has 12 Space
Line:191 , has 8 Space
Line:192 , has 8 Space
Line:193 , has 12 Space
Line:194 , has 16 Space
Line:195 , has 12 Space
Line:196 , has 12 Space
Line:197 , has 16 Space
Line:198 , has 16 Space
Line:199 , has 12 Space
Line:200 , has 8 Space
Line:201 , has 8 Space
Line:202 , has 12 Space
Line:203 , has 16 Space
Line:204 , has 12 Space
Line:205 , has 12 Space
Line:206 , has 16 Space
Line:207 , has 16 Space
Line:208 , has 12 Space
Line:209 , has 8 Space
Line:210 , has 8 Space
Line:211 , has 4 Space
Line:212 , has 8 Space
Line:213 , has 12 Space
Line:214 , has 16 Space
Line:215 , has 16 Space
Line:216 , has 12 Space
Line:217 , has 12 Space
Line:218 , has 16 Space
Line:219 , has 12 Space
Line:220 , has 12 Space
Line:221 , has 16 Space
Line:222 , has 16 Space
Line:223 , has 12 Space
Line:224 , has 8 Space
Line:225 , has 8 Space
Line:226 , has 12 Space
Line:227 , has 16 Space
Line:228 , has 12 Space
Line:229 , has 12 Space
Line:230 , has 16 Space
Line:231 , has 16 Space
Line:232 , has 12 Space
Line:233 , has 8 Space
Line:234 , has 8 Space
Line:235 , has 12 Space
Line:236 , has 16 Space
Line:237 , has 12 Space
Line:238 , has 12 Space
Line:239 , has 16 Space
Line:240 , has 16 Space
Line:241 , has 12 Space
Line:242 , has 8 Space
Line:243 , has 8 Space
Line:244 , has 4 Space
Line:245 , has 8 Space
Line:246 , has 12 Space
Line:247 , has 16 Space
Line:248 , has 12 Space
Line:249 , has 12 Space
Line:250 , has 16 Space
Line:251 , has 16 Space
Line:252 , has 12 Space
Line:253 , has 8 Space
Line:254 , has 8 Space
Line:255 , has 12 Space
Line:256 , has 16 Space
Line:257 , has 12 Space
Line:258 , has 12 Space
Line:259 , has 16 Space
Line:260 , has 16 Space
Line:261 , has 12 Space
Line:262 , has 8 Space
Line:263 , has 8 Space
Line:264 , has 12 Space
Line:265 , has 16 Space
Line:266 , has 12 Space
Line:267 , has 12 Space
Line:268 , has 16 Space
Line:269 , has 16 Space
Line:270 , has 12 Space
Line:271 , has 8 Space
Line:272 , has 8 Space
Line:273 , has 4 Space
Line:274 , has 8 Space
Line:275 , has 12 Space
Line:276 , has 16 Space
Line:277 , has 12 Space
Line:278 , has 12 Space
Line:279 , has 16 Space
Line:280 , has 16 Space
Line:281 , has 12 Space
Line:282 , has 8 Space
Line:283 , has 8 Space
Line:284 , has 12 Space
Line:285 , has 16 Space
Line:286 , has 12 Space
Line:287 , has 12 Space
Line:288 , has 16 Space
Line:289 , has 16 Space
Line:290 , has 12 Space
Line:291 , has 8 Space
Line:292 , has 8 Space
Line:293 , has 12 Space
Line:294 , has 16 Space
Line:295 , has 12 Space
Line:296 , has 12 Space
Line:297 , has 16 Space
Line:298 , has 16 Space
Line:299 , has 12 Space
Line:300 , has 8 Space
Line:301 , has 8 Space
Line:302 , has 12 Space
Line:303 , has 16 Space
Line:304 , has 12 Space
Line:305 , has 12 Space
Line:306 , has 16 Space
Line:307 , has 16 Space
Line:308 , has 12 Space
Line:309 , has 8 Space
Line:310 , has 8 Space
Line:311 , has 4 Space
Line:312 , has 8 Space
Line:313 , has 12 Space
Line:314 , has 16 Space
Line:315 , has 12 Space
Line:316 , has 12 Space
Line:317 , has 16 Space
Line:318 , has 16 Space
Line:319 , has 12 Space
Line:320 , has 8 Space
Line:321 , has 8 Space
Line:322 , has 12 Space
Line:323 , has 16 Space
Line:324 , has 12 Space
Line:325 , has 12 Space
Line:326 , has 16 Space
Line:327 , has 16 Space
Line:328 , has 12 Space
Line:329 , has 8 Space
Line:330 , has 8 Space
Line:331 , has 4 Space
Line:332 , has 8 Space
Line:333 , has 12 Space
Line:334 , has 16 Space
Line:335 , has 12 Space
Line:336 , has 12 Space
Line:337 , has 16 Space
Line:338 , has 16 Space
Line:339 , has 12 Space
Line:340 , has 8 Space
Line:341 , has 8 Space
Line:342 , has 12 Space
Line:343 , has 16 Space
Line:344 , has 12 Space
Line:345 , has 12 Space
Line:346 , has 16 Space
Line:347 , has 16 Space
Line:348 , has 12 Space
Line:349 , has 8 Space
Line:350 , has 8 Space
Line:351 , has 4 Space
Line:352 , has 8 Space
Line:353 , has 12 Space
Line:354 , has 16 Space
Line:355 , has 12 Space
Line:356 , has 12 Space
Line:357 , has 16 Space
Line:358 , has 16 Space
Line:359 , has 12 Space
Line:360 , has 8 Space
Line:361 , has 8 Space
Line:362 , has 12 Space
Line:363 , has 16 Space
Line:364 , has 12 Space
Line:365 , has 12 Space
Line:366 , has 16 Space
Line:367 , has 16 Space
Line:368 , has 12 Space
Line:369 , has 8 Space
Line:370 , has 8 Space
Line:371 , has 4 Space
Line:372 , has 8 Space
Line:373 , has 12 Space
Line:374 , has 16 Space
Line:375 , has 12 Space
Line:376 , has 12 Space
Line:377 , has 16 Space
Line:378 , has 16 Space
Line:379 , has 12 Space
Line:380 , has 8 Space
Line:381 , has 8 Space
Line:382 , has 12 Space
Line:383 , has 16 Space
Line:384 , has 12 Space
Line:385 , has 12 Space
Line:386 , has 16 Space
Line:387 , has 16 Space
Line:388 , has 12 Space
Line:389 , has 8 Space
Line:390 , has 8 Space
Line:391 , has 12 Space
Line:392 , has 16 Space
Line:393 , has 12 Space
Line:394 , has 12 Space
Line:395 , has 16 Space
Line:396 , has 16 Space
Line:397 , has 12 Space
Line:398 , has 8 Space
Line:399 , has 8 Space
Line:400 , has 4 Space
Line:401 , has 8 Space
Line:402 , has 12 Space
Line:403 , has 16 Space
Line:404 , has 12 Space
Line:405 , has 12 Space
Line:406 , has 16 Space
Line:407 , has 16 Space
Line:408 , has 12 Space
Line:409 , has 8 Space
Line:410 , has 8 Space
Line:411 , has 12 Space
Line:412 , has 16 Space
Line:413 , has 12 Space
Line:414 , has 12 Space
Line:415 , has 16 Space
Line:416 , has 16 Space
Line:417 , has 12 Space
Line:418 , has 8 Space
Line:419 , has 8 Space
Line:420 , has 12 Space
Line:421 , has 16 Space
Line:422 , has 12 Space
Line:423 , has 12 Space
Line:424 , has 16 Space
Line:425 , has 16 Space
Line:426 , has 12 Space
Line:427 , has 8 Space
Line:428 , has 8 Space
Line:429 , has 4 Space
Line:430 , has 8 Space
Line:431 , has 12 Space
Line:432 , has 16 Space
Line:433 , has 12 Space
Line:434 , has 12 Space
Line:435 , has 16 Space
Line:436 , has 16 Space
Line:437 , has 12 Space
Line:438 , has 8 Space
Line:439 , has 8 Space
Line:440 , has 12 Space
Line:441 , has 16 Space
Line:442 , has 12 Space
Line:443 , has 12 Space
Line:444 , has 16 Space
Line:445 , has 16 Space
Line:446 , has 12 Space
Line:447 , has 8 Space
Line:448 , has 8 Space
Line:449 , has 4 Space
Line:450 , has 8 Space
Line:451 , has 12 Space
Line:452 , has 8 Space
Line:453 , has 8 Space
Line:454 , has 12 Space
Line:455 , has 12 Space
Line:456 , has 8 Space
Line:457 , has 8 Space
Line:458 , has 4 Space
Line:459 , has 8 Space
Line:460 , has 12 Space
Line:461 , has 8 Space
Line:462 , has 8 Space
Line:463 , has 12 Space
Line:464 , has 12 Space
Line:465 , has 8 Space
Line:466 , has 8 Space
Line:467 , has 4 Space
Line:468 , has 8 Space
Line:469 , has 12 Space
Line:470 , has 16 Space
Line:471 , has 12 Space
Line:472 , has 12 Space
Line:473 , has 16 Space
Line:474 , has 16 Space
Line:475 , has 12 Space
Line:476 , has 8 Space
Line:477 , has 8 Space
Line:478 , has 12 Space
Line:479 , has 16 Space
Line:480 , has 12 Space
Line:481 , has 12 Space
Line:482 , has 16 Space
Line:483 , has 16 Space
Line:484 , has 12 Space
Line:485 , has 8 Space
Line:486 , has 8 Space
Line:487 , has 4 Space
Line:488 , has 8 Space
Line:489 , has 12 Space
Line:490 , has 16 Space
Line:491 , has 12 Space
Line:492 , has 12 Space
Line:493 , has 16 Space
Line:494 , has 16 Space
Line:495 , has 12 Space
Line:496 , has 8 Space
Line:497 , has 8 Space
Line:498 , has 12 Space
Line:499 , has 16 Space
Line:500 , has 12 Space
Line:501 , has 12 Space
Line:502 , has 16 Space
Line:503 , has 16 Space
Line:504 , has 12 Space
Line:505 , has 8 Space
Line:506 , has 8 Space
Line:507 , has 4 Space
Line:508 , has 8 Space
Line:509 , has 12 Space
Line:510 , has 8 Space
Line:511 , has 8 Space
Line:512 , has 12 Space
Line:513 , has 12 Space
Line:514 , has 8 Space
Line:515 , has 8 Space
Line:516 , has 4 Space
Line:517 , has 8 Space
Line:518 , has 4 Space
Line:519 , has 0 Space
Line:520 , has 0 Space
Line:521 , has 0 Space
Line:522 , has 0 Space
Line:523 , has 0 Space
Line:524 , has 0 Space
Line:525 , has 0 Space
Line:526 , has 4 Space
Line:527 , has 8 Space
Line:528 , has 12 Space
Line:529 , has 8 Space
Line:530 , has 4 Space
Line:531 , has 4 Space
Line:532 , has 0 Space
Line:533 , has 0 Space
Line:534 , has 0 Space
Line:535 , has 0 Space
Line:536 , has 0 Space
Line:537 , has 0 Space
Line:538 , has 0 Space
Line:539 , has 4 Space
Line:540 , has 0 Space
Line:541 , has 0 Space
Line:542 , has 0 Space
Line:543 , has 0 Space
Line:544 , has 0 Space
Line:545 , has 0 Space
Line:546 , has 0 Space
Line:547 , has 4 Space
Line:548 , has 4 Space
Line:549 , has 4 Space
Line:550 , has 8 Space
Line:551 , has 4 Space
Line:552 , has 4 Space
Line:553 , has 8 Space
Line:554 , has 4 Space
Line:555 , has 4 Space
Line:556 , has 8 Space
Line:557 , has 4 Space
Line:558 , has 0 Space
Line:559 , has 0 Space
Line:560 , has 0 Space
Line:561 , has 0 Space
Line:562 , has 0 Space
Line:563 , has 0 Space
Line:564 , has 0 Space
Line:565 , has 0 Space
Line:566 , has 4 Space
Line:567 , has 4 Space
Line:568 , has 8 Space
Line:569 , has 8 Space
Line:570 , has 8 Space
Line:571 , has 12 Space
Line:572 , has 12 Space
Line:573 , has 12 Space
Line:574 , has 16 Space
Line:575 , has 20 Space
Line:576 , has 16 Space
Line:577 , has 16 Space
Line:578 , has 20 Space
Line:579 , has 16 Space
Line:580 , has 16 Space
Line:581 , has 20 Space
Line:582 , has 16 Space
Line:583 , has 12 Space
Line:584 , has 12 Space
Line:585 , has 16 Space
Line:586 , has 12 Space
Line:587 , has 12 Space
Line:588 , has 8 Space
Line:589 , has 12 Space
Line:590 , has 12 Space
Line:591 , has 12 Space
Line:592 , has 16 Space
Line:593 , has 20 Space
Line:594 , has 16 Space
Line:595 , has 16 Space
Line:596 , has 20 Space
Line:597 , has 16 Space
Line:598 , has 16 Space
Line:599 , has 20 Space
Line:600 , has 16 Space
Line:601 , has 12 Space
Line:602 , has 12 Space
Line:603 , has 16 Space
Line:604 , has 12 Space
Line:605 , has 12 Space
Line:606 , has 8 Space
Line:607 , has 12 Space
Line:608 , has 12 Space
Line:609 , has 12 Space
Line:610 , has 16 Space
Line:611 , has 20 Space
Line:612 , has 16 Space
Line:613 , has 16 Space
Line:614 , has 20 Space
Line:615 , has 16 Space
Line:616 , has 16 Space
Line:617 , has 20 Space
Line:618 , has 16 Space
Line:619 , has 12 Space
Line:620 , has 12 Space
Line:621 , has 16 Space
Line:622 , has 12 Space
Line:623 , has 12 Space
Line:624 , has 8 Space
Line:625 , has 12 Space
Line:626 , has 8 Space
Line:627 , has 4 Space
Line:628 , has 4 Space
Line:629 , has 8 Space
Line:630 , has 12 Space
Line:631 , has 8 Space
Line:632 , has 8 Space
Line:633 , has 12 Space
Line:634 , has 12 Space
Line:635 , has 16 Space
Line:636 , has 20 Space
Line:637 , has 16 Space
Line:638 , has 16 Space
Line:639 , has 20 Space
Line:640 , has 20 Space
Line:641 , has 24 Space
Line:642 , has 20 Space
Line:643 , has 20 Space
Line:644 , has 24 Space
Line:645 , has 20 Space
Line:646 , has 16 Space
Line:647 , has 16 Space
Line:648 , has 20 Space
Line:649 , has 20 Space
Line:650 , has 24 Space
Line:651 , has 20 Space
Line:652 , has 20 Space
Line:653 , has 24 Space
Line:654 , has 28 Space
Line:655 , has 24 Space
Line:656 , has 24 Space
Line:657 , has 28 Space
Line:658 , has 24 Space
Line:659 , has 24 Space
Line:660 , has 28 Space
Line:661 , has 24 Space
Line:662 , has 20 Space
Line:663 , has 20 Space
Line:664 , has 24 Space
Line:665 , has 28 Space
Line:666 , has 24 Space
Line:667 , has 24 Space
Line:668 , has 28 Space
Line:669 , has 24 Space
Line:670 , has 20 Space
Line:671 , has 16 Space
Line:672 , has 16 Space
Line:673 , has 20 Space
Line:674 , has 16 Space
Line:675 , has 16 Space
Line:676 , has 20 Space
Line:677 , has 16 Space
Line:678 , has 12 Space
Line:679 , has 12 Space
Line:680 , has 16 Space
Line:681 , has 20 Space
Line:682 , has 16 Space
Line:683 , has 16 Space
Line:684 , has 20 Space
Line:685 , has 16 Space
Line:686 , has 12 Space
Line:687 , has 8 Space
Line:688 , has 8 Space
Line:689 , has 12 Space
Line:690 , has 12 Space
Line:691 , has 16 Space
Line:692 , has 12 Space
Line:693 , has 12 Space
Line:694 , has 16 Space
Line:695 , has 20 Space
Line:696 , has 16 Space
Line:697 , has 16 Space
Line:698 , has 20 Space
Line:699 , has 16 Space
Line:700 , has 16 Space
Line:701 , has 20 Space
Line:702 , has 16 Space
Line:703 , has 12 Space
Line:704 , has 12 Space
Line:705 , has 16 Space
Line:706 , has 20 Space
Line:707 , has 16 Space
Line:708 , has 16 Space
Line:709 , has 20 Space
Line:710 , has 16 Space
Line:711 , has 12 Space
Line:712 , has 8 Space
Line:713 , has 8 Space
Line:714 , has 12 Space
Line:715 , has 12 Space
Line:716 , has 16 Space
Line:717 , has 12 Space
Line:718 , has 12 Space
Line:719 , has 16 Space
Line:720 , has 12 Space
Line:721 , has 8 Space
Line:722 , has 8 Space
Line:723 , has 12 Space
Line:724 , has 8 Space
Line:725 , has 8 Space
Line:726 , has 12 Space
Line:727 , has 8 Space
Line:728 , has 4 Space
Line:729 , has 0 Space
Line:730 , has 0 Space
Line:731 , has 0 Space
Line:732 , has 0 Space
Line:733 , has 0 Space
Line:734 , has 0 Space
Line:735 , has 0 Space
Line:736 , has 0 Space
Line:737 , has 4 Space
Line:738 , has 4 Space
Line:739 , has 8 Space
Line:740 , has 12 Space
Line:741 , has 12 Space
Line:742 , has 12 Space
Line:743 , has 8 Space
Line:744 , has 8 Space
Line:745 , has 12 Space
Line:746 , has 8 Space
Line:747 , has 4 Space
Line:748 , has 4 Space
Line:749 , has 8 Space
Line:750 , has 12 Space
Line:751 , has 12 Space
Line:752 , has 12 Space
Line:753 , has 8 Space
Line:754 , has 8 Space
Line:755 , has 12 Space
Line:756 , has 8 Space
Line:757 , has 4 Space
Line:758 , has 0 Space
Line:759 , has 0 Space
Line:760 , has 0 Space
Line:761 , has 0 Space
Line:762 , has 0 Space
Line:763 , has 0 Space
Line:764 , has 0 Space
Line:765 , has 0 Space
Line:766 , has 4 Space
Line:767 , has 4 Space
Line:768 , has 4 Space
Line:769 , has 8 Space
Line:770 , has 12 Space
Line:771 , has 8 Space
Line:772 , has 8 Space
Line:773 , has 12 Space
Line:774 , has 16 Space
Line:775 , has 12 Space
Line:776 , has 12 Space
Line:777 , has 8 Space
Line:778 , has 4 Space
Line:779 , has 4 Space
Line:780 , has 4 Space
Line:781 , has 0 Space
Line:782 , has 0 Space
Line:783 , has 0 Space
Line:784 , has 0 Space
Line:785 , has 0 Space
Line:786 , has 0 Space
Line:787 , has 0 Space
Line:788 , has 0 Space
Line:789 , has 4 Space
Line:790 , has 8 Space
Line:791 , has 12 Space
Line:792 , has 8 Space
Line:793 , has 4 Space
Line:794 , has 4 Space
Line:795 , has 0 Space
Line:796 , has 0 Space
Line:797 , has 0 Space
Line:798 , has 0 Space
Line:799 , has 0 Space
Line:800 , has 0 Space
Line:801 , has 0 Space
Line:802 , has 0 Space
Line:803 , has 4 Space
Line:804 , has 4 Space
Line:805 , has 8 Space
Line:806 , has 8 Space
Line:807 , has 8 Space
Line:808 , has 8 Space
Line:809 , has 12 Space
Line:810 , has 8 Space
Line:811 , has 8 Space
Line:812 , has 12 Space
Line:813 , has 8 Space
Line:814 , has 8 Space
Line:815 , has 12 Space
Line:816 , has 16 Space
Line:817 , has 12 Space
Line:818 , has 8 Space
Line:819 , has 4 Space
Line:820 , has 4 Space
Line:821 , has 8 Space
Line:822 , has 4 Space
Line:823 , has 0 Space
Line:824 , has 0 Space
Line:825 , has 0 Space
Line:826 , has 0 Space
Line:827 , has 0 Space
Line:828 , has 0 Space
Line:829 , has 0 Space
Line:830 , has 0 Space
Line:831 , has 4 Space
Line:832 , has 8 Space
Line:833 , has 4 Space
Line:834 , has 4 Space
Line:835 , has 4 Space
Line:836 , has 4 Space
Line:837 , has 4 Space
Line:838 , has 8 Space
Line:839 , has 12 Space
Line:840 , has 16 Space
Line:841 , has 12 Space
Line:842 , has 8 Space
Line:843 , has 8 Space
Line:844 , has 12 Space
Line:845 , has 16 Space
Line:846 , has 12 Space
Line:847 , has 8 Space
Line:848 , has 8 Space
Line:849 , has 12 Space
Line:850 , has 8 Space
Line:851 , has 8 Space
Line:852 , has 4 Space
Line:853 , has 8 Space
Line:854 , has 8 Space
Line:855 , has 4 Space
Line:856 , has 8 Space
Line:857 , has 8 Space
Line:858 , has 4 Space
Line:859 , has 8 Space
Line:860 , has 8 Space
Line:861 , has 4 Space
Line:862 , has 8 Space
Line:863 , has 8 Space
Line:864 , has 4 Space
Line:865 , has 4 Space
Line:866 , has 4 Space
Line:867 , has 4 Space
Line:868 , has 4 Space
Line:869 , has 4 Space
Line:870 , has 8 Space
Line:871 , has 8 Space
Line:872 , has 4 Space
Line:873 , has 8 Space
Line:874 , has 8 Space
Line:875 , has 4 Space
Line:876 , has 8 Space
Line:877 , has 8 Space
Line:878 , has 4 Space
Line:879 , has 8 Space
Line:880 , has 8 Space
Line:881 , has 4 Space
Line:882 , has 8 Space
Line:883 , has 8 Space
Line:884 , has 4 Space
Line:885 , has 0 Space
Line:886 , has 0 Space
Line:887 , has 0 Space
Line:888 , has 0 Space
Line:889 , has 0 Space
Line:890 , has 0 Space
Line:891 , has 0 Space
Line:892 , has 0 Space
Line:893 , has 4 Space
Line:894 , has 8 Space
Line:895 , has 8 Space
Line:896 , has 4 Space
Line:897 , has 0 Space
Line:898 , has 0 Space
Line:899 , has 0 Space
Line:900 , has 0 Space
Line:901 , has 0 Space
Line:902 , has 0 Space
Line:903 , has 0 Space
Line:904 , has 0 Space
Line:905 , has 4 Space
Line:906 , has 4 Space
Line:907 , has 8 Space
Line:908 , has 4 Space
Line:909 , has 4 Space
Line:910 , has 4 Space
Line:911 , has 8 Space
Line:912 , has 8 Space
Line:913 , has 8 Space
Line:914 , has 4 Space
Line:915 , has 4 Space
Line:916 , has 4 Space
Line:917 , has 8 Space
Line:918 , has 4 Space
Line:919 , has 0 Space
Line:920 , has 0 Space
Line:921 , has 0 Space
Line:922 , has 0 Space
Line:923 , has 0 Space
Line:924 , has 0 Space
Line:925 , has 0 Space
Line:926 , has 0 Space
Line:927 , has 0 Space
Line:928 , has 4 Space
Line:929 , has 4 Space
Line:930 , has 4 Space
Line:931 , has 8 Space
Line:932 , has 8 Space
Line:933 , has 8 Space
Line:934 , has 4 Space
Line:935 , has 8 Space
Line:936 , has 8 Space
Line:937 , has 8 Space
Line:938 , has 4 Space
Line:939 , has 8 Space
Line:940 , has 8 Space
Line:941 , has 8 Space
Line:942 , has 4 Space
Line:943 , has 8 Space
Line:944 , has 8 Space
Line:945 , has 8 Space
Line:946 , has 4 Space
Line:947 , has 8 Space
Line:948 , has 8 Space
Line:949 , has 8 Space
Line:950 , has 4 Space
Line:951 , has 8 Space
Line:952 , has 8 Space
Line:953 , has 8 Space
Line:954 , has 4 Space
Line:955 , has 8 Space
Line:956 , has 4 Space
Line:957 , has 0 Space
进行语法分析 ！！
以下打印语法解析树：
[Root]
---[FuncDefine]: {Name: openFile ,Line:25 }
                 {ReturnType:void ,Modifier: None ,ArgTable:{string:dir}}
---------[Branch]: {Type: if ,Line:27 }
                   Judgement:
-------------------[Operator]: {OpType: ! ,Line:27 }
                               {OpDir: R }
---------------------------[IdNode]: { Name: inFile ,Line: 27 }
                                     {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: . ,Line:27 }
                                   {OpDir: M }
---------------------------[Function]: {Name: is_open ,Line:27 }
                                       ArgList: 0 Members
-------------------[IdNode]: { Name: cout ,Line: 29 }
                             {LexType:IDENTIFIER }
---------------[Operator]: {OpType: << ,Line:29 }
                           {OpDir: M }
-----------------------[IdNode]: { Name: "未成功打开文件" ,Line: 29 }
                                 {LexType:CONST }
-------------------[Operator]: {OpType: << ,Line:29 }
                               {OpDir: M }
-----------------------[IdNode]: { Name: endl ,Line: 29 }
                                 {LexType:IDENTIFIER }


---------[Return]: {Line:31 }
-------------[IdNode]: { Name: inFile ,Line: 31 }
                       {LexType:IDENTIFIER }


---[FuncDefine]: {Name: recordSpace ,Line:39 }
                 {ReturnType:void ,Modifier: None ,ArgTable:}
---------[VarDeclare]: {Name: it ,Line:40 }
                       {Type:int,Modifier: None }

-------------[IdNode]: { Name: it ,Line: 40 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: = ,Line:40 }
                     {OpDir: M }
-------------[IdNode]: { Name: 0 ,Line: 40 }
                       {LexType:CONST }

---------[VarDeclare]: {Name: count ,Line:40 }
                       {Type:int,Modifier: None }

-------------[IdNode]: { Name: count ,Line: 40 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: = ,Line:40 }
                     {OpDir: M }
-------------[IdNode]: { Name: 0 ,Line: 40 }
                       {LexType:CONST }

---------[Branch]: {Type: while ,Line:41 }
                   Judgement:
-------------------------------[IdNode]: { Name: buffer ,Line: 41 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: [ ,Line:41 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: it ,Line: 41 }
                                         {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: == ,Line:41 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: ' ' ,Line: 41 }
                                     {LexType:CONST }
-------------------[Operator]: {OpType: || ,Line:41 }
                               {OpDir: M }
-------------------------------[IdNode]: { Name: buffer ,Line: 41 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: [ ,Line:41 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: it ,Line: 41 }
                                         {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: == ,Line:41 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: t ,Line: 41 }
                                     {LexType:CONST }
-------------------[IdNode]: { Name: count ,Line: 42 }
                             {LexType:IDENTIFIER }
---------------[Operator]: {OpType: += ,Line:42 }
                           {OpDir: M }
-------------------------------[IdNode]: { Name: buffer ,Line: 42 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: [ ,Line:42 }
                                       {OpDir: M }
-----------------------------------[IdNode]: { Name: it ,Line: 42 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: ++ ,Line:42 }
                                           {OpDir: L }
-----------------------[Operator]: {OpType: == ,Line:42 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: t ,Line: 42 }
                                     {LexType:CONST }
-------------------[Operator]: {OpType: ? ,Line:42 }
                               {OpDir: M }
---------------------------[IdNode]: { Name: TAB_SPACE ,Line: 42 }
                                     {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: : ,Line:42 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: 1 ,Line: 42 }
                                     {LexType:CONST }



---[FuncDefine]: {Name: loadBuffer ,Line:51 }
                 {ReturnType:bool ,Modifier: None ,ArgTable:{ifstream*:fin}}
---------[Branch]: {Type: if ,Line:52 }
                   Judgement:
-------------------[Operator]: {OpType: ! ,Line:52 }
                               {OpDir: R }
---------------------------[Operator]: {OpType: * ,Line:52 }
                                       {OpDir: R }
-------------------------------[IdNode]: { Name: fin ,Line: 52 }
                                         {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: . ,Line:52 }
                                   {OpDir: M }
---------------------------[Function]: {Name: eof ,Line:52 }
                                       ArgList: 0 Members
-------------------[Operator]: {OpType: * ,Line:53 }
                               {OpDir: R }
-----------------------[IdNode]: { Name: fin ,Line: 53 }
                                 {LexType:IDENTIFIER }
---------------[Operator]: {OpType: . ,Line:53 }
                           {OpDir: M }
-------------------[Function]: {Name: getline ,Line:53 }
                               ArgList: 2 Members
-------------------------------[IdNode]: { Name: buffer ,Line: 53 }
                                         {LexType:IDENTIFIER }
-------------------------------[IdNode]: { Name: MAX_BUFFER_SIZE ,Line: 53 }
                                         {LexType:IDENTIFIER }

-------------------[IdNode]: { Name: curLine ,Line: 54 }
                             {LexType:IDENTIFIER }
---------------[Operator]: {OpType: ++ ,Line:54 }
                           {OpDir: L }

---------------[Function]: {Name: recordSpace ,Line:55 }
                           ArgList: 0 Members

---------------[Return]: {Line:56 }
-------------------[IdNode]: { Name: true ,Line: 56 }
                             {LexType:KEYWORD }


---------[Return]: {Line:58 }
-------------[IdNode]: { Name: false ,Line: 58 }
                       {LexType:KEYWORD }


---[FuncDefine]: {Name: init ,Line:66 }
                 {ReturnType:void ,Modifier: None ,ArgTable:}
-------------[IdNode]: { Name: buffer ,Line: 67 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: = ,Line:67 }
                     {OpDir: M }
-------------[Operator]: {OpType: Cast ,Line:67 }
                         {OpDir: R ,CaseType: char* }
-----------------[Function]: {Name: malloc ,Line:67 }
                             ArgList: 1 Members
---------------------------------[IdNode]: { Name: MAX_BUFFER_SIZE ,Line: 67 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: * ,Line:67 }
                                         {OpDir: M }
---------------------------------[Function]: {Name: sizeof ,Line:67 }
                                             ArgList: 1 Members
---------------------------------------------[IdNode]: { Name: 1 ,Line: 67 }
                                                       {LexType:CONST }

---------[Branch]: {Type: if ,Line:68 }
                   Judgement:
-----------------------[IdNode]: { Name: buffer ,Line: 68 }
                                 {LexType:IDENTIFIER }
-------------------[Operator]: {OpType: != ,Line:68 }
                               {OpDir: M }
-----------------------[IdNode]: { Name: NULL ,Line: 68 }
                                 {LexType:IDENTIFIER }
---------------[Function]: {Name: memset ,Line:69 }
                           ArgList: 3 Members
---------------------------[IdNode]: { Name: buffer ,Line: 69 }
                                     {LexType:IDENTIFIER }
---------------------------[IdNode]: { Name: 0 ,Line: 69 }
                                     {LexType:CONST }
-------------------------------[IdNode]: { Name: MAX_BUFFER_SIZE ,Line: 69 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: * ,Line:69 }
                                       {OpDir: M }
-------------------------------[Function]: {Name: sizeof ,Line:69 }
                                           ArgList: 1 Members
-------------------------------------------[IdNode]: { Name: 1 ,Line: 69 }
                                                     {LexType:CONST }



---[FuncDefine]: {Name: shiftToNextToken ,Line:78 }
                 {ReturnType:void ,Modifier: None ,ArgTable:}
---------[Branch]: {Type: while ,Line:79 }
                   Judgement:
-------------------------------[IdNode]: { Name: buffer ,Line: 79 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: [ ,Line:79 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: cur ,Line: 79 }
                                         {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: == ,Line:79 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: ' ' ,Line: 79 }
                                     {LexType:CONST }
-------------------[Operator]: {OpType: || ,Line:79 }
                               {OpDir: M }
-----------------------------------[IdNode]: { Name: buffer ,Line: 79 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: [ ,Line:79 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: cur ,Line: 79 }
                                             {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: == ,Line:79 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: 0 ,Line: 79 }
                                         {LexType:CONST }
-----------------------[Operator]: {OpType: || ,Line:79 }
                                   {OpDir: M }
---------------------------------------[IdNode]: { Name: buffer ,Line: 79 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:79 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: cur ,Line: 79 }
                                                 {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: == ,Line:79 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: n ,Line: 79 }
                                             {LexType:CONST }
---------------------------[Operator]: {OpType: || ,Line:79 }
                                       {OpDir: M }
-------------------------------------------[IdNode]: { Name: buffer ,Line: 79 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: [ ,Line:79 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 79 }
                                                     {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: == ,Line:79 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: r ,Line: 79 }
                                                 {LexType:CONST }
-------------------------------[Operator]: {OpType: || ,Line:79 }
                                           {OpDir: M }
-------------------------------------------[IdNode]: { Name: buffer ,Line: 79 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: [ ,Line:79 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 79 }
                                                     {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: == ,Line:79 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: t ,Line: 79 }
                                                 {LexType:CONST }
---------------[Branch]: {Type: if ,Line:80 }
                         Judgement:
-------------------------------------[IdNode]: { Name: buffer ,Line: 80 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: [ ,Line:80 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: cur ,Line: 80 }
                                               {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: == ,Line:80 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: 0 ,Line: 80 }
                                           {LexType:CONST }
-------------------------[Operator]: {OpType: || ,Line:80 }
                                     {OpDir: M }
-------------------------------------[IdNode]: { Name: buffer ,Line: 80 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: [ ,Line:80 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: cur ,Line: 80 }
                                               {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: == ,Line:80 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: n ,Line: 80 }
                                           {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:81 }
                               Judgement:
-----------------------------------[Operator]: {OpType: * ,Line:81 }
                                               {OpDir: R }
-------------------------------------------[IdNode]: { Name: this ,Line: 81 }
                                                     {LexType:KEYWORD }
---------------------------------------[Operator]: {OpType: -> ,Line:81 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: fin ,Line: 81 }
                                                     {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: . ,Line:81 }
                                           {OpDir: M }
-----------------------------------[Function]: {Name: eof ,Line:81 }
                                               ArgList: 0 Members
---------------------------[Return]: {Line:82 }


---------------------[Function]: {Name: loadBuffer ,Line:84 }
                                 ArgList: 1 Members
-------------------------------------[IdNode]: { Name: this ,Line: 84 }
                                               {LexType:KEYWORD }
---------------------------------[Operator]: {OpType: -> ,Line:84 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: fin ,Line: 84 }
                                               {LexType:IDENTIFIER }

-------------------------[IdNode]: { Name: cur ,Line: 85 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: = ,Line:85 }
                                 {OpDir: M }
-------------------------[IdNode]: { Name: 0 ,Line: 85 }
                                   {LexType:CONST }


---------------[Branch]: {Type: if ,Line:87 }
                         Judgement:
-------------------------------------[IdNode]: { Name: buffer ,Line: 87 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: [ ,Line:87 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: cur ,Line: 87 }
                                               {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: == ,Line:87 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: ' ' ,Line: 87 }
                                           {LexType:CONST }
-------------------------[Operator]: {OpType: || ,Line:87 }
                                     {OpDir: M }
-------------------------------------[IdNode]: { Name: buffer ,Line: 87 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: [ ,Line:87 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: cur ,Line: 87 }
                                               {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: == ,Line:87 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: t ,Line: 87 }
                                           {LexType:CONST }
-------------------------[IdNode]: { Name: cur ,Line: 88 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: ++ ,Line:88 }
                                 {OpDir: L }




---[FuncDefine]: {Name: searchForNoteEndType_1 ,Line:98 }
                 {ReturnType:bool ,Modifier: None ,ArgTable:}
-------------[IdNode]: { Name: cur ,Line: 100 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: += ,Line:100 }
                     {OpDir: M }
-------------[IdNode]: { Name: 2 ,Line: 100 }
                       {LexType:CONST }

---------[Branch]: {Type: while ,Line:101 }
                   Judgement:
-------------------[IdNode]: { Name: true ,Line: 101 }
                             {LexType:KEYWORD }
---------------[Branch]: {Type: if ,Line:102 }
                         Judgement:
-------------------------------------[IdNode]: { Name: buffer ,Line: 102 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: [ ,Line:102 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: cur ,Line: 102 }
                                               {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: == ,Line:102 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: '*' ,Line: 102 }
                                           {LexType:CONST }
-------------------------[Operator]: {OpType: && ,Line:102 }
                                     {OpDir: M }
-------------------------------------[IdNode]: { Name: buffer ,Line: 102 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: [ ,Line:102 }
                                             {OpDir: M }
-----------------------------------------[IdNode]: { Name: cur ,Line: 102 }
                                                   {LexType:IDENTIFIER }
-------------------------------------[Operator]: {OpType: + ,Line:102 }
                                                 {OpDir: M }
-----------------------------------------[IdNode]: { Name: 1 ,Line: 102 }
                                                   {LexType:CONST }
-----------------------------[Operator]: {OpType: == ,Line:102 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: '/' ,Line: 102 }
                                           {LexType:CONST }
-------------------------[IdNode]: { Name: cur ,Line: 104 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: += ,Line:104 }
                                 {OpDir: M }
-------------------------[IdNode]: { Name: 2 ,Line: 104 }
                                   {LexType:CONST }

---------------------[Return]: {Line:105 }
-------------------------[IdNode]: { Name: true ,Line: 105 }
                                   {LexType:KEYWORD }


---------------[Branch]: {Type: else if ,Line:107 }
                         Judgement:
-----------------------------------------[IdNode]: { Name: buffer ,Line: 107 }
                                                   {LexType:IDENTIFIER }
-------------------------------------[Operator]: {OpType: [ ,Line:107 }
                                                 {OpDir: M }
-----------------------------------------[IdNode]: { Name: cur ,Line: 107 }
                                                   {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: == ,Line:107 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 0 ,Line: 107 }
                                               {LexType:CONST }
-----------------------------[Operator]: {OpType: || ,Line:107 }
                                         {OpDir: M }
-----------------------------------------[IdNode]: { Name: buffer ,Line: 107 }
                                                   {LexType:IDENTIFIER }
-------------------------------------[Operator]: {OpType: [ ,Line:107 }
                                                 {OpDir: M }
-----------------------------------------[IdNode]: { Name: cur ,Line: 107 }
                                                   {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: == ,Line:107 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: n ,Line: 107 }
                                               {LexType:CONST }
-------------------------[Operator]: {OpType: && ,Line:107 }
                                     {OpDir: M }
---------------------------------[Operator]: {OpType: * ,Line:107 }
                                             {OpDir: R }
-----------------------------------------[IdNode]: { Name: this ,Line: 107 }
                                                   {LexType:KEYWORD }
-------------------------------------[Operator]: {OpType: -> ,Line:107 }
                                                 {OpDir: M }
-----------------------------------------[IdNode]: { Name: fin ,Line: 107 }
                                                   {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: . ,Line:107 }
                                         {OpDir: M }
---------------------------------[Function]: {Name: eof ,Line:107 }
                                             ArgList: 0 Members
---------------------[Break]: {Line:108 }


---------------[Branch]: {Type: else ,Line:110 }
-------------------------[IdNode]: { Name: cur ,Line: 111 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: ++ ,Line:111 }
                                 {OpDir: L }

---------------------[Function]: {Name: shiftToNextToken ,Line:112 }
                                 ArgList: 0 Members



---------[Return]: {Line:115 }
-------------[IdNode]: { Name: false ,Line: 115 }
                       {LexType:KEYWORD }


---[FuncDefine]: {Name: searchForNoteEndType_2 ,Line:123 }
                 {ReturnType:bool ,Modifier: None ,ArgTable:}
---------[Branch]: {Type: while ,Line:125 }
                   Judgement:
-------------------------------[IdNode]: { Name: buffer ,Line: 125 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: [ ,Line:125 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: cur ,Line: 125 }
                                         {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: != ,Line:125 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: n ,Line: 125 }
                                     {LexType:CONST }
-------------------[Operator]: {OpType: && ,Line:125 }
                               {OpDir: M }
-------------------------------[IdNode]: { Name: buffer ,Line: 125 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: [ ,Line:125 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: cur ,Line: 125 }
                                         {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: != ,Line:125 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: 0 ,Line: 125 }
                                     {LexType:CONST }
-------------------[IdNode]: { Name: cur ,Line: 126 }
                             {LexType:IDENTIFIER }
---------------[Operator]: {OpType: ++ ,Line:126 }
                           {OpDir: L }


---------[Branch]: {Type: if ,Line:128 }
                   Judgement:
-------------------------------[IdNode]: { Name: buffer ,Line: 128 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: [ ,Line:128 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: cur ,Line: 128 }
                                         {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: == ,Line:128 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: 0 ,Line: 128 }
                                     {LexType:CONST }
-------------------[Operator]: {OpType: || ,Line:128 }
                               {OpDir: M }
---------------------------[Operator]: {OpType: * ,Line:128 }
                                       {OpDir: R }
-----------------------------------[IdNode]: { Name: this ,Line: 128 }
                                             {LexType:KEYWORD }
-------------------------------[Operator]: {OpType: -> ,Line:128 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: fin ,Line: 128 }
                                             {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: . ,Line:128 }
                                   {OpDir: M }
---------------------------[Function]: {Name: eof ,Line:128 }
                                       ArgList: 0 Members
---------------[Function]: {Name: shiftToNextToken ,Line:129 }
                           ArgList: 0 Members

---------------[Return]: {Line:130 }
-------------------[IdNode]: { Name: true ,Line: 130 }
                             {LexType:KEYWORD }


---------[Branch]: {Type: else ,Line:132 }
---------------[Return]: {Line:133 }
-------------------[IdNode]: { Name: false ,Line: 133 }
                             {LexType:KEYWORD }



---[FuncDefine]: {Name: extractMacro ,Line:141 }
                 {ReturnType:void ,Modifier: None ,ArgTable:}
-------------[IdNode]: { Name: macroBin ,Line: 142 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: . ,Line:142 }
                     {OpDir: M }
-------------[Function]: {Name: push_back ,Line:142 }
                         ArgList: 1 Members
-----------------------------[Function]: {Name: string ,Line:142 }
                                         ArgList: 1 Members
-----------------------------------------[IdNode]: { Name: buffer ,Line: 142 }
                                                   {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: . ,Line:142 }
                                     {OpDir: M }
-----------------------------[Function]: {Name: substr ,Line:142 }
                                         ArgList: 2 Members
---------------------------------------------[Operator]: {OpType: Cast ,Line:142 }
                                                         {OpDir: R ,CaseType: long }
-------------------------------------------------[IdNode]: { Name: cur ,Line: 142 }
                                                           {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: + ,Line:142 }
                                                     {OpDir: M }
---------------------------------------------[IdNode]: { Name: 1 ,Line: 142 }
                                                       {LexType:CONST }
-------------------------------------------------[Function]: {Name: string ,Line:142 }
                                                             ArgList: 1 Members
-------------------------------------------------------------[IdNode]: { Name: buffer ,Line: 142 }
                                                                       {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: . ,Line:142 }
                                                         {OpDir: M }
-------------------------------------------------[Function]: {Name: size ,Line:142 }
                                                             ArgList: 0 Members
-----------------------------------------[Operator]: {OpType: - ,Line:142 }
                                                     {OpDir: M }
---------------------------------------------[IdNode]: { Name: 1 ,Line: 142 }
                                                       {LexType:CONST }

---------[Function]: {Name: loadBuffer ,Line:143 }
                     ArgList: 1 Members
-------------------------[IdNode]: { Name: this ,Line: 143 }
                                   {LexType:KEYWORD }
---------------------[Operator]: {OpType: -> ,Line:143 }
                                 {OpDir: M }
-------------------------[IdNode]: { Name: fin ,Line: 143 }
                                   {LexType:IDENTIFIER }


---[FuncDefine]: {Name: handleSeperator ,Line:150 }
                 {ReturnType:void ,Modifier: None ,ArgTable:}
---------[Branch]: {Type: if ,Line:151 }
                   Judgement:
-------------------------------[IdNode]: { Name: buffer ,Line: 151 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: [ ,Line:151 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: cur ,Line: 151 }
                                         {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: == ,Line:151 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: ':' ,Line: 151 }
                                     {LexType:CONST }
-------------------[Operator]: {OpType: && ,Line:151 }
                               {OpDir: M }
-------------------------------[IdNode]: { Name: buffer ,Line: 151 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: [ ,Line:151 }
                                       {OpDir: M }
-----------------------------------[IdNode]: { Name: cur ,Line: 151 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: + ,Line:151 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: 1 ,Line: 151 }
                                             {LexType:CONST }
-----------------------[Operator]: {OpType: == ,Line:151 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: ':' ,Line: 151 }
                                     {LexType:CONST }
---------------[Function]: {Name: storeLex ,Line:152 }
                           ArgList: 2 Members
-------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 152 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: :: ,Line:152 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: OPERATOR ,Line: 152 }
                                         {LexType:IDENTIFIER }
---------------------------[IdNode]: { Name: "::" ,Line: 152 }
                                     {LexType:CONST }

-------------------[IdNode]: { Name: cur ,Line: 153 }
                             {LexType:IDENTIFIER }
---------------[Operator]: {OpType: += ,Line:153 }
                           {OpDir: M }
-------------------[IdNode]: { Name: 2 ,Line: 153 }
                             {LexType:CONST }


---------[Branch]: {Type: else ,Line:155 }
---------------[Function]: {Name: storeLex ,Line:156 }
                           ArgList: 2 Members
-------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 156 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: :: ,Line:156 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: SEPERATOR ,Line: 156 }
                                         {LexType:IDENTIFIER }
---------------------------[Function]: {Name: string ,Line:156 }
                                       ArgList: 2 Members
---------------------------------------[IdNode]: { Name: 1 ,Line: 156 }
                                                 {LexType:CONST }
-------------------------------------------[IdNode]: { Name: buffer ,Line: 156 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: [ ,Line:156 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 156 }
                                                     {LexType:IDENTIFIER }

-------------------[IdNode]: { Name: cur ,Line: 157 }
                             {LexType:IDENTIFIER }
---------------[Operator]: {OpType: ++ ,Line:157 }
                           {OpDir: L }



---[FuncDefine]: {Name: isOp ,Line:165 }
                 {ReturnType:bool ,Modifier: inline ,ArgTable:{char:op}}
---------[Return]: {Line:166 }
---------------------[IdNode]: { Name: op ,Line: 166 }
                               {LexType:IDENTIFIER }
-----------------[Operator]: {OpType: == ,Line:166 }
                             {OpDir: M }
---------------------[IdNode]: { Name: '+' ,Line: 166 }
                               {LexType:CONST }
-------------[Operator]: {OpType: || ,Line:166 }
                         {OpDir: M }
-------------------------[IdNode]: { Name: op ,Line: 166 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: == ,Line:166 }
                                 {OpDir: M }
-------------------------[IdNode]: { Name: '-' ,Line: 166 }
                                   {LexType:CONST }
-----------------[Operator]: {OpType: || ,Line:166 }
                             {OpDir: M }
-----------------------------[IdNode]: { Name: op ,Line: 166 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: == ,Line:166 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: '/' ,Line: 166 }
                                       {LexType:CONST }
---------------------[Operator]: {OpType: || ,Line:166 }
                                 {OpDir: M }
---------------------------------[IdNode]: { Name: op ,Line: 166 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: == ,Line:166 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: '%' ,Line: 166 }
                                           {LexType:CONST }
-------------------------[Operator]: {OpType: || ,Line:166 }
                                     {OpDir: M }
-------------------------------------[IdNode]: { Name: op ,Line: 166 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: == ,Line:166 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: '=' ,Line: 166 }
                                               {LexType:CONST }
-----------------------------[Operator]: {OpType: || ,Line:166 }
                                         {OpDir: M }
-----------------------------------------[IdNode]: { Name: op ,Line: 166 }
                                                   {LexType:IDENTIFIER }
-------------------------------------[Operator]: {OpType: == ,Line:166 }
                                                 {OpDir: M }
-----------------------------------------[IdNode]: { Name: '|' ,Line: 166 }
                                                   {LexType:CONST }
---------------------------------[Operator]: {OpType: || ,Line:166 }
                                             {OpDir: M }
---------------------------------------------[IdNode]: { Name: op ,Line: 166 }
                                                       {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: == ,Line:166 }
                                                     {OpDir: M }
---------------------------------------------[IdNode]: { Name: '<' ,Line: 166 }
                                                       {LexType:CONST }
-------------------------------------[Operator]: {OpType: || ,Line:166 }
                                                 {OpDir: M }
-------------------------------------------------[IdNode]: { Name: op ,Line: 166 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: == ,Line:166 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: '>' ,Line: 166 }
                                                           {LexType:CONST }
-----------------------------------------[Operator]: {OpType: || ,Line:166 }
                                                     {OpDir: M }
-----------------------------------------------------[IdNode]: { Name: op ,Line: 166 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: == ,Line:166 }
                                                             {OpDir: M }
-----------------------------------------------------[IdNode]: { Name: '!' ,Line: 166 }
                                                               {LexType:CONST }
---------------------------------------------[Operator]: {OpType: || ,Line:166 }
                                                         {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: op ,Line: 166 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: == ,Line:166 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: '.' ,Line: 166 }
                                                                   {LexType:CONST }
-------------------------------------------------[Operator]: {OpType: || ,Line:166 }
                                                             {OpDir: M }
-------------------------------------------------------------[IdNode]: { Name: op ,Line: 166 }
                                                                       {LexType:IDENTIFIER }
---------------------------------------------------------[Operator]: {OpType: == ,Line:166 }
                                                                     {OpDir: M }
-------------------------------------------------------------[IdNode]: { Name: '~' ,Line: 166 }
                                                                       {LexType:CONST }
-----------------------------------------------------[Operator]: {OpType: || ,Line:166 }
                                                                 {OpDir: M }
-----------------------------------------------------------------[IdNode]: { Name: op ,Line: 166 }
                                                                           {LexType:IDENTIFIER }
-------------------------------------------------------------[Operator]: {OpType: == ,Line:166 }
                                                                         {OpDir: M }
-----------------------------------------------------------------[IdNode]: { Name: '?' ,Line: 166 }
                                                                           {LexType:CONST }
---------------------------------------------------------[Operator]: {OpType: || ,Line:166 }
                                                                     {OpDir: M }
-----------------------------------------------------------------[IdNode]: { Name: op ,Line: 166 }
                                                                           {LexType:IDENTIFIER }
-------------------------------------------------------------[Operator]: {OpType: == ,Line:166 }
                                                                         {OpDir: M }
-----------------------------------------------------------------[IdNode]: { Name: '^' ,Line: 166 }
                                                                           {LexType:CONST }


---[FuncDefine]: {Name: handleOperator ,Line:174 }
                 {ReturnType:void ,Modifier: None ,ArgTable:}
---------[VarDeclare]: {Name: op1 ,Line:175 }
                       {Type:char,Modifier: None }

-------------[IdNode]: { Name: op1 ,Line: 175 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: = ,Line:175 }
                     {OpDir: M }
-----------------[IdNode]: { Name: buffer ,Line: 175 }
                           {LexType:IDENTIFIER }
-------------[Operator]: {OpType: [ ,Line:175 }
                         {OpDir: M }
-----------------[IdNode]: { Name: cur ,Line: 175 }
                           {LexType:IDENTIFIER }

---------[Branch]: {Type: switch ,Line:176 }
                   Judgement:
-------------------[IdNode]: { Name: op1 ,Line: 176 }
                             {LexType:IDENTIFIER }
---------------[Branch]: {Type: case ,Line:178 }
                         Judgement:
-------------------------[IdNode]: { Name: '<' ,Line: 178 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:179 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 179 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:179 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 179 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:179 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 179 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:179 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '<' ,Line: 179 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:180 }
                                     Judgement:
---------------------------------------------[IdNode]: { Name: buffer ,Line: 180 }
                                                       {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: [ ,Line:180 }
                                                     {OpDir: M }
-------------------------------------------------[IdNode]: { Name: cur ,Line: 180 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: + ,Line:180 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: 2 ,Line: 180 }
                                                           {LexType:CONST }
-------------------------------------[Operator]: {OpType: == ,Line:180 }
                                                 {OpDir: M }
-----------------------------------------[IdNode]: { Name: '=' ,Line: 180 }
                                                   {LexType:CONST }
---------------------------------[Function]: {Name: storeLex ,Line:181 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 181 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:181 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 181 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "<<=" ,Line: 181 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 182 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:182 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 3 ,Line: 182 }
                                               {LexType:CONST }


---------------------------[Branch]: {Type: else if ,Line:184 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:184 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 184 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:184 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 184 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:184 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 184 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:185 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 185 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 185 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:185 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 185 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:187 }
---------------------------------[Function]: {Name: storeLex ,Line:188 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 188 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:188 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 188 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "<<" ,Line: 188 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 189 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:189 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 189 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else if ,Line:192 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 192 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:192 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 192 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:192 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 192 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:192 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '=' ,Line: 192 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:193 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:193 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 193 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:193 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 193 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:193 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 193 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:194 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 194 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 194 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:194 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 194 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:196 }
---------------------------------[Function]: {Name: storeLex ,Line:197 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 197 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:197 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 197 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "<=" ,Line: 197 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 198 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:198 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 198 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else ,Line:201 }
---------------------------[Branch]: {Type: if ,Line:202 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:202 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 202 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:202 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 202 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:202 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 1 ,Line: 202 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:203 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 203 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 203 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:203 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 203 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:205 }
---------------------------------[Function]: {Name: storeLex ,Line:206 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 206 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:206 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 206 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "<" ,Line: 206 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 207 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: ++ ,Line:207 }
                                             {OpDir: L }



---------------------[Break]: {Line:210 }


---------------[Branch]: {Type: case ,Line:211 }
                         Judgement:
-------------------------[IdNode]: { Name: '>' ,Line: 211 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:212 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 212 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:212 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 212 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:212 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 212 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:212 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '>' ,Line: 212 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:213 }
                                     Judgement:
---------------------------------------------[IdNode]: { Name: buffer ,Line: 213 }
                                                       {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: [ ,Line:213 }
                                                     {OpDir: M }
-------------------------------------------------[IdNode]: { Name: cur ,Line: 213 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: + ,Line:213 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: 2 ,Line: 213 }
                                                           {LexType:CONST }
-------------------------------------[Operator]: {OpType: == ,Line:213 }
                                                 {OpDir: M }
-----------------------------------------[IdNode]: { Name: '=' ,Line: 213 }
                                                   {LexType:CONST }
---------------------------------[Function]: {Name: storeLex ,Line:214 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 214 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:214 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 214 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: ">>=" ,Line: 214 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 215 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:215 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 3 ,Line: 215 }
                                               {LexType:CONST }


---------------------------[Branch]: {Type: else if ,Line:217 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:217 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 217 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:217 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 217 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:217 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 217 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:218 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 218 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 218 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:218 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 218 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:220 }
---------------------------------[Function]: {Name: storeLex ,Line:221 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 221 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:221 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 221 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: ">>" ,Line: 221 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 222 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:222 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 222 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else if ,Line:225 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 225 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:225 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 225 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:225 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 225 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:225 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '=' ,Line: 225 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:226 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:226 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 226 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:226 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 226 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:226 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 226 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:227 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 227 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 227 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:227 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 227 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:229 }
---------------------------------[Function]: {Name: storeLex ,Line:230 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 230 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:230 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 230 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: ">=" ,Line: 230 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 231 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:231 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 231 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else ,Line:234 }
---------------------------[Branch]: {Type: if ,Line:235 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:235 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 235 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:235 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 235 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:235 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 1 ,Line: 235 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:236 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 236 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 236 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:236 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 236 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:238 }
---------------------------------[Function]: {Name: storeLex ,Line:239 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 239 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:239 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 239 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: ">" ,Line: 239 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 240 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: ++ ,Line:240 }
                                             {OpDir: L }



---------------------[Break]: {Line:243 }


---------------[Branch]: {Type: case ,Line:244 }
                         Judgement:
-------------------------[IdNode]: { Name: '+' ,Line: 244 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:245 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 245 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:245 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 245 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:245 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 245 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:245 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '=' ,Line: 245 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:246 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:246 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 246 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:246 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 246 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:246 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 246 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:247 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 247 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 247 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:247 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 247 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:249 }
---------------------------------[Function]: {Name: storeLex ,Line:250 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 250 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:250 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 250 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "+=" ,Line: 250 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 251 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:251 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 251 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else if ,Line:254 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 254 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:254 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 254 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:254 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 254 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:254 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '+' ,Line: 254 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:255 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:255 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 255 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:255 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 255 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:255 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 255 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:256 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 256 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 256 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:256 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 256 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:258 }
---------------------------------[Function]: {Name: storeLex ,Line:259 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 259 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:259 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 259 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "++" ,Line: 259 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 260 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:260 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 260 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else ,Line:263 }
---------------------------[Branch]: {Type: if ,Line:264 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:264 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 264 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:264 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 264 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:264 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 1 ,Line: 264 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:265 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 265 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 265 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:265 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 265 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:267 }
---------------------------------[Function]: {Name: storeLex ,Line:268 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 268 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:268 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 268 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "+" ,Line: 268 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 269 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: ++ ,Line:269 }
                                             {OpDir: L }



---------------------[Break]: {Line:272 }


---------------[Branch]: {Type: case ,Line:273 }
                         Judgement:
-------------------------[IdNode]: { Name: '-' ,Line: 273 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:274 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 274 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:274 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 274 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:274 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 274 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:274 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '=' ,Line: 274 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:275 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:275 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 275 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:275 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 275 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:275 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 275 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:276 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 276 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 276 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:276 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 276 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:278 }
---------------------------------[Function]: {Name: storeLex ,Line:279 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 279 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:279 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 279 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "-=" ,Line: 279 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 280 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:280 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 280 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else if ,Line:283 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 283 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:283 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 283 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:283 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 283 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:283 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '-' ,Line: 283 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:284 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:284 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 284 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:284 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 284 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:284 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 284 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:285 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 285 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 285 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:285 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 285 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:287 }
---------------------------------[Function]: {Name: storeLex ,Line:288 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 288 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:288 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 288 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "--" ,Line: 288 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 289 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:289 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 289 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else if ,Line:292 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 292 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:292 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 292 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:292 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 292 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:292 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '>' ,Line: 292 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:293 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:293 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 293 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:293 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 293 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:293 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 293 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:294 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 294 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 294 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:294 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 294 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:296 }
---------------------------------[Function]: {Name: storeLex ,Line:297 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 297 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:297 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 297 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "->" ,Line: 297 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 298 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:298 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 298 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else ,Line:301 }
---------------------------[Branch]: {Type: if ,Line:302 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:302 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 302 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:302 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 302 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:302 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 1 ,Line: 302 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:303 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 303 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 303 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:303 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 303 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:305 }
---------------------------------[Function]: {Name: storeLex ,Line:306 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 306 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:306 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 306 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "-" ,Line: 306 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 307 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: ++ ,Line:307 }
                                             {OpDir: L }



---------------------[Break]: {Line:310 }


---------------[Branch]: {Type: case ,Line:311 }
                         Judgement:
-------------------------[IdNode]: { Name: '*' ,Line: 311 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:312 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 312 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:312 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 312 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:312 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 312 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:312 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '=' ,Line: 312 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:313 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:313 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 313 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:313 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 313 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:313 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 313 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:314 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 314 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 314 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:314 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 314 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:316 }
---------------------------------[Function]: {Name: storeLex ,Line:317 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 317 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:317 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 317 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "*=" ,Line: 317 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 318 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:318 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 318 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else ,Line:321 }
---------------------------[Branch]: {Type: if ,Line:322 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:322 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 322 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:322 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 322 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:322 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 1 ,Line: 322 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:323 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 323 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 323 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:323 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 323 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:325 }
---------------------------------[Function]: {Name: storeLex ,Line:326 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 326 }
                                      {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:326 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 326 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "*" ,Line: 326 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 327 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: ++ ,Line:327 }
                                             {OpDir: L }



---------------------[Break]: {Line:330 }


---------------[Branch]: {Type: case ,Line:331 }
                         Judgement:
-------------------------[IdNode]: { Name: '/' ,Line: 331 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:332 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 332 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:332 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 332 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:332 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 332 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:332 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '=' ,Line: 332 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:333 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:333 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 333 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:333 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 333 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:333 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 333 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:334 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 334 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 334 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:334 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 334 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:336 }
---------------------------------[Function]: {Name: storeLex ,Line:337 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 337 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:337 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 337 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "/=" ,Line: 337 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 338 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:338 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 338 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else ,Line:341 }
---------------------------[Branch]: {Type: if ,Line:342 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:342 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 342 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:342 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 342 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:342 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 1 ,Line: 342 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:343 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 343 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 343 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:343 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 343 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:345 }
---------------------------------[Function]: {Name: storeLex ,Line:346 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 346 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:346 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 346 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "/" ,Line: 346 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 347 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: ++ ,Line:347 }
                                             {OpDir: L }



---------------------[Break]: {Line:350 }


---------------[Branch]: {Type: case ,Line:351 }
                         Judgement:
-------------------------[IdNode]: { Name: '%' ,Line: 351 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:352 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 352 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:352 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 352 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:352 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 352 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:352 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '=' ,Line: 352 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:353 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:353 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 353 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:353 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 353 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:353 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 353 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:354 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 354 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 354 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:354 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 354 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:356 }
---------------------------------[Function]: {Name: storeLex ,Line:357 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 357 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:357 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 357 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "%=" ,Line: 357 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 358 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:358 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 358 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else ,Line:361 }
---------------------------[Branch]: {Type: if ,Line:362 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:362 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 362 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:362 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 362 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:362 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 1 ,Line: 362 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:363 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 363 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 363 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:363 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 363 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:365 }
---------------------------------[Function]: {Name: storeLex ,Line:366 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 366 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:366 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 366 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "%" ,Line: 366 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 367 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: ++ ,Line:367 }
                                             {OpDir: L }



---------------------[Break]: {Line:370 }


---------------[Branch]: {Type: case ,Line:371 }
                         Judgement:
-------------------------[IdNode]: { Name: '&' ,Line: 371 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:372 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 372 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:372 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 372 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:372 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 372 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:372 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '&' ,Line: 372 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:373 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:373 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 373 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:373 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 373 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:373 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 373 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:374 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 374 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 374 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:374 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 374 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:376 }
---------------------------------[Function]: {Name: storeLex ,Line:377 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 377 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:377 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 377 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "&&" ,Line: 377 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 378 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:378 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 378 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else if ,Line:381 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 381 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:381 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 381 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:381 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 381 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:381 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '=' ,Line: 381 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:382 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:382 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 382 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:382 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 382 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:382 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 382 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:383 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 383 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 383 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:383 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 383 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:385 }
---------------------------------[Function]: {Name: storeLex ,Line:386 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 386 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:386 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 386 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "&=" ,Line: 386 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 387 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:387 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 387 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else ,Line:390 }
---------------------------[Branch]: {Type: if ,Line:391 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:391 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 391 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:391 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 391 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:391 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 1 ,Line: 391 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:392 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 392 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 392 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:392 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 392 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:394 }
---------------------------------[Function]: {Name: storeLex ,Line:395 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 395 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:395 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 395 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "&" ,Line: 395 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 396 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: ++ ,Line:396 }
                                             {OpDir: L }



---------------------[Break]: {Line:399 }


---------------[Branch]: {Type: case ,Line:400 }
                         Judgement:
-------------------------[IdNode]: { Name: '|' ,Line: 400 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:401 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 401 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:401 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 401 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:401 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 401 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:401 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '|' ,Line: 401 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:402 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:402 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 402 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:402 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 402 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:402 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 402 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:403 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 403 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 403 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:403 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 403 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:405 }
---------------------------------[Function]: {Name: storeLex ,Line:406 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 406 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:406 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 406 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "||" ,Line: 406 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 407 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:407 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 407 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else if ,Line:410 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 410 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:410 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 410 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:410 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 410 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:410 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '=' ,Line: 410 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:411 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:411 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 411 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:411 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 411 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:411 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 411 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:412 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 412 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 412 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:412 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 412 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:414 }
---------------------------------[Function]: {Name: storeLex ,Line:415 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 415 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:415 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 415 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "|=" ,Line: 415 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 416 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:416 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 416 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else ,Line:419 }
---------------------------[Branch]: {Type: if ,Line:420 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:420 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 420 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:420 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 420 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:420 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 1 ,Line: 420 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:421 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 421 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 421 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:421 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 421 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:423 }
---------------------------------[Function]: {Name: storeLex ,Line:424 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 424 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:424 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 424 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "|" ,Line: 424 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 425 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: ++ ,Line:425 }
                                             {OpDir: L }



---------------------[Break]: {Line:428 }


---------------[Branch]: {Type: case ,Line:429 }
                         Judgement:
-------------------------[IdNode]: { Name: '=' ,Line: 429 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:430 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 430 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:430 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 430 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:430 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 430 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:430 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '=' ,Line: 430 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:431 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:431 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 431 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:431 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 431 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:431 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 431 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:432 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 432 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 432 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:432 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 432 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:434 }
---------------------------------[Function]: {Name: storeLex ,Line:435 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 435 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:435 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 435 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "==" ,Line: 435 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 436 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:436 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 436 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else ,Line:439 }
---------------------------[Branch]: {Type: if ,Line:440 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:440 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 440 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:440 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 440 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:440 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 1 ,Line: 440 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:441 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 441 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 441 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:441 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 441 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:443 }
---------------------------------[Function]: {Name: storeLex ,Line:444 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 444 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:444 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 444 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "=" ,Line: 444 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 445 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: ++ ,Line:445 }
                                             {OpDir: L }



---------------------[Break]: {Line:448 }


---------------[Branch]: {Type: case ,Line:449 }
                         Judgement:
-------------------------[IdNode]: { Name: '?' ,Line: 449 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:450 }
                               Judgement:
-------------------------------[Function]: {Name: isOp ,Line:450 }
                                           ArgList: 1 Members
-----------------------------------------------[IdNode]: { Name: buffer ,Line: 450 }
                                                         {LexType:IDENTIFIER }
-------------------------------------------[Operator]: {OpType: [ ,Line:450 }
                                                       {OpDir: M }
---------------------------------------------------[IdNode]: { Name: cur ,Line: 450 }
                                                             {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: + ,Line:450 }
                                                           {OpDir: M }
---------------------------------------------------[IdNode]: { Name: 1 ,Line: 450 }
                                                             {LexType:CONST }
---------------------------[Function]: {Name: raiseSyntaxError ,Line:451 }
                                       ArgList: 2 Members
---------------------------------------[IdNode]: { Name: curLine ,Line: 451 }
                                                 {LexType:IDENTIFIER }
-------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 451 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: :: ,Line:451 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 451 }
                                                     {LexType:IDENTIFIER }


---------------------[Branch]: {Type: else ,Line:453 }
---------------------------[Function]: {Name: storeLex ,Line:454 }
                                       ArgList: 2 Members
-------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 454 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: :: ,Line:454 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 454 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[IdNode]: { Name: "?" ,Line: 454 }
                                                 {LexType:CONST }

-------------------------------[IdNode]: { Name: cur ,Line: 455 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: ++ ,Line:455 }
                                       {OpDir: L }


---------------------[Break]: {Line:457 }


---------------[Branch]: {Type: case ,Line:458 }
                         Judgement:
-------------------------[IdNode]: { Name: '.' ,Line: 458 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:459 }
                               Judgement:
-------------------------------[Function]: {Name: isOp ,Line:459 }
                                           ArgList: 1 Members
-----------------------------------------------[IdNode]: { Name: buffer ,Line: 459 }
                                                         {LexType:IDENTIFIER }
-------------------------------------------[Operator]: {OpType: [ ,Line:459 }
                                                       {OpDir: M }
---------------------------------------------------[IdNode]: { Name: cur ,Line: 459 }
                                                             {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: + ,Line:459 }
                                                           {OpDir: M }
---------------------------------------------------[IdNode]: { Name: 1 ,Line: 459 }
                                                             {LexType:CONST }
---------------------------[Function]: {Name: raiseSyntaxError ,Line:460 }
                                       ArgList: 2 Members
---------------------------------------[IdNode]: { Name: curLine ,Line: 460 }
                                                 {LexType:IDENTIFIER }
-------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 460 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: :: ,Line:460 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 460 }
                                                     {LexType:IDENTIFIER }


---------------------[Branch]: {Type: else ,Line:462 }
---------------------------[Function]: {Name: storeLex ,Line:463 }
                                       ArgList: 2 Members
-------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 463 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: :: ,Line:463 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 463 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[IdNode]: { Name: "." ,Line: 463 }
                                                 {LexType:CONST }

-------------------------------[IdNode]: { Name: cur ,Line: 464 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: ++ ,Line:464 }
                                       {OpDir: L }


---------------------[Break]: {Line:466 }


---------------[Branch]: {Type: case ,Line:467 }
                         Judgement:
-------------------------[IdNode]: { Name: '!' ,Line: 467 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:468 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 468 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:468 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 468 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:468 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 468 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:468 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '=' ,Line: 468 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:469 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:469 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 469 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:469 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 469 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:469 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 469 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:470 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 470 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 470 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:470 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 470 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:472 }
---------------------------------[Function]: {Name: storeLex ,Line:473 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 473 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:473 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 473 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "!=" ,Line: 473 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 474 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:474 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 474 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else ,Line:477 }
---------------------------[Branch]: {Type: if ,Line:478 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:478 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 478 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:478 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 478 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:478 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 1 ,Line: 478 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:479 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 479 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 479 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:479 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 479 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:481 }
---------------------------------[Function]: {Name: storeLex ,Line:482 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 482 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:482 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 482 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "!" ,Line: 482 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 483 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: ++ ,Line:483 }
                                             {OpDir: L }



---------------------[Break]: {Line:486 }


---------------[Branch]: {Type: case ,Line:487 }
                         Judgement:
-------------------------[IdNode]: { Name: '^' ,Line: 487 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:488 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 488 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:488 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 488 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:488 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 488 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:488 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '=' ,Line: 488 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:489 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:489 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 489 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:489 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 489 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:489 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 2 ,Line: 489 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:490 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 490 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 490 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:490 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 490 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:492 }
---------------------------------[Function]: {Name: storeLex ,Line:493 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 493 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:493 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 493 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "^=" ,Line: 493 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 494 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:494 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 494 }
                                               {LexType:CONST }



---------------------[Branch]: {Type: else ,Line:497 }
---------------------------[Branch]: {Type: if ,Line:498 }
                                     Judgement:
-------------------------------------[Function]: {Name: isOp ,Line:498 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 498 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:498 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 498 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: + ,Line:498 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: 1 ,Line: 498 }
                                                                   {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:499 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 499 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 499 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:499 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 499 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:501 }
---------------------------------[Function]: {Name: storeLex ,Line:502 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 502 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:502 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 502 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: "^" ,Line: 502 }
                                                       {LexType:CONST }

-------------------------------------[IdNode]: { Name: cur ,Line: 503 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: ++ ,Line:503 }
                                             {OpDir: L }



---------------------[Break]: {Line:506 }


---------------[Branch]: {Type: case ,Line:507 }
                         Judgement:
-------------------------[IdNode]: { Name: '~' ,Line: 507 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:508 }
                               Judgement:
-------------------------------[Function]: {Name: isOp ,Line:508 }
                                           ArgList: 1 Members
-----------------------------------------------[IdNode]: { Name: buffer ,Line: 508 }
                                                         {LexType:IDENTIFIER }
-------------------------------------------[Operator]: {OpType: [ ,Line:508 }
                                                       {OpDir: M }
---------------------------------------------------[IdNode]: { Name: cur ,Line: 508 }
                                                             {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: + ,Line:508 }
                                                           {OpDir: M }
---------------------------------------------------[IdNode]: { Name: 1 ,Line: 508 }
                                                             {LexType:CONST }
---------------------------[Function]: {Name: raiseSyntaxError ,Line:509 }
                                       ArgList: 2 Members
---------------------------------------[IdNode]: { Name: curLine ,Line: 509 }
                                                 {LexType:IDENTIFIER }
-------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 509 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: :: ,Line:509 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 509 }
                                                     {LexType:IDENTIFIER }


---------------------[Branch]: {Type: else ,Line:511 }
---------------------------[Function]: {Name: storeLex ,Line:512 }
                                       ArgList: 2 Members
-------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 512 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: :: ,Line:512 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 512 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[IdNode]: { Name: "~" ,Line: 512 }
                                                 {LexType:CONST }

-------------------------------[IdNode]: { Name: cur ,Line: 513 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: ++ ,Line:513 }
                                       {OpDir: L }


---------------------[Break]: {Line:515 }


---------------[Branch]: {Type: default ,Line:516 }
---------------------[Break]: {Line:517 }




---[FuncDefine]: {Name: searchKeyword ,Line:525 }
                 {ReturnType:bool ,Modifier: None ,ArgTable:{string:id}}
---------[Branch]: {Type: for ,Line:526 }
Foreach:
-------------------[VarDeclare]: {Name: kw ,Line:526 }
                                 {Type:string,Modifier: None }
-------------------[IdNode]: { Name: keyword ,Line: 526 }
                             {LexType:IDENTIFIER }
---------------[Branch]: {Type: if ,Line:527 }
                         Judgement:
-----------------------------[IdNode]: { Name: kw ,Line: 527 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: == ,Line:527 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: id ,Line: 527 }
                                       {LexType:IDENTIFIER }
---------------------[Return]: {Line:528 }
-------------------------[IdNode]: { Name: true ,Line: 528 }
                                   {LexType:KEYWORD }



---------[Return]: {Line:531 }
-------------[IdNode]: { Name: false ,Line: 531 }
                       {LexType:KEYWORD }


---[FuncDefine]: {Name: isValidID ,Line:538 }
                 {ReturnType:bool ,Modifier: inline ,ArgTable:{char:id}}
---------[Return]: {Line:539 }
-------------------------[IdNode]: { Name: id ,Line: 539 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: >= ,Line:539 }
                                 {OpDir: M }
-------------------------[IdNode]: { Name: 'a' ,Line: 539 }
                                   {LexType:CONST }
-----------------[Operator]: {OpType: && ,Line:539 }
                             {OpDir: M }
-------------------------[IdNode]: { Name: id ,Line: 539 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: <= ,Line:539 }
                                 {OpDir: M }
-------------------------[IdNode]: { Name: 'z' ,Line: 539 }
                                   {LexType:CONST }
-------------[Operator]: {OpType: || ,Line:539 }
                         {OpDir: M }
-----------------------------[IdNode]: { Name: id ,Line: 539 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: >= ,Line:539 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: 'A' ,Line: 539 }
                                       {LexType:CONST }
---------------------[Operator]: {OpType: && ,Line:539 }
                                 {OpDir: M }
-----------------------------[IdNode]: { Name: id ,Line: 539 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: <= ,Line:539 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: 'Z' ,Line: 539 }
                                       {LexType:CONST }
-----------------[Operator]: {OpType: || ,Line:539 }
                             {OpDir: M }
-----------------------------[IdNode]: { Name: id ,Line: 539 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: == ,Line:539 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: '_' ,Line: 539 }
                                       {LexType:CONST }
---------------------[Operator]: {OpType: || ,Line:539 }
                                 {OpDir: M }
---------------------------------[IdNode]: { Name: id ,Line: 539 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: >= ,Line:539 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: '0' ,Line: 539 }
                                           {LexType:CONST }
-------------------------[Operator]: {OpType: && ,Line:539 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: id ,Line: 539 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: <= ,Line:539 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: '9' ,Line: 539 }
                                           {LexType:CONST }


---[FuncDefine]: {Name: handlerIdentifier ,Line:546 }
                 {ReturnType:void ,Modifier: None ,ArgTable:}
---------[VarDeclare]: {Name: secondBuffer ,Line:547 }
                       {Type:string,Modifier: None }

-------------[IdNode]: { Name: secondBuffer ,Line: 547 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: = ,Line:547 }
                     {OpDir: M }
-------------[IdNode]: { Name: "" ,Line: 547 }
                       {LexType:CONST }

-------------[IdNode]: { Name: secondBuffer ,Line: 548 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: += ,Line:548 }
                     {OpDir: M }
-----------------[IdNode]: { Name: buffer ,Line: 548 }
                           {LexType:IDENTIFIER }
-------------[Operator]: {OpType: [ ,Line:548 }
                         {OpDir: M }
---------------------[IdNode]: { Name: cur ,Line: 548 }
                               {LexType:IDENTIFIER }
-----------------[Operator]: {OpType: ++ ,Line:548 }
                             {OpDir: L }

---------[Branch]: {Type: while ,Line:549 }
                   Judgement:
-------------------[Function]: {Name: isValidID ,Line:549 }
                               ArgList: 1 Members
-----------------------------------[IdNode]: { Name: buffer ,Line: 549 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: [ ,Line:549 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: cur ,Line: 549 }
                                             {LexType:IDENTIFIER }
-------------------[IdNode]: { Name: secondBuffer ,Line: 550 }
                             {LexType:IDENTIFIER }
---------------[Operator]: {OpType: += ,Line:550 }
                           {OpDir: M }
-----------------------[IdNode]: { Name: buffer ,Line: 550 }
                                 {LexType:IDENTIFIER }
-------------------[Operator]: {OpType: [ ,Line:550 }
                               {OpDir: M }
---------------------------[IdNode]: { Name: cur ,Line: 550 }
                                     {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: ++ ,Line:550 }
                                   {OpDir: L }


---------[Branch]: {Type: if ,Line:552 }
                   Judgement:
-------------------[Function]: {Name: searchKeyword ,Line:552 }
                               ArgList: 1 Members
-------------------------------[IdNode]: { Name: secondBuffer ,Line: 552 }
                                         {LexType:IDENTIFIER }
---------------[Function]: {Name: storeLex ,Line:553 }
                           ArgList: 2 Members
-------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 553 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: :: ,Line:553 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: KEYWORD ,Line: 553 }
                                         {LexType:IDENTIFIER }
---------------------------[IdNode]: { Name: secondBuffer ,Line: 553 }
                                     {LexType:IDENTIFIER }


---------[Branch]: {Type: else ,Line:555 }
---------------[Function]: {Name: storeLex ,Line:556 }
                           ArgList: 2 Members
-------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 556 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: :: ,Line:556 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: IDENTIFIER ,Line: 556 }
                                         {LexType:IDENTIFIER }
---------------------------[IdNode]: { Name: secondBuffer ,Line: 556 }
                                     {LexType:IDENTIFIER }



---[FuncDefine]: {Name: handleNumber ,Line:565 }
                 {ReturnType:void ,Modifier: None ,ArgTable:}
---------[VarDeclare]: {Name: secondBuffer ,Line:566 }
                       {Type:string,Modifier: None }

-------------[IdNode]: { Name: secondBuffer ,Line: 566 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: = ,Line:566 }
                     {OpDir: M }
-------------[IdNode]: { Name: "" ,Line: 566 }
                       {LexType:CONST }

---------[Branch]: {Type: if ,Line:567 }
                   Judgement:
-------------------------------[IdNode]: { Name: buffer ,Line: 567 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: [ ,Line:567 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: cur ,Line: 567 }
                                         {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: == ,Line:567 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: '0' ,Line: 567 }
                                     {LexType:CONST }
-------------------[Operator]: {OpType: && ,Line:567 }
                               {OpDir: M }
-----------------------------------[IdNode]: { Name: buffer ,Line: 567 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: [ ,Line:567 }
                                           {OpDir: M }
---------------------------------------[IdNode]: { Name: cur ,Line: 567 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: + ,Line:567 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: 1 ,Line: 567 }
                                                 {LexType:CONST }
---------------------------[Operator]: {OpType: == ,Line:567 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: 'x' ,Line: 567 }
                                         {LexType:CONST }
-----------------------[Operator]: {OpType: || ,Line:567 }
                                   {OpDir: M }
---------------------------------------[IdNode]: { Name: buffer ,Line: 567 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:567 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 567 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:567 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 567 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:567 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: 'X' ,Line: 567 }
                                             {LexType:CONST }
---------------------------[Operator]: {OpType: || ,Line:567 }
                                       {OpDir: M }
-------------------------------------------[IdNode]: { Name: buffer ,Line: 567 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: [ ,Line:567 }
                                                   {OpDir: M }
-----------------------------------------------[IdNode]: { Name: cur ,Line: 567 }
                                                         {LexType:IDENTIFIER }
-------------------------------------------[Operator]: {OpType: + ,Line:567 }
                                                       {OpDir: M }
-----------------------------------------------[IdNode]: { Name: 1 ,Line: 567 }
                                                         {LexType:CONST }
-----------------------------------[Operator]: {OpType: == ,Line:567 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: 'O' ,Line: 567 }
                                                 {LexType:CONST }
-------------------------------[Operator]: {OpType: || ,Line:567 }
                                           {OpDir: M }
-----------------------------------------------[IdNode]: { Name: buffer ,Line: 567 }
                                                         {LexType:IDENTIFIER }
-------------------------------------------[Operator]: {OpType: [ ,Line:567 }
                                                       {OpDir: M }
---------------------------------------------------[IdNode]: { Name: cur ,Line: 567 }
                                                             {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: + ,Line:567 }
                                                           {OpDir: M }
---------------------------------------------------[IdNode]: { Name: 1 ,Line: 567 }
                                                             {LexType:CONST }
---------------------------------------[Operator]: {OpType: == ,Line:567 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 'o' ,Line: 567 }
                                                     {LexType:CONST }
-----------------------------------[Operator]: {OpType: || ,Line:567 }
                                               {OpDir: M }
---------------------------------------------------[IdNode]: { Name: buffer ,Line: 567 }
                                                             {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: [ ,Line:567 }
                                                           {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: cur ,Line: 567 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: + ,Line:567 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: 1 ,Line: 567 }
                                                                 {LexType:CONST }
-------------------------------------------[Operator]: {OpType: == ,Line:567 }
                                                       {OpDir: M }
-----------------------------------------------[IdNode]: { Name: 'B' ,Line: 567 }
                                                         {LexType:CONST }
---------------------------------------[Operator]: {OpType: || ,Line:567 }
                                                   {OpDir: M }
---------------------------------------------------[IdNode]: { Name: buffer ,Line: 567 }
                                                             {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: [ ,Line:567 }
                                                           {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: cur ,Line: 567 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: + ,Line:567 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: 1 ,Line: 567 }
                                                                 {LexType:CONST }
-------------------------------------------[Operator]: {OpType: == ,Line:567 }
                                                       {OpDir: M }
-----------------------------------------------[IdNode]: { Name: 'b' ,Line: 567 }
                                                         {LexType:CONST }
---------------[Branch]: {Type: switch ,Line:568 }
                         Judgement:
-----------------------------[IdNode]: { Name: buffer ,Line: 568 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: [ ,Line:568 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: cur ,Line: 568 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: + ,Line:568 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: 1 ,Line: 568 }
                                           {LexType:CONST }
---------------------[Branch]: {Type: case ,Line:570 }
                               Judgement:
-------------------------------[IdNode]: { Name: 'x' ,Line: 570 }
                                         {LexType:CONST }

---------------------[Branch]: {Type: case ,Line:570 }
                               Judgement:
-------------------------------[IdNode]: { Name: 'X' ,Line: 570 }
                                         {LexType:CONST }
-------------------------------[IdNode]: { Name: secondBuffer ,Line: 571 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: += ,Line:571 }
                                       {OpDir: M }
-----------------------------------[IdNode]: { Name: buffer ,Line: 571 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: [ ,Line:571 }
                                           {OpDir: M }
---------------------------------------[IdNode]: { Name: cur ,Line: 571 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: ++ ,Line:571 }
                                               {OpDir: L }

-------------------------------[IdNode]: { Name: secondBuffer ,Line: 572 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: += ,Line:572 }
                                       {OpDir: M }
-----------------------------------[IdNode]: { Name: buffer ,Line: 572 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: [ ,Line:572 }
                                           {OpDir: M }
---------------------------------------[IdNode]: { Name: cur ,Line: 572 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: ++ ,Line:572 }
                                               {OpDir: L }

---------------------------[Branch]: {Type: if ,Line:573 }
                                     Judgement:
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 573 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:573 }
                                                             {OpDir: M }
-----------------------------------------------------[IdNode]: { Name: cur ,Line: 573 }
                                                               {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: >= ,Line:573 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: '0' ,Line: 573 }
                                                           {LexType:CONST }
-----------------------------------------[Operator]: {OpType: && ,Line:573 }
                                                     {OpDir: M }
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 573 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:573 }
                                                             {OpDir: M }
-----------------------------------------------------[IdNode]: { Name: cur ,Line: 573 }
                                                               {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: <= ,Line:573 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: '9' ,Line: 573 }
                                                           {LexType:CONST }
-------------------------------------[Operator]: {OpType: || ,Line:573 }
                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: buffer ,Line: 573 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: [ ,Line:573 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 573 }
                                                                   {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: >= ,Line:573 }
                                                             {OpDir: M }
-----------------------------------------------------[IdNode]: { Name: 'A' ,Line: 573 }
                                                               {LexType:CONST }
---------------------------------------------[Operator]: {OpType: && ,Line:573 }
                                                         {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: buffer ,Line: 573 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: [ ,Line:573 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 573 }
                                                                   {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: <= ,Line:573 }
                                                             {OpDir: M }
-----------------------------------------------------[IdNode]: { Name: 'F' ,Line: 573 }
                                                               {LexType:CONST }
-----------------------------------------[Operator]: {OpType: || ,Line:573 }
                                                     {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: buffer ,Line: 573 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: [ ,Line:573 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 573 }
                                                                   {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: >= ,Line:573 }
                                                             {OpDir: M }
-----------------------------------------------------[IdNode]: { Name: 'a' ,Line: 573 }
                                                               {LexType:CONST }
---------------------------------------------[Operator]: {OpType: && ,Line:573 }
                                                         {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: buffer ,Line: 573 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: [ ,Line:573 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 573 }
                                                                   {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: <= ,Line:573 }
                                                             {OpDir: M }
-----------------------------------------------------[IdNode]: { Name: 'f' ,Line: 573 }
                                                               {LexType:CONST }
---------------------------------[Branch]: {Type: while ,Line:574 }
                                           Judgement:
-----------------------------------------------------------[IdNode]: { Name: buffer ,Line: 574 }
                                                                     {LexType:IDENTIFIER }
-------------------------------------------------------[Operator]: {OpType: [ ,Line:574 }
                                                                   {OpDir: M }
-----------------------------------------------------------[IdNode]: { Name: cur ,Line: 574 }
                                                                     {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: >= ,Line:574 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: '0' ,Line: 574 }
                                                                 {LexType:CONST }
-----------------------------------------------[Operator]: {OpType: && ,Line:574 }
                                                           {OpDir: M }
-----------------------------------------------------------[IdNode]: { Name: buffer ,Line: 574 }
                                                                     {LexType:IDENTIFIER }
-------------------------------------------------------[Operator]: {OpType: [ ,Line:574 }
                                                                   {OpDir: M }
-----------------------------------------------------------[IdNode]: { Name: cur ,Line: 574 }
                                                                     {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: <= ,Line:574 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: '9' ,Line: 574 }
                                                                 {LexType:CONST }
-------------------------------------------[Operator]: {OpType: || ,Line:574 }
                                                       {OpDir: M }
---------------------------------------------------------------[IdNode]: { Name: buffer ,Line: 574 }
                                                                         {LexType:IDENTIFIER }
-----------------------------------------------------------[Operator]: {OpType: [ ,Line:574 }
                                                                       {OpDir: M }
---------------------------------------------------------------[IdNode]: { Name: cur ,Line: 574 }
                                                                         {LexType:IDENTIFIER }
-------------------------------------------------------[Operator]: {OpType: >= ,Line:574 }
                                                                   {OpDir: M }
-----------------------------------------------------------[IdNode]: { Name: 'A' ,Line: 574 }
                                                                     {LexType:CONST }
---------------------------------------------------[Operator]: {OpType: && ,Line:574 }
                                                               {OpDir: M }
---------------------------------------------------------------[IdNode]: { Name: buffer ,Line: 574 }
                                                                         {LexType:IDENTIFIER }
-----------------------------------------------------------[Operator]: {OpType: [ ,Line:574 }
                                                                       {OpDir: M }
---------------------------------------------------------------[IdNode]: { Name: cur ,Line: 574 }
                                                                         {LexType:IDENTIFIER }
-------------------------------------------------------[Operator]: {OpType: <= ,Line:574 }
                                                                   {OpDir: M }
-----------------------------------------------------------[IdNode]: { Name: 'F' ,Line: 574 }
                                                                     {LexType:CONST }
-----------------------------------------------[Operator]: {OpType: || ,Line:574 }
                                                           {OpDir: M }
---------------------------------------------------------------[IdNode]: { Name: buffer ,Line: 574 }
                                                                         {LexType:IDENTIFIER }
-----------------------------------------------------------[Operator]: {OpType: [ ,Line:574 }
                                                                       {OpDir: M }
---------------------------------------------------------------[IdNode]: { Name: cur ,Line: 574 }
                                                                         {LexType:IDENTIFIER }
-------------------------------------------------------[Operator]: {OpType: >= ,Line:574 }
                                                                   {OpDir: M }
-----------------------------------------------------------[IdNode]: { Name: 'a' ,Line: 574 }
                                                                     {LexType:CONST }
---------------------------------------------------[Operator]: {OpType: && ,Line:574 }
                                                               {OpDir: M }
---------------------------------------------------------------[IdNode]: { Name: buffer ,Line: 574 }
                                                                         {LexType:IDENTIFIER }
-----------------------------------------------------------[Operator]: {OpType: [ ,Line:574 }
                                                                       {OpDir: M }
---------------------------------------------------------------[IdNode]: { Name: cur ,Line: 574 }
                                                                         {LexType:IDENTIFIER }
-------------------------------------------------------[Operator]: {OpType: <= ,Line:574 }
                                                                   {OpDir: M }
-----------------------------------------------------------[IdNode]: { Name: 'f' ,Line: 574 }
                                                                     {LexType:CONST }
-------------------------------------------[IdNode]: { Name: secondBuffer ,Line: 575 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: += ,Line:575 }
                                                   {OpDir: M }
-----------------------------------------------[IdNode]: { Name: buffer ,Line: 575 }
                                                         {LexType:IDENTIFIER }
-------------------------------------------[Operator]: {OpType: [ ,Line:575 }
                                                       {OpDir: M }
---------------------------------------------------[IdNode]: { Name: cur ,Line: 575 }
                                                             {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: ++ ,Line:575 }
                                                           {OpDir: L }


---------------------------------[Branch]: {Type: if ,Line:577 }
                                           Judgement:
-------------------------------------------[Function]: {Name: isValidID ,Line:577 }
                                                       ArgList: 1 Members
-----------------------------------------------------------[IdNode]: { Name: buffer ,Line: 577 }
                                                                     {LexType:IDENTIFIER }
-------------------------------------------------------[Operator]: {OpType: [ ,Line:577 }
                                                                   {OpDir: M }
-----------------------------------------------------------[IdNode]: { Name: cur ,Line: 577 }
                                                                     {LexType:IDENTIFIER }
---------------------------------------[Function]: {Name: raiseSyntaxError ,Line:578 }
                                                   ArgList: 2 Members
---------------------------------------------------[IdNode]: { Name: curLine ,Line: 578 }
                                                             {LexType:IDENTIFIER }
-------------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 578 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: :: ,Line:578 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: NUM_CONST_FORMAT_ERROR ,Line: 578 }
                                                                 {LexType:IDENTIFIER }


---------------------------------[Branch]: {Type: else ,Line:580 }
---------------------------------------[Function]: {Name: storeLex ,Line:581 }
                                                   ArgList: 2 Members
-------------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 581 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: :: ,Line:581 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: CONST ,Line: 581 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[IdNode]: { Name: secondBuffer ,Line: 581 }
                                                             {LexType:IDENTIFIER }



---------------------------[Branch]: {Type: else ,Line:584 }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:585 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 585 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 585 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:585 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: NUM_CONST_UNCOMPELET_ERROR ,Line: 585 }
                                                           {LexType:IDENTIFIER }


---------------------------[Break]: {Line:587 }


---------------------[Branch]: {Type: case ,Line:588 }
                               Judgement:
-------------------------------[IdNode]: { Name: 'o' ,Line: 588 }
                                         {LexType:CONST }

---------------------[Branch]: {Type: case ,Line:588 }
                               Judgement:
-------------------------------[IdNode]: { Name: 'O' ,Line: 588 }
                                         {LexType:CONST }
-------------------------------[IdNode]: { Name: secondBuffer ,Line: 589 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: += ,Line:589 }
                                       {OpDir: M }
-----------------------------------[IdNode]: { Name: buffer ,Line: 589 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: [ ,Line:589 }
                                           {OpDir: M }
---------------------------------------[IdNode]: { Name: cur ,Line: 589 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: ++ ,Line:589 }
                                               {OpDir: L }

-------------------------------[IdNode]: { Name: secondBuffer ,Line: 590 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: += ,Line:590 }
                                       {OpDir: M }
-----------------------------------[IdNode]: { Name: buffer ,Line: 590 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: [ ,Line:590 }
                                           {OpDir: M }
---------------------------------------[IdNode]: { Name: cur ,Line: 590 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: ++ ,Line:590 }
                                               {OpDir: L }

---------------------------[Branch]: {Type: if ,Line:591 }
                                     Judgement:
-------------------------------------------------[IdNode]: { Name: buffer ,Line: 591 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: [ ,Line:591 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: cur ,Line: 591 }
                                                           {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: >= ,Line:591 }
                                                     {OpDir: M }
---------------------------------------------[IdNode]: { Name: '0' ,Line: 591 }
                                                       {LexType:CONST }
-------------------------------------[Operator]: {OpType: && ,Line:591 }
                                                 {OpDir: M }
-------------------------------------------------[IdNode]: { Name: buffer ,Line: 591 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: [ ,Line:591 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: cur ,Line: 591 }
                                                           {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: <= ,Line:591 }
                                                     {OpDir: M }
---------------------------------------------[IdNode]: { Name: '7' ,Line: 591 }
                                                       {LexType:CONST }
---------------------------------[Branch]: {Type: while ,Line:592 }
                                           Judgement:
-------------------------------------------------------[IdNode]: { Name: buffer ,Line: 592 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: [ ,Line:592 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: cur ,Line: 592 }
                                                                 {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: >= ,Line:592 }
                                                           {OpDir: M }
---------------------------------------------------[IdNode]: { Name: '0' ,Line: 592 }
                                                             {LexType:CONST }
-------------------------------------------[Operator]: {OpType: && ,Line:592 }
                                                       {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: buffer ,Line: 592 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: [ ,Line:592 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: cur ,Line: 592 }
                                                                 {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: <= ,Line:592 }
                                                           {OpDir: M }
---------------------------------------------------[IdNode]: { Name: '7' ,Line: 592 }
                                                             {LexType:CONST }
-------------------------------------------[IdNode]: { Name: secondBuffer ,Line: 593 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: += ,Line:593 }
                                                   {OpDir: M }
-----------------------------------------------[IdNode]: { Name: buffer ,Line: 593 }
                                                         {LexType:IDENTIFIER }
-------------------------------------------[Operator]: {OpType: [ ,Line:593 }
                                                       {OpDir: M }
---------------------------------------------------[IdNode]: { Name: cur ,Line: 593 }
                                                             {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: ++ ,Line:593 }
                                                           {OpDir: L }


---------------------------------[Branch]: {Type: if ,Line:595 }
                                           Judgement:
-------------------------------------------[Function]: {Name: isValidID ,Line:595 }
                                                       ArgList: 1 Members
-----------------------------------------------------------[IdNode]: { Name: buffer ,Line: 595 }
                                                                     {LexType:IDENTIFIER }
-------------------------------------------------------[Operator]: {OpType: [ ,Line:595 }
                                                                   {OpDir: M }
-----------------------------------------------------------[IdNode]: { Name: cur ,Line: 595 }
                                                                     {LexType:IDENTIFIER }
---------------------------------------[Function]: {Name: raiseSyntaxError ,Line:596 }
                                                   ArgList: 2 Members
---------------------------------------------------[IdNode]: { Name: curLine ,Line: 596 }
                                                             {LexType:IDENTIFIER }
-------------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 596 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: :: ,Line:596 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: NUM_CONST_FORMAT_ERROR ,Line: 596 }
                                                                 {LexType:IDENTIFIER }


---------------------------------[Branch]: {Type: else ,Line:598 }
---------------------------------------[Function]: {Name: storeLex ,Line:599 }
                                                   ArgList: 2 Members
-------------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 599 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: :: ,Line:599 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: CONST ,Line: 599 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[IdNode]: { Name: secondBuffer ,Line: 599 }
                                                             {LexType:IDENTIFIER }



---------------------------[Branch]: {Type: else ,Line:602 }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:603 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 603 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 603 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:603 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: NUM_CONST_UNCOMPELET_ERROR ,Line: 603 }
                                                           {LexType:IDENTIFIER }


---------------------------[Break]: {Line:605 }


---------------------[Branch]: {Type: case ,Line:606 }
                               Judgement:
-------------------------------[IdNode]: { Name: 'b' ,Line: 606 }
                                         {LexType:CONST }

---------------------[Branch]: {Type: case ,Line:606 }
                               Judgement:
-------------------------------[IdNode]: { Name: 'B' ,Line: 606 }
                                         {LexType:CONST }
-------------------------------[IdNode]: { Name: secondBuffer ,Line: 607 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: += ,Line:607 }
                                       {OpDir: M }
-----------------------------------[IdNode]: { Name: buffer ,Line: 607 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: [ ,Line:607 }
                                           {OpDir: M }
---------------------------------------[IdNode]: { Name: cur ,Line: 607 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: ++ ,Line:607 }
                                               {OpDir: L }

-------------------------------[IdNode]: { Name: secondBuffer ,Line: 608 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: += ,Line:608 }
                                       {OpDir: M }
-----------------------------------[IdNode]: { Name: buffer ,Line: 608 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: [ ,Line:608 }
                                           {OpDir: M }
---------------------------------------[IdNode]: { Name: cur ,Line: 608 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: ++ ,Line:608 }
                                               {OpDir: L }

---------------------------[Branch]: {Type: if ,Line:609 }
                                     Judgement:
-------------------------------------------------[IdNode]: { Name: buffer ,Line: 609 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: [ ,Line:609 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: cur ,Line: 609 }
                                                           {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: >= ,Line:609 }
                                                     {OpDir: M }
---------------------------------------------[IdNode]: { Name: '0' ,Line: 609 }
                                                       {LexType:CONST }
-------------------------------------[Operator]: {OpType: && ,Line:609 }
                                                 {OpDir: M }
-------------------------------------------------[IdNode]: { Name: buffer ,Line: 609 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: [ ,Line:609 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: cur ,Line: 609 }
                                                           {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: <= ,Line:609 }
                                                     {OpDir: M }
---------------------------------------------[IdNode]: { Name: '1' ,Line: 609 }
                                                       {LexType:CONST }
---------------------------------[Branch]: {Type: while ,Line:610 }
                                           Judgement:
-------------------------------------------------------[IdNode]: { Name: buffer ,Line: 610 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: [ ,Line:610 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: cur ,Line: 610 }
                                                                 {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: >= ,Line:610 }
                                                           {OpDir: M }
---------------------------------------------------[IdNode]: { Name: '0' ,Line: 610 }
                                                             {LexType:CONST }
-------------------------------------------[Operator]: {OpType: && ,Line:610 }
                                                       {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: buffer ,Line: 610 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: [ ,Line:610 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: cur ,Line: 610 }
                                                                 {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: <= ,Line:610 }
                                                           {OpDir: M }
---------------------------------------------------[IdNode]: { Name: '1' ,Line: 610 }
                                                             {LexType:CONST }
-------------------------------------------[IdNode]: { Name: secondBuffer ,Line: 611 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: += ,Line:611 }
                                                   {OpDir: M }
-----------------------------------------------[IdNode]: { Name: buffer ,Line: 611 }
                                                         {LexType:IDENTIFIER }
-------------------------------------------[Operator]: {OpType: [ ,Line:611 }
                                                       {OpDir: M }
---------------------------------------------------[IdNode]: { Name: cur ,Line: 611 }
                                                             {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: ++ ,Line:611 }
                                                           {OpDir: L }


---------------------------------[Branch]: {Type: if ,Line:613 }
                                           Judgement:
-------------------------------------------[Function]: {Name: isValidID ,Line:613 }
                                                       ArgList: 1 Members
-----------------------------------------------------------[IdNode]: { Name: buffer ,Line: 613 }
                                                                     {LexType:IDENTIFIER }
-------------------------------------------------------[Operator]: {OpType: [ ,Line:613 }
                                                                   {OpDir: M }
-----------------------------------------------------------[IdNode]: { Name: cur ,Line: 613 }
                                                                     {LexType:IDENTIFIER }
---------------------------------------[Function]: {Name: raiseSyntaxError ,Line:614 }
                                                   ArgList: 2 Members
---------------------------------------------------[IdNode]: { Name: curLine ,Line: 614 }
                                                             {LexType:IDENTIFIER }
-------------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 614 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: :: ,Line:614 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: NUM_CONST_FORMAT_ERROR ,Line: 614 }
                                                                 {LexType:IDENTIFIER }


---------------------------------[Branch]: {Type: else ,Line:616 }
---------------------------------------[Function]: {Name: storeLex ,Line:617 }
                                                   ArgList: 2 Members
-------------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 617 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: :: ,Line:617 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: CONST ,Line: 617 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[IdNode]: { Name: secondBuffer ,Line: 617 }
                                                             {LexType:IDENTIFIER }



---------------------------[Branch]: {Type: else ,Line:620 }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:621 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 621 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 621 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:621 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: NUM_CONST_UNCOMPELET_ERROR ,Line: 621 }
                                                           {LexType:IDENTIFIER }


---------------------------[Break]: {Line:623 }


---------------------[Branch]: {Type: default ,Line:624 }
---------------------------[Break]: {Line:625 }




---------[Branch]: {Type: else ,Line:628 }
---------------[Branch]: {Type: while ,Line:629 }
                         Judgement:
-------------------------------------[IdNode]: { Name: buffer ,Line: 629 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: [ ,Line:629 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: cur ,Line: 629 }
                                               {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: >= ,Line:629 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: '0' ,Line: 629 }
                                           {LexType:CONST }
-------------------------[Operator]: {OpType: && ,Line:629 }
                                     {OpDir: M }
-------------------------------------[IdNode]: { Name: buffer ,Line: 629 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: [ ,Line:629 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: cur ,Line: 629 }
                                               {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: <= ,Line:629 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: '9' ,Line: 629 }
                                           {LexType:CONST }
-------------------------[IdNode]: { Name: secondBuffer ,Line: 630 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: += ,Line:630 }
                                 {OpDir: M }
-----------------------------[IdNode]: { Name: buffer ,Line: 630 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: [ ,Line:630 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: cur ,Line: 630 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: ++ ,Line:630 }
                                         {OpDir: L }


---------------[Branch]: {Type: if ,Line:632 }
                         Judgement:
---------------------------------[IdNode]: { Name: buffer ,Line: 632 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: [ ,Line:632 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: cur ,Line: 632 }
                                           {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: == ,Line:632 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: '.' ,Line: 632 }
                                       {LexType:CONST }
-------------------------[IdNode]: { Name: secondBuffer ,Line: 633 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: += ,Line:633 }
                                 {OpDir: M }
-----------------------------[IdNode]: { Name: buffer ,Line: 633 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: [ ,Line:633 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: cur ,Line: 633 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: ++ ,Line:633 }
                                         {OpDir: L }

---------------------[Branch]: {Type: if ,Line:634 }
                               Judgement:
-------------------------------------------[IdNode]: { Name: buffer ,Line: 634 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: [ ,Line:634 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 634 }
                                                     {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: >= ,Line:634 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: '0' ,Line: 634 }
                                                 {LexType:CONST }
-------------------------------[Operator]: {OpType: && ,Line:634 }
                                           {OpDir: M }
-------------------------------------------[IdNode]: { Name: buffer ,Line: 634 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: [ ,Line:634 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 634 }
                                                     {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: <= ,Line:634 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: '9' ,Line: 634 }
                                                 {LexType:CONST }
---------------------------[Branch]: {Type: while ,Line:635 }
                                     Judgement:
-------------------------------------------------[IdNode]: { Name: buffer ,Line: 635 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: [ ,Line:635 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: cur ,Line: 635 }
                                                           {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: >= ,Line:635 }
                                                     {OpDir: M }
---------------------------------------------[IdNode]: { Name: '0' ,Line: 635 }
                                                       {LexType:CONST }
-------------------------------------[Operator]: {OpType: && ,Line:635 }
                                                 {OpDir: M }
-------------------------------------------------[IdNode]: { Name: buffer ,Line: 635 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: [ ,Line:635 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: cur ,Line: 635 }
                                                           {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: <= ,Line:635 }
                                                     {OpDir: M }
---------------------------------------------[IdNode]: { Name: '9' ,Line: 635 }
                                                       {LexType:CONST }
-------------------------------------[IdNode]: { Name: secondBuffer ,Line: 636 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:636 }
                                             {OpDir: M }
-----------------------------------------[IdNode]: { Name: buffer ,Line: 636 }
                                                   {LexType:IDENTIFIER }
-------------------------------------[Operator]: {OpType: [ ,Line:636 }
                                                 {OpDir: M }
---------------------------------------------[IdNode]: { Name: cur ,Line: 636 }
                                                       {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: ++ ,Line:636 }
                                                     {OpDir: L }


---------------------------[Branch]: {Type: if ,Line:638 }
                                     Judgement:
---------------------------------------------[IdNode]: { Name: buffer ,Line: 638 }
                                                       {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: [ ,Line:638 }
                                                     {OpDir: M }
---------------------------------------------[IdNode]: { Name: cur ,Line: 638 }
                                                       {LexType:IDENTIFIER }
-------------------------------------[Operator]: {OpType: == ,Line:638 }
                                                 {OpDir: M }
-----------------------------------------[IdNode]: { Name: 'F' ,Line: 638 }
                                                   {LexType:CONST }
-------------------------------------[IdNode]: { Name: secondBuffer ,Line: 639 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:639 }
                                             {OpDir: M }
-----------------------------------------[IdNode]: { Name: buffer ,Line: 639 }
                                                   {LexType:IDENTIFIER }
-------------------------------------[Operator]: {OpType: [ ,Line:639 }
                                                 {OpDir: M }
---------------------------------------------[IdNode]: { Name: cur ,Line: 639 }
                                                       {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: ++ ,Line:639 }
                                                     {OpDir: L }

---------------------------------[Branch]: {Type: if ,Line:640 }
                                           Judgement:
-------------------------------------------[Function]: {Name: isValidID ,Line:640 }
                                                       ArgList: 1 Members
-----------------------------------------------------------[IdNode]: { Name: buffer ,Line: 640 }
                                                                     {LexType:IDENTIFIER }
-------------------------------------------------------[Operator]: {OpType: [ ,Line:640 }
                                                                   {OpDir: M }
-----------------------------------------------------------[IdNode]: { Name: cur ,Line: 640 }
                                                                     {LexType:IDENTIFIER }
---------------------------------------[Function]: {Name: raiseSyntaxError ,Line:641 }
                                                   ArgList: 2 Members
---------------------------------------------------[IdNode]: { Name: curLine ,Line: 641 }
                                                             {LexType:IDENTIFIER }
-------------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 641 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: :: ,Line:641 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: NUM_CONST_FORMAT_ERROR ,Line: 641 }
                                                                 {LexType:IDENTIFIER }


---------------------------------[Branch]: {Type: else ,Line:643 }
---------------------------------------[Function]: {Name: storeLex ,Line:644 }
                                                   ArgList: 2 Members
-------------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 644 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: :: ,Line:644 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: CONST ,Line: 644 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[IdNode]: { Name: secondBuffer ,Line: 644 }
                                                             {LexType:IDENTIFIER }



---------------------------[Branch]: {Type: else if ,Line:647 }
                                     Judgement:
-------------------------------------------------[IdNode]: { Name: buffer ,Line: 647 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: [ ,Line:647 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: cur ,Line: 647 }
                                                           {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: == ,Line:647 }
                                                     {OpDir: M }
---------------------------------------------[IdNode]: { Name: 'E' ,Line: 647 }
                                                       {LexType:CONST }
-------------------------------------[Operator]: {OpType: || ,Line:647 }
                                                 {OpDir: M }
-------------------------------------------------[IdNode]: { Name: buffer ,Line: 647 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: [ ,Line:647 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: cur ,Line: 647 }
                                                           {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: == ,Line:647 }
                                                     {OpDir: M }
---------------------------------------------[IdNode]: { Name: 'e' ,Line: 647 }
                                                       {LexType:CONST }
-------------------------------------[IdNode]: { Name: secondBuffer ,Line: 648 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:648 }
                                             {OpDir: M }
-----------------------------------------[IdNode]: { Name: buffer ,Line: 648 }
                                                   {LexType:IDENTIFIER }
-------------------------------------[Operator]: {OpType: [ ,Line:648 }
                                                 {OpDir: M }
---------------------------------------------[IdNode]: { Name: cur ,Line: 648 }
                                                       {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: ++ ,Line:648 }
                                                     {OpDir: L }

---------------------------------[Branch]: {Type: if ,Line:649 }
                                           Judgement:
-------------------------------------------------------[IdNode]: { Name: buffer ,Line: 649 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: [ ,Line:649 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: cur ,Line: 649 }
                                                                 {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: == ,Line:649 }
                                                           {OpDir: M }
---------------------------------------------------[IdNode]: { Name: '+' ,Line: 649 }
                                                             {LexType:CONST }
-------------------------------------------[Operator]: {OpType: || ,Line:649 }
                                                       {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: buffer ,Line: 649 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: [ ,Line:649 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: cur ,Line: 649 }
                                                                 {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: == ,Line:649 }
                                                           {OpDir: M }
---------------------------------------------------[IdNode]: { Name: '-' ,Line: 649 }
                                                             {LexType:CONST }
-------------------------------------------[IdNode]: { Name: secondBuffer ,Line: 650 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: += ,Line:650 }
                                                   {OpDir: M }
-----------------------------------------------[IdNode]: { Name: buffer ,Line: 650 }
                                                         {LexType:IDENTIFIER }
-------------------------------------------[Operator]: {OpType: [ ,Line:650 }
                                                       {OpDir: M }
---------------------------------------------------[IdNode]: { Name: cur ,Line: 650 }
                                                             {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: ++ ,Line:650 }
                                                           {OpDir: L }


---------------------------------[Branch]: {Type: if ,Line:652 }
                                           Judgement:
-------------------------------------------------------[IdNode]: { Name: buffer ,Line: 652 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: [ ,Line:652 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: cur ,Line: 652 }
                                                                 {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: >= ,Line:652 }
                                                           {OpDir: M }
---------------------------------------------------[IdNode]: { Name: '0' ,Line: 652 }
                                                             {LexType:CONST }
-------------------------------------------[Operator]: {OpType: && ,Line:652 }
                                                       {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: buffer ,Line: 652 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: [ ,Line:652 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: cur ,Line: 652 }
                                                                 {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: <= ,Line:652 }
                                                           {OpDir: M }
---------------------------------------------------[IdNode]: { Name: '9' ,Line: 652 }
                                                             {LexType:CONST }
---------------------------------------[Branch]: {Type: while ,Line:653 }
                                                 Judgement:
-------------------------------------------------------------[IdNode]: { Name: buffer ,Line: 653 }
                                                                       {LexType:IDENTIFIER }
---------------------------------------------------------[Operator]: {OpType: [ ,Line:653 }
                                                                     {OpDir: M }
-------------------------------------------------------------[IdNode]: { Name: cur ,Line: 653 }
                                                                       {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: >= ,Line:653 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: '0' ,Line: 653 }
                                                                   {LexType:CONST }
-------------------------------------------------[Operator]: {OpType: && ,Line:653 }
                                                             {OpDir: M }
-------------------------------------------------------------[IdNode]: { Name: buffer ,Line: 653 }
                                                                       {LexType:IDENTIFIER }
---------------------------------------------------------[Operator]: {OpType: [ ,Line:653 }
                                                                     {OpDir: M }
-------------------------------------------------------------[IdNode]: { Name: cur ,Line: 653 }
                                                                       {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: <= ,Line:653 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: '9' ,Line: 653 }
                                                                   {LexType:CONST }
-------------------------------------------------[IdNode]: { Name: secondBuffer ,Line: 654 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: += ,Line:654 }
                                                         {OpDir: M }
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 654 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:654 }
                                                             {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 654 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: ++ ,Line:654 }
                                                                 {OpDir: L }


---------------------------------------[Branch]: {Type: if ,Line:656 }
                                                 Judgement:
-----------------------------------------------------[Function]: {Name: isValidID ,Line:656 }
                                                                 ArgList: 1 Members
---------------------------------------------------------------------[IdNode]: { Name: buffer ,Line: 656 }
                                                                               {LexType:IDENTIFIER }
-----------------------------------------------------------------[Operator]: {OpType: [ ,Line:656 }
                                                                             {OpDir: M }
---------------------------------------------------------------------[IdNode]: { Name: cur ,Line: 656 }
                                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: || ,Line:656 }
                                                             {OpDir: M }
-------------------------------------------------------------[IdNode]: { Name: buffer ,Line: 656 }
                                                                       {LexType:IDENTIFIER }
---------------------------------------------------------[Operator]: {OpType: [ ,Line:656 }
                                                                     {OpDir: M }
-------------------------------------------------------------[IdNode]: { Name: cur ,Line: 656 }
                                                                       {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: == ,Line:656 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: '.' ,Line: 656 }
                                                                   {LexType:CONST }
---------------------------------------------[Function]: {Name: raiseSyntaxError ,Line:657 }
                                                         ArgList: 2 Members
---------------------------------------------------------[IdNode]: { Name: curLine ,Line: 657 }
                                                                   {LexType:IDENTIFIER }
-------------------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 657 }
                                                                       {LexType:IDENTIFIER }
---------------------------------------------------------[Operator]: {OpType: :: ,Line:657 }
                                                                     {OpDir: M }
-------------------------------------------------------------[IdNode]: { Name: NUM_CONST_FORMAT_ERROR ,Line: 657 }
                                                                       {LexType:IDENTIFIER }


---------------------------------------[Branch]: {Type: else ,Line:659 }
---------------------------------------------[Function]: {Name: storeLex ,Line:660 }
                                                         ArgList: 2 Members
-------------------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 660 }
                                                                       {LexType:IDENTIFIER }
---------------------------------------------------------[Operator]: {OpType: :: ,Line:660 }
                                                                     {OpDir: M }
-------------------------------------------------------------[IdNode]: { Name: CONST ,Line: 660 }
                                                                       {LexType:IDENTIFIER }
---------------------------------------------------------[IdNode]: { Name: secondBuffer ,Line: 660 }
                                                                   {LexType:IDENTIFIER }



---------------------------------[Branch]: {Type: else ,Line:663 }
---------------------------------------[Branch]: {Type: if ,Line:664 }
                                                 Judgement:
-------------------------------------------------[Function]: {Name: isValidID ,Line:664 }
                                                             ArgList: 1 Members
-----------------------------------------------------------------[IdNode]: { Name: buffer ,Line: 664 }
                                                                           {LexType:IDENTIFIER }
-------------------------------------------------------------[Operator]: {OpType: [ ,Line:664 }
                                                                         {OpDir: M }
-----------------------------------------------------------------[IdNode]: { Name: cur ,Line: 664 }
                                                                           {LexType:IDENTIFIER }
---------------------------------------------[Function]: {Name: raiseSyntaxError ,Line:665 }
                                                         ArgList: 2 Members
---------------------------------------------------------[IdNode]: { Name: curLine ,Line: 665 }
                                                                   {LexType:IDENTIFIER }
-------------------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 665 }
                                                                       {LexType:IDENTIFIER }
---------------------------------------------------------[Operator]: {OpType: :: ,Line:665 }
                                                                     {OpDir: M }
-------------------------------------------------------------[IdNode]: { Name: NUM_CONST_FORMAT_ERROR ,Line: 665 }
                                                                       {LexType:IDENTIFIER }


---------------------------------------[Branch]: {Type: else ,Line:667 }
---------------------------------------------[Function]: {Name: raiseSyntaxError ,Line:668 }
                                                         ArgList: 2 Members
---------------------------------------------------------[IdNode]: { Name: curLine ,Line: 668 }
                                                                   {LexType:IDENTIFIER }
-------------------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 668 }
                                                                       {LexType:IDENTIFIER }
---------------------------------------------------------[Operator]: {OpType: :: ,Line:668 }
                                                                     {OpDir: M }
-------------------------------------------------------------[IdNode]: { Name: NUM_CONST_UNCOMPELET_ERROR ,Line: 668 }
                                                                       {LexType:IDENTIFIER }




---------------------------[Branch]: {Type: else if ,Line:672 }
                                     Judgement:
-------------------------------------[Function]: {Name: isValidID ,Line:672 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 672 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:672 }
                                                             {OpDir: M }
-----------------------------------------------------[IdNode]: { Name: cur ,Line: 672 }
                                                               {LexType:IDENTIFIER }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:673 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 673 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 673 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:673 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: NUM_CONST_FORMAT_ERROR ,Line: 673 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:675 }
---------------------------------[Function]: {Name: storeLex ,Line:676 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 676 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:676 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: CONST ,Line: 676 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: secondBuffer ,Line: 676 }
                                                       {LexType:IDENTIFIER }



---------------------[Branch]: {Type: else ,Line:679 }
---------------------------[Branch]: {Type: if ,Line:680 }
                                     Judgement:
-------------------------------------[Function]: {Name: isValidID ,Line:680 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 680 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:680 }
                                                             {OpDir: M }
-----------------------------------------------------[IdNode]: { Name: cur ,Line: 680 }
                                                               {LexType:IDENTIFIER }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:681 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 681 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 681 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:681 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: NUM_CONST_FORMAT_ERROR ,Line: 681 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:683 }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:684 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 684 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 684 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:684 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: NUM_CONST_UNCOMPELET_ERROR ,Line: 684 }
                                                           {LexType:IDENTIFIER }




---------------[Branch]: {Type: else if ,Line:688 }
                         Judgement:
-------------------------------------[IdNode]: { Name: buffer ,Line: 688 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: [ ,Line:688 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: cur ,Line: 688 }
                                               {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: == ,Line:688 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: 'E' ,Line: 688 }
                                           {LexType:CONST }
-------------------------[Operator]: {OpType: || ,Line:688 }
                                     {OpDir: M }
-------------------------------------[IdNode]: { Name: buffer ,Line: 688 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: [ ,Line:688 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: cur ,Line: 688 }
                                               {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: == ,Line:688 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: 'e' ,Line: 688 }
                                           {LexType:CONST }
-------------------------[IdNode]: { Name: secondBuffer ,Line: 689 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: += ,Line:689 }
                                 {OpDir: M }
-----------------------------[IdNode]: { Name: buffer ,Line: 689 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: [ ,Line:689 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: cur ,Line: 689 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: ++ ,Line:689 }
                                         {OpDir: L }

---------------------[Branch]: {Type: if ,Line:690 }
                               Judgement:
-------------------------------------------[IdNode]: { Name: buffer ,Line: 690 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: [ ,Line:690 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 690 }
                                                     {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: == ,Line:690 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: '+' ,Line: 690 }
                                                 {LexType:CONST }
-------------------------------[Operator]: {OpType: || ,Line:690 }
                                           {OpDir: M }
-------------------------------------------[IdNode]: { Name: buffer ,Line: 690 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: [ ,Line:690 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 690 }
                                                     {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: == ,Line:690 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: '-' ,Line: 690 }
                                                 {LexType:CONST }
-------------------------------[IdNode]: { Name: secondBuffer ,Line: 691 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: += ,Line:691 }
                                       {OpDir: M }
-----------------------------------[IdNode]: { Name: buffer ,Line: 691 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: [ ,Line:691 }
                                           {OpDir: M }
---------------------------------------[IdNode]: { Name: cur ,Line: 691 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: ++ ,Line:691 }
                                               {OpDir: L }


---------------------[Branch]: {Type: if ,Line:693 }
                               Judgement:
-------------------------------------------[IdNode]: { Name: buffer ,Line: 693 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: [ ,Line:693 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 693 }
                                                     {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: >= ,Line:693 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: '0' ,Line: 693 }
                                                 {LexType:CONST }
-------------------------------[Operator]: {OpType: && ,Line:693 }
                                           {OpDir: M }
-------------------------------------------[IdNode]: { Name: buffer ,Line: 693 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: [ ,Line:693 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 693 }
                                                     {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: <= ,Line:693 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: '9' ,Line: 693 }
                                                 {LexType:CONST }
---------------------------[Branch]: {Type: while ,Line:694 }
                                     Judgement:
-------------------------------------------------[IdNode]: { Name: buffer ,Line: 694 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: [ ,Line:694 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: cur ,Line: 694 }
                                                           {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: >= ,Line:694 }
                                                     {OpDir: M }
---------------------------------------------[IdNode]: { Name: '0' ,Line: 694 }
                                                       {LexType:CONST }
-------------------------------------[Operator]: {OpType: && ,Line:694 }
                                                 {OpDir: M }
-------------------------------------------------[IdNode]: { Name: buffer ,Line: 694 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: [ ,Line:694 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: cur ,Line: 694 }
                                                           {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: <= ,Line:694 }
                                                     {OpDir: M }
---------------------------------------------[IdNode]: { Name: '9' ,Line: 694 }
                                                       {LexType:CONST }
-------------------------------------[IdNode]: { Name: secondBuffer ,Line: 695 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: += ,Line:695 }
                                             {OpDir: M }
-----------------------------------------[IdNode]: { Name: buffer ,Line: 695 }
                                                   {LexType:IDENTIFIER }
-------------------------------------[Operator]: {OpType: [ ,Line:695 }
                                                 {OpDir: M }
---------------------------------------------[IdNode]: { Name: cur ,Line: 695 }
                                                       {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: ++ ,Line:695 }
                                                     {OpDir: L }


---------------------------[Branch]: {Type: if ,Line:697 }
                                     Judgement:
-----------------------------------------[Function]: {Name: isValidID ,Line:697 }
                                                     ArgList: 1 Members
---------------------------------------------------------[IdNode]: { Name: buffer ,Line: 697 }
                                                                   {LexType:IDENTIFIER }
-----------------------------------------------------[Operator]: {OpType: [ ,Line:697 }
                                                                 {OpDir: M }
---------------------------------------------------------[IdNode]: { Name: cur ,Line: 697 }
                                                                   {LexType:IDENTIFIER }
-------------------------------------[Operator]: {OpType: || ,Line:697 }
                                                 {OpDir: M }
-------------------------------------------------[IdNode]: { Name: buffer ,Line: 697 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: [ ,Line:697 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: cur ,Line: 697 }
                                                           {LexType:IDENTIFIER }
-----------------------------------------[Operator]: {OpType: == ,Line:697 }
                                                     {OpDir: M }
---------------------------------------------[IdNode]: { Name: '.' ,Line: 697 }
                                                       {LexType:CONST }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:698 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 698 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 698 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:698 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: NUM_CONST_FORMAT_ERROR ,Line: 698 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:700 }
---------------------------------[Function]: {Name: storeLex ,Line:701 }
                                             ArgList: 2 Members
-------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 701 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:701 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: CONST ,Line: 701 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[IdNode]: { Name: secondBuffer ,Line: 701 }
                                                       {LexType:IDENTIFIER }



---------------------[Branch]: {Type: else ,Line:704 }
---------------------------[Branch]: {Type: if ,Line:705 }
                                     Judgement:
-------------------------------------[Function]: {Name: isValidID ,Line:705 }
                                                 ArgList: 1 Members
-----------------------------------------------------[IdNode]: { Name: buffer ,Line: 705 }
                                                               {LexType:IDENTIFIER }
-------------------------------------------------[Operator]: {OpType: [ ,Line:705 }
                                                             {OpDir: M }
-----------------------------------------------------[IdNode]: { Name: cur ,Line: 705 }
                                                               {LexType:IDENTIFIER }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:706 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 706 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 706 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:706 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: NUM_CONST_FORMAT_ERROR ,Line: 706 }
                                                           {LexType:IDENTIFIER }


---------------------------[Branch]: {Type: else ,Line:708 }
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:709 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 709 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 709 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:709 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: NUM_CONST_UNCOMPELET_ERROR ,Line: 709 }
                                                           {LexType:IDENTIFIER }




---------------[Branch]: {Type: else if ,Line:713 }
                         Judgement:
---------------------------------[IdNode]: { Name: buffer ,Line: 713 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: [ ,Line:713 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: cur ,Line: 713 }
                                           {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: == ,Line:713 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: 'L' ,Line: 713 }
                                       {LexType:CONST }
-------------------------[IdNode]: { Name: secondBuffer ,Line: 714 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: += ,Line:714 }
                                 {OpDir: M }
-----------------------------[IdNode]: { Name: buffer ,Line: 714 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: [ ,Line:714 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: cur ,Line: 714 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: ++ ,Line:714 }
                                         {OpDir: L }

---------------------[Branch]: {Type: if ,Line:715 }
                               Judgement:
-------------------------------[Function]: {Name: isValidID ,Line:715 }
                                           ArgList: 1 Members
-----------------------------------------------[IdNode]: { Name: buffer ,Line: 715 }
                                                         {LexType:IDENTIFIER }
-------------------------------------------[Operator]: {OpType: [ ,Line:715 }
                                                       {OpDir: M }
-----------------------------------------------[IdNode]: { Name: cur ,Line: 715 }
                                                         {LexType:IDENTIFIER }
---------------------------[Function]: {Name: raiseSyntaxError ,Line:716 }
                                       ArgList: 2 Members
---------------------------------------[IdNode]: { Name: curLine ,Line: 716 }
                                                 {LexType:IDENTIFIER }
-------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 716 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: :: ,Line:716 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: NUM_CONST_FORMAT_ERROR ,Line: 716 }
                                                     {LexType:IDENTIFIER }


---------------------[Branch]: {Type: else ,Line:718 }
---------------------------[Function]: {Name: storeLex ,Line:719 }
                                       ArgList: 2 Members
-------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 719 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: :: ,Line:719 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: CONST ,Line: 719 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[IdNode]: { Name: secondBuffer ,Line: 719 }
                                                 {LexType:IDENTIFIER }



---------------[Branch]: {Type: else if ,Line:722 }
                         Judgement:
-------------------------[Function]: {Name: isValidID ,Line:722 }
                                     ArgList: 1 Members
-----------------------------------------[IdNode]: { Name: buffer ,Line: 722 }
                                                   {LexType:IDENTIFIER }
-------------------------------------[Operator]: {OpType: [ ,Line:722 }
                                                 {OpDir: M }
-----------------------------------------[IdNode]: { Name: cur ,Line: 722 }
                                                   {LexType:IDENTIFIER }
---------------------[Function]: {Name: raiseSyntaxError ,Line:723 }
                                 ArgList: 2 Members
---------------------------------[IdNode]: { Name: curLine ,Line: 723 }
                                           {LexType:IDENTIFIER }
-------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 723 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: :: ,Line:723 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: NUM_CONST_FORMAT_ERROR ,Line: 723 }
                                               {LexType:IDENTIFIER }


---------------[Branch]: {Type: else ,Line:725 }
---------------------[Function]: {Name: storeLex ,Line:726 }
                                 ArgList: 2 Members
-------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 726 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: :: ,Line:726 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: CONST ,Line: 726 }
                                               {LexType:IDENTIFIER }
---------------------------------[IdNode]: { Name: secondBuffer ,Line: 726 }
                                           {LexType:IDENTIFIER }




---[FuncDefine]: {Name: handleCharConst ,Line:736 }
                 {ReturnType:void ,Modifier: None ,ArgTable:}
---------[VarDeclare]: {Name: secondBuffer ,Line:737 }
                       {Type:string,Modifier: None }

-------------[IdNode]: { Name: secondBuffer ,Line: 737 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: = ,Line:737 }
                     {OpDir: M }
-------------[IdNode]: { Name: "" ,Line: 737 }
                       {LexType:CONST }

---------[Branch]: {Type: if ,Line:738 }
                   Judgement:
---------------------------[IdNode]: { Name: buffer ,Line: 738 }
                                     {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: [ ,Line:738 }
                                   {OpDir: M }
---------------------------[Operator]: {OpType: ++ ,Line:738 }
                                       {OpDir: R }
-------------------------------[IdNode]: { Name: cur ,Line: 738 }
                                         {LexType:IDENTIFIER }
-------------------[Operator]: {OpType: == ,Line:738 }
                               {OpDir: M }
-----------------------[IdNode]: { Name: \ ,Line: 738 }
                                 {LexType:CONST }
---------------[Branch]: {Type: if ,Line:739 }
                         Judgement:
---------------------------------[IdNode]: { Name: buffer ,Line: 739 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: [ ,Line:739 }
                                         {OpDir: M }
-------------------------------------[IdNode]: { Name: cur ,Line: 739 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: + ,Line:739 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 2 ,Line: 739 }
                                               {LexType:CONST }
-------------------------[Operator]: {OpType: == ,Line:739 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: ' ,Line: 739 }
                                       {LexType:CONST }
-------------------------[IdNode]: { Name: secondBuffer ,Line: 740 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: += ,Line:740 }
                                 {OpDir: M }
-----------------------------[IdNode]: { Name: buffer ,Line: 740 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: [ ,Line:740 }
                                     {OpDir: M }
-----------------------------[Operator]: {OpType: ++ ,Line:740 }
                                         {OpDir: R }
---------------------------------[IdNode]: { Name: cur ,Line: 740 }
                                           {LexType:IDENTIFIER }

---------------------[Function]: {Name: storeLex ,Line:741 }
                                 ArgList: 2 Members
-------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 741 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: :: ,Line:741 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: CONST ,Line: 741 }
                                               {LexType:IDENTIFIER }
---------------------------------[IdNode]: { Name: secondBuffer ,Line: 741 }
                                           {LexType:IDENTIFIER }

-------------------------[IdNode]: { Name: cur ,Line: 742 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: += ,Line:742 }
                                 {OpDir: M }
-------------------------[IdNode]: { Name: 2 ,Line: 742 }
                                   {LexType:CONST }


---------------[Branch]: {Type: else ,Line:744 }
---------------------[Function]: {Name: raiseSyntaxError ,Line:745 }
                                 ArgList: 2 Members
---------------------------------[IdNode]: { Name: curLine ,Line: 745 }
                                           {LexType:IDENTIFIER }
-------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 745 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: :: ,Line:745 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: CHAR_SINGLE_QUOTE_UNMATCH_ERROR ,Line: 745 }
                                               {LexType:IDENTIFIER }



---------[Branch]: {Type: else ,Line:748 }
---------------[Branch]: {Type: if ,Line:749 }
                         Judgement:
---------------------------------[IdNode]: { Name: buffer ,Line: 749 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: [ ,Line:749 }
                                         {OpDir: M }
-------------------------------------[IdNode]: { Name: cur ,Line: 749 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: + ,Line:749 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: 1 ,Line: 749 }
                                               {LexType:CONST }
-------------------------[Operator]: {OpType: == ,Line:749 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: ' ,Line: 749 }
                                       {LexType:CONST }
-------------------------[IdNode]: { Name: secondBuffer ,Line: 750 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: += ,Line:750 }
                                 {OpDir: M }
-----------------------------[IdNode]: { Name: buffer ,Line: 750 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: [ ,Line:750 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: cur ,Line: 750 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: ++ ,Line:750 }
                                         {OpDir: L }

---------------------[Function]: {Name: storeLex ,Line:751 }
                                 ArgList: 2 Members
-------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 751 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: :: ,Line:751 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: CONST ,Line: 751 }
                                               {LexType:IDENTIFIER }
---------------------------------[IdNode]: { Name: secondBuffer ,Line: 751 }
                                           {LexType:IDENTIFIER }

-------------------------[IdNode]: { Name: cur ,Line: 752 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: ++ ,Line:752 }
                                 {OpDir: L }


---------------[Branch]: {Type: else ,Line:754 }
---------------------[Function]: {Name: raiseSyntaxError ,Line:755 }
                                 ArgList: 2 Members
---------------------------------[IdNode]: { Name: curLine ,Line: 755 }
                                           {LexType:IDENTIFIER }
-------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 755 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: :: ,Line:755 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: CHAR_SINGLE_QUOTE_UNMATCH_ERROR ,Line: 755 }
                                               {LexType:IDENTIFIER }




---[FuncDefine]: {Name: handleStringConst ,Line:765 }
                 {ReturnType:void ,Modifier: None ,ArgTable:}
---------[VarDeclare]: {Name: secondBuffer ,Line:766 }
                       {Type:string,Modifier: None }

-------------[IdNode]: { Name: secondBuffer ,Line: 766 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: = ,Line:766 }
                     {OpDir: M }
-------------[IdNode]: { Name: "" ,Line: 766 }
                       {LexType:CONST }

-------------[IdNode]: { Name: cur ,Line: 767 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: ++ ,Line:767 }
                     {OpDir: L }

---------[Branch]: {Type: while ,Line:768 }
                   Judgement:
---------------------------[IdNode]: { Name: buffer ,Line: 768 }
                                     {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: [ ,Line:768 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: cur ,Line: 768 }
                                     {LexType:IDENTIFIER }
-------------------[Operator]: {OpType: != ,Line:768 }
                               {OpDir: M }
-----------------------[IdNode]: { Name: " ,Line: 768 }
                                 {LexType:CONST }
---------------[Branch]: {Type: if ,Line:769 }
                         Judgement:
---------------------------------[IdNode]: { Name: buffer ,Line: 769 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: [ ,Line:769 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: cur ,Line: 769 }
                                           {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: == ,Line:769 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: 0 ,Line: 769 }
                                       {LexType:CONST }
---------------------[Function]: {Name: raiseSyntaxError ,Line:770 }
                                 ArgList: 2 Members
---------------------------------[IdNode]: { Name: curLine ,Line: 770 }
                                           {LexType:IDENTIFIER }
-------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 770 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: :: ,Line:770 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: STRING_UNCLOSE_ERROR ,Line: 770 }
                                               {LexType:IDENTIFIER }


---------------[Branch]: {Type: else ,Line:772 }
---------------------[Branch]: {Type: if ,Line:773 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 773 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:773 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: cur ,Line: 773 }
                                                 {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: == ,Line:773 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: ' ,Line: 773 }
                                             {LexType:CONST }
-------------------------------[IdNode]: { Name: secondBuffer ,Line: 774 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: += ,Line:774 }
                                       {OpDir: M }
-----------------------------------[IdNode]: { Name: buffer ,Line: 774 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: [ ,Line:774 }
                                           {OpDir: M }
---------------------------------------[IdNode]: { Name: cur ,Line: 774 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: ++ ,Line:774 }
                                               {OpDir: L }


-------------------------[IdNode]: { Name: secondBuffer ,Line: 776 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: += ,Line:776 }
                                 {OpDir: M }
-----------------------------[IdNode]: { Name: buffer ,Line: 776 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: [ ,Line:776 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: cur ,Line: 776 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: ++ ,Line:776 }
                                         {OpDir: L }



-------------[IdNode]: { Name: cur ,Line: 779 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: ++ ,Line:779 }
                     {OpDir: L }

---------[Function]: {Name: storeLex ,Line:780 }
                     ArgList: 2 Members
-------------------------[IdNode]: { Name: LEX_TYPE ,Line: 780 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: :: ,Line:780 }
                                 {OpDir: M }
-------------------------[IdNode]: { Name: CONST ,Line: 780 }
                                   {LexType:IDENTIFIER }
---------------------[IdNode]: { Name: secondBuffer ,Line: 780 }
                               {LexType:IDENTIFIER }


---[FuncDefine]: {Name: isTemplateClass ,Line:788 }
                 {ReturnType:bool ,Modifier: None ,ArgTable:{string:name}}
---------[Branch]: {Type: for ,Line:789 }
Foreach:
-------------------[VarDeclare]: {Name: kw ,Line:789 }
                                 {Type:string,Modifier: None }
-------------------[IdNode]: { Name: existTemplate ,Line: 789 }
                             {LexType:IDENTIFIER }
---------------[Branch]: {Type: if ,Line:790 }
                         Judgement:
-----------------------------[IdNode]: { Name: name ,Line: 790 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: == ,Line:790 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: kw ,Line: 790 }
                                       {LexType:IDENTIFIER }
---------------------[Return]: {Line:791 }
-------------------------[IdNode]: { Name: true ,Line: 791 }
                                   {LexType:KEYWORD }



---------[Return]: {Line:794 }
-------------[IdNode]: { Name: false ,Line: 794 }
                       {LexType:KEYWORD }


---[FuncDefine]: {Name: handleLeftRightAngleBra ,Line:802 }
                 {ReturnType:void ,Modifier: None ,ArgTable:}
---------[VarDeclare]: {Name: token ,Line:803 }
                       {Type:auto,Modifier: None }

-------------[IdNode]: { Name: token ,Line: 803 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: = ,Line:803 }
                     {OpDir: M }
-----------------[IdNode]: { Name: tokenRes ,Line: 803 }
                           {LexType:IDENTIFIER }
-------------[Operator]: {OpType: [ ,Line:803 }
                         {OpDir: M }
-------------------------[IdNode]: { Name: tokenRes ,Line: 803 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: . ,Line:803 }
                                 {OpDir: M }
-------------------------[Function]: {Name: size ,Line:803 }
                                     ArgList: 0 Members
-----------------[Operator]: {OpType: - ,Line:803 }
                             {OpDir: M }
---------------------[IdNode]: { Name: 1 ,Line: 803 }
                               {LexType:CONST }

---------[Branch]: {Type: if ,Line:804 }
                   Judgement:
-------------------[Function]: {Name: isTemplateClass ,Line:804 }
                               ArgList: 1 Members
-----------------------------------[IdNode]: { Name: token ,Line: 804 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: . ,Line:804 }
                                           {OpDir: M }
---------------------------------------[IdNode]: { Name: second ,Line: 804 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: . ,Line:804 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: second ,Line: 804 }
                                                 {LexType:IDENTIFIER }
---------------[VarDeclare]: {Name: bra ,Line:805 }
                             {Type:char,Modifier: None }

-------------------[IdNode]: { Name: bra ,Line: 805 }
                             {LexType:IDENTIFIER }
---------------[Operator]: {OpType: = ,Line:805 }
                           {OpDir: M }
-----------------------[IdNode]: { Name: buffer ,Line: 805 }
                                 {LexType:IDENTIFIER }
-------------------[Operator]: {OpType: [ ,Line:805 }
                               {OpDir: M }
-----------------------[IdNode]: { Name: cur ,Line: 805 }
                                 {LexType:IDENTIFIER }

---------------[VarDeclare]: {Name: secondBuffer ,Line:806 }
                             {Type:string,Modifier: None }

-------------------[IdNode]: { Name: secondBuffer ,Line: 806 }
                             {LexType:IDENTIFIER }
---------------[Operator]: {OpType: = ,Line:806 }
                           {OpDir: M }
-------------------[IdNode]: { Name: "" ,Line: 806 }
                             {LexType:CONST }

-------------------[IdNode]: { Name: secondBuffer ,Line: 807 }
                             {LexType:IDENTIFIER }
---------------[Operator]: {OpType: += ,Line:807 }
                           {OpDir: M }
-----------------------[IdNode]: { Name: buffer ,Line: 807 }
                                 {LexType:IDENTIFIER }
-------------------[Operator]: {OpType: [ ,Line:807 }
                               {OpDir: M }
---------------------------[IdNode]: { Name: cur ,Line: 807 }
                                     {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: ++ ,Line:807 }
                                   {OpDir: L }

---------------[Branch]: {Type: while ,Line:808 }
                         Judgement:
-----------------------------[IdNode]: { Name: bra ,Line: 808 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: == ,Line:808 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: buffer ,Line: 808 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: [ ,Line:808 }
                                         {OpDir: M }
---------------------------------[IdNode]: { Name: cur ,Line: 808 }
                                           {LexType:IDENTIFIER }
-------------------------[IdNode]: { Name: secondBuffer ,Line: 809 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: += ,Line:809 }
                                 {OpDir: M }
-----------------------------[IdNode]: { Name: buffer ,Line: 809 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: [ ,Line:809 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: cur ,Line: 809 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: ++ ,Line:809 }
                                         {OpDir: L }


---------------[Branch]: {Type: if ,Line:811 }
                         Judgement:
-------------------------[Function]: {Name: isOp ,Line:811 }
                                     ArgList: 1 Members
-----------------------------------------[IdNode]: { Name: buffer ,Line: 811 }
                                                   {LexType:IDENTIFIER }
-------------------------------------[Operator]: {OpType: [ ,Line:811 }
                                                 {OpDir: M }
-----------------------------------------[IdNode]: { Name: cur ,Line: 811 }
                                                   {LexType:IDENTIFIER }
---------------------[Function]: {Name: raiseSyntaxError ,Line:812 }
                                 ArgList: 2 Members
---------------------------------[IdNode]: { Name: curLine ,Line: 812 }
                                           {LexType:IDENTIFIER }
-------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 812 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: :: ,Line:812 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 812 }
                                               {LexType:IDENTIFIER }


---------------[Branch]: {Type: else ,Line:814 }
---------------------[Branch]: {Type: for ,Line:815 }
                               Init:
-------------------------------[VarDeclare]: {Name: i ,Line:815 }
                                             {Type:int,Modifier: unsigned }
-----------------------------------[IdNode]: { Name: i ,Line: 815 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: = ,Line:815 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: 0 ,Line: 815 }
                                             {LexType:CONST }

                               End:
-----------------------------------[IdNode]: { Name: i ,Line: 815 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: < ,Line:815 }
                                           {OpDir: M }
---------------------------------------[IdNode]: { Name: secondBuffer ,Line: 815 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: . ,Line:815 }
                                               {OpDir: M }
---------------------------------------[Function]: {Name: size ,Line:815 }
                                                   ArgList: 0 Members

                               Iterate:
-----------------------------------[IdNode]: { Name: i ,Line: 815 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: ++ ,Line:815 }
                                           {OpDir: L }
---------------------------[Function]: {Name: storeLex ,Line:816 }
                                       ArgList: 2 Members
-------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 816 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: :: ,Line:816 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: SEPERATOR ,Line: 816 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Function]: {Name: string ,Line:816 }
                                                   ArgList: 2 Members
---------------------------------------------------[IdNode]: { Name: 1 ,Line: 816 }
                                                             {LexType:CONST }
-------------------------------------------------------[IdNode]: { Name: secondBuffer ,Line: 816 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: [ ,Line:816 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: i ,Line: 816 }
                                                                 {LexType:IDENTIFIER }




---------[Branch]: {Type: else ,Line:820 }
---------------[Function]: {Name: handleOperator ,Line:821 }
                           ArgList: 0 Members



---[FuncDefine]: {Name: analyseToken ,Line:830 }
                 {ReturnType:void ,Modifier: None ,ArgTable:}
---------[Branch]: {Type: if ,Line:831 }
                   Judgement:
-------------------------------[IdNode]: { Name: buffer ,Line: 831 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: [ ,Line:831 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: cur ,Line: 831 }
                                         {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: == ,Line:831 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: 0 ,Line: 831 }
                                     {LexType:CONST }
-------------------[Operator]: {OpType: || ,Line:831 }
                               {OpDir: M }
-------------------------------[IdNode]: { Name: buffer ,Line: 831 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: [ ,Line:831 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: cur ,Line: 831 }
                                         {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: == ,Line:831 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: n ,Line: 831 }
                                     {LexType:CONST }
---------------[Return]: {Line:832 }


---------[VarDeclare]: {Name: tmp ,Line:834 }
                       {Type:char,Modifier: None }

-------------[IdNode]: { Name: tmp ,Line: 834 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: = ,Line:834 }
                     {OpDir: M }
-----------------[IdNode]: { Name: buffer ,Line: 834 }
                           {LexType:IDENTIFIER }
-------------[Operator]: {OpType: [ ,Line:834 }
                         {OpDir: M }
-----------------[IdNode]: { Name: cur ,Line: 834 }
                           {LexType:IDENTIFIER }

---------[Branch]: {Type: switch ,Line:835 }
                   Judgement:
-------------------[IdNode]: { Name: tmp ,Line: 835 }
                             {LexType:IDENTIFIER }
---------------[Branch]: {Type: case ,Line:837 }
                         Judgement:
-------------------------[IdNode]: { Name: '/' ,Line: 837 }
                                   {LexType:CONST }
---------------------[Branch]: {Type: if ,Line:838 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 838 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:838 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 838 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:838 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 838 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:838 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '*' ,Line: 838 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:839 }
                                     Judgement:
-------------------------------------[Operator]: {OpType: ! ,Line:839 }
                                                 {OpDir: R }
-----------------------------------------[Function]: {Name: searchForNoteEndType_1 ,Line:839 }
                                                     ArgList: 0 Members
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:840 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 840 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 840 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:840 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: MULLINE_NOTE_NOT_END_ERROR ,Line: 840 }
                                                           {LexType:IDENTIFIER }



---------------------[Branch]: {Type: if ,Line:843 }
                               Judgement:
---------------------------------------[IdNode]: { Name: buffer ,Line: 843 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: [ ,Line:843 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: cur ,Line: 843 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: + ,Line:843 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: 1 ,Line: 843 }
                                                     {LexType:CONST }
-------------------------------[Operator]: {OpType: == ,Line:843 }
                                           {OpDir: M }
-----------------------------------[IdNode]: { Name: '/' ,Line: 843 }
                                             {LexType:CONST }
---------------------------[Branch]: {Type: if ,Line:844 }
                                     Judgement:
-------------------------------------[Operator]: {OpType: ! ,Line:844 }
                                                 {OpDir: R }
-----------------------------------------[Function]: {Name: searchForNoteEndType_2 ,Line:844 }
                                                     ArgList: 0 Members
---------------------------------[Function]: {Name: raiseSyntaxError ,Line:845 }
                                             ArgList: 2 Members
---------------------------------------------[IdNode]: { Name: curLine ,Line: 845 }
                                                       {LexType:IDENTIFIER }
-------------------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 845 }
                                                           {LexType:IDENTIFIER }
---------------------------------------------[Operator]: {OpType: :: ,Line:845 }
                                                         {OpDir: M }
-------------------------------------------------[IdNode]: { Name: UNVALID_CHAR_ERROR ,Line: 845 }
                                                           {LexType:IDENTIFIER }



---------------------[Branch]: {Type: else ,Line:848 }
---------------------------[Function]: {Name: handleOperator ,Line:849 }
                                       ArgList: 0 Members


---------------------[Break]: {Line:851 }


---------------[Branch]: {Type: case ,Line:852 }
                         Judgement:
-------------------------[IdNode]: { Name: '#' ,Line: 852 }
                                   {LexType:CONST }
---------------------[Function]: {Name: extractMacro ,Line:853 }
                                 ArgList: 0 Members

---------------------[Break]: {Line:854 }


---------------[Branch]: {Type: case ,Line:855 }
                         Judgement:
-------------------------[IdNode]: { Name: '{' ,Line: 855 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:855 }
                         Judgement:
-------------------------[IdNode]: { Name: '}' ,Line: 855 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:855 }
                         Judgement:
-------------------------[IdNode]: { Name: '[' ,Line: 855 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:855 }
                         Judgement:
-------------------------[IdNode]: { Name: ']' ,Line: 855 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:855 }
                         Judgement:
-------------------------[IdNode]: { Name: '(' ,Line: 855 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:855 }
                         Judgement:
-------------------------[IdNode]: { Name: ')' ,Line: 855 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:855 }
                         Judgement:
-------------------------[IdNode]: { Name: ':' ,Line: 855 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:855 }
                         Judgement:
-------------------------[IdNode]: { Name: ',' ,Line: 855 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:855 }
                         Judgement:
-------------------------[IdNode]: { Name: ';' ,Line: 855 }
                                   {LexType:CONST }
---------------------[Function]: {Name: handleSeperator ,Line:856 }
                                 ArgList: 0 Members

---------------------[Break]: {Line:857 }


---------------[Branch]: {Type: case ,Line:858 }
                         Judgement:
-------------------------[IdNode]: { Name: '<' ,Line: 858 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:858 }
                         Judgement:
-------------------------[IdNode]: { Name: '>' ,Line: 858 }
                                   {LexType:CONST }
---------------------[Function]: {Name: handleLeftRightAngleBra ,Line:859 }
                                 ArgList: 0 Members

---------------------[Break]: {Line:860 }


---------------[Branch]: {Type: case ,Line:861 }
                         Judgement:
-------------------------[IdNode]: { Name: '=' ,Line: 861 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:861 }
                         Judgement:
-------------------------[IdNode]: { Name: '?' ,Line: 861 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:861 }
                         Judgement:
-------------------------[IdNode]: { Name: '*' ,Line: 861 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:861 }
                         Judgement:
-------------------------[IdNode]: { Name: '+' ,Line: 861 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:861 }
                         Judgement:
-------------------------[IdNode]: { Name: '-' ,Line: 861 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:861 }
                         Judgement:
-------------------------[IdNode]: { Name: '&' ,Line: 861 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:861 }
                         Judgement:
-------------------------[IdNode]: { Name: '|' ,Line: 861 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:861 }
                         Judgement:
-------------------------[IdNode]: { Name: '%' ,Line: 861 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:861 }
                         Judgement:
-------------------------[IdNode]: { Name: '.' ,Line: 861 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:861 }
                         Judgement:
-------------------------[IdNode]: { Name: '!' ,Line: 861 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:861 }
                         Judgement:
-------------------------[IdNode]: { Name: '~' ,Line: 861 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:861 }
                         Judgement:
-------------------------[IdNode]: { Name: '^' ,Line: 861 }
                                   {LexType:CONST }
---------------------[Function]: {Name: handleOperator ,Line:862 }
                                 ArgList: 0 Members

---------------------[Break]: {Line:863 }


---------------[Branch]: {Type: case ,Line:864 }
                         Judgement:
-------------------------[IdNode]: { Name: '_' ,Line: 864 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:864 }
                         Judgement:
-------------------------[IdNode]: { Name: 'a' ,Line: 864 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:864 }
                         Judgement:
-------------------------[IdNode]: { Name: 'b' ,Line: 864 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:864 }
                         Judgement:
-------------------------[IdNode]: { Name: 'c' ,Line: 864 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:864 }
                         Judgement:
-------------------------[IdNode]: { Name: 'd' ,Line: 864 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:864 }
                         Judgement:
-------------------------[IdNode]: { Name: 'e' ,Line: 864 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:864 }
                         Judgement:
-------------------------[IdNode]: { Name: 'f' ,Line: 864 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:864 }
                         Judgement:
-------------------------[IdNode]: { Name: 'g' ,Line: 864 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:864 }
                         Judgement:
-------------------------[IdNode]: { Name: 'h' ,Line: 864 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:864 }
                         Judgement:
-------------------------[IdNode]: { Name: 'i' ,Line: 864 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:865 }
                         Judgement:
-------------------------[IdNode]: { Name: 'j' ,Line: 865 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:865 }
                         Judgement:
-------------------------[IdNode]: { Name: 'k' ,Line: 865 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:865 }
                         Judgement:
-------------------------[IdNode]: { Name: 'l' ,Line: 865 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:865 }
                         Judgement:
-------------------------[IdNode]: { Name: 'm' ,Line: 865 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:865 }
                         Judgement:
-------------------------[IdNode]: { Name: 'n' ,Line: 865 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:865 }
                         Judgement:
-------------------------[IdNode]: { Name: 'o' ,Line: 865 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:865 }
                         Judgement:
-------------------------[IdNode]: { Name: 'p' ,Line: 865 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:865 }
                         Judgement:
-------------------------[IdNode]: { Name: 'q' ,Line: 865 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:865 }
                         Judgement:
-------------------------[IdNode]: { Name: 'r' ,Line: 865 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:865 }
                         Judgement:
-------------------------[IdNode]: { Name: 's' ,Line: 865 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:866 }
                         Judgement:
-------------------------[IdNode]: { Name: 't' ,Line: 866 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:866 }
                         Judgement:
-------------------------[IdNode]: { Name: 'u' ,Line: 866 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:866 }
                         Judgement:
-------------------------[IdNode]: { Name: 'v' ,Line: 866 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:866 }
                         Judgement:
-------------------------[IdNode]: { Name: 'w' ,Line: 866 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:866 }
                         Judgement:
-------------------------[IdNode]: { Name: 'x' ,Line: 866 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:866 }
                         Judgement:
-------------------------[IdNode]: { Name: 'y' ,Line: 866 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:866 }
                         Judgement:
-------------------------[IdNode]: { Name: 'z' ,Line: 866 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:866 }
                         Judgement:
-------------------------[IdNode]: { Name: 'A' ,Line: 866 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:866 }
                         Judgement:
-------------------------[IdNode]: { Name: 'B' ,Line: 866 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:866 }
                         Judgement:
-------------------------[IdNode]: { Name: 'C' ,Line: 866 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:867 }
                         Judgement:
-------------------------[IdNode]: { Name: 'D' ,Line: 867 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:867 }
                         Judgement:
-------------------------[IdNode]: { Name: 'E' ,Line: 867 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:867 }
                         Judgement:
-------------------------[IdNode]: { Name: 'F' ,Line: 867 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:867 }
                         Judgement:
-------------------------[IdNode]: { Name: 'G' ,Line: 867 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:867 }
                         Judgement:
-------------------------[IdNode]: { Name: 'H' ,Line: 867 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:867 }
                         Judgement:
-------------------------[IdNode]: { Name: 'I' ,Line: 867 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:867 }
                         Judgement:
-------------------------[IdNode]: { Name: 'J' ,Line: 867 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:867 }
                         Judgement:
-------------------------[IdNode]: { Name: 'K' ,Line: 867 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:867 }
                         Judgement:
-------------------------[IdNode]: { Name: 'L' ,Line: 867 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:867 }
                         Judgement:
-------------------------[IdNode]: { Name: 'M' ,Line: 867 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:868 }
                         Judgement:
-------------------------[IdNode]: { Name: 'N' ,Line: 868 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:868 }
                         Judgement:
-------------------------[IdNode]: { Name: 'O' ,Line: 868 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:868 }
                         Judgement:
-------------------------[IdNode]: { Name: 'P' ,Line: 868 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:868 }
                         Judgement:
-------------------------[IdNode]: { Name: 'Q' ,Line: 868 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:868 }
                         Judgement:
-------------------------[IdNode]: { Name: 'R' ,Line: 868 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:868 }
                         Judgement:
-------------------------[IdNode]: { Name: 'S' ,Line: 868 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:868 }
                         Judgement:
-------------------------[IdNode]: { Name: 'T' ,Line: 868 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:868 }
                         Judgement:
-------------------------[IdNode]: { Name: 'U' ,Line: 868 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:868 }
                         Judgement:
-------------------------[IdNode]: { Name: 'V' ,Line: 868 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:868 }
                         Judgement:
-------------------------[IdNode]: { Name: 'W' ,Line: 868 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:869 }
                         Judgement:
-------------------------[IdNode]: { Name: 'X' ,Line: 869 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:869 }
                         Judgement:
-------------------------[IdNode]: { Name: 'Y' ,Line: 869 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:869 }
                         Judgement:
-------------------------[IdNode]: { Name: 'Z' ,Line: 869 }
                                   {LexType:CONST }
---------------------[Function]: {Name: handlerIdentifier ,Line:870 }
                                 ArgList: 0 Members

---------------------[Break]: {Line:871 }


---------------[Branch]: {Type: case ,Line:872 }
                         Judgement:
-------------------------[IdNode]: { Name: '1' ,Line: 872 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:872 }
                         Judgement:
-------------------------[IdNode]: { Name: '2' ,Line: 872 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:872 }
                         Judgement:
-------------------------[IdNode]: { Name: '3' ,Line: 872 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:872 }
                         Judgement:
-------------------------[IdNode]: { Name: '4' ,Line: 872 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:872 }
                         Judgement:
-------------------------[IdNode]: { Name: '5' ,Line: 872 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:872 }
                         Judgement:
-------------------------[IdNode]: { Name: '6' ,Line: 872 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:872 }
                         Judgement:
-------------------------[IdNode]: { Name: '7' ,Line: 872 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:872 }
                         Judgement:
-------------------------[IdNode]: { Name: '8' ,Line: 872 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:872 }
                         Judgement:
-------------------------[IdNode]: { Name: '9' ,Line: 872 }
                                   {LexType:CONST }

---------------[Branch]: {Type: case ,Line:872 }
                         Judgement:
-------------------------[IdNode]: { Name: '0' ,Line: 872 }
                                   {LexType:CONST }
---------------------[Function]: {Name: handleNumber ,Line:873 }
                                 ArgList: 0 Members

---------------------[Break]: {Line:874 }


---------------[Branch]: {Type: case ,Line:875 }
                         Judgement:
-------------------------[IdNode]: { Name: ' ,Line: 875 }
                                   {LexType:CONST }
---------------------[Function]: {Name: handleCharConst ,Line:876 }
                                 ArgList: 0 Members

---------------------[Break]: {Line:877 }


---------------[Branch]: {Type: case ,Line:878 }
                         Judgement:
-------------------------[IdNode]: { Name: " ,Line: 878 }
                                   {LexType:CONST }
---------------------[Function]: {Name: handleStringConst ,Line:879 }
                                 ArgList: 0 Members

---------------------[Break]: {Line:880 }


---------------[Branch]: {Type: default ,Line:881 }
---------------------[Function]: {Name: raiseSyntaxError ,Line:882 }
                                 ArgList: 2 Members
---------------------------------[IdNode]: { Name: curLine ,Line: 882 }
                                           {LexType:IDENTIFIER }
-------------------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 882 }
                                               {LexType:IDENTIFIER }
---------------------------------[Operator]: {OpType: :: ,Line:882 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: UNVALID_CHAR_ERROR ,Line: 882 }
                                               {LexType:IDENTIFIER }

---------------------[Break]: {Line:883 }




---[FuncDefine]: {Name: lex ,Line:892 }
                 {ReturnType:void ,Modifier: None ,ArgTable:}
---------[Branch]: {Type: while ,Line:893 }
                   Judgement:
-----------------------[Operator]: {OpType: ! ,Line:893 }
                                   {OpDir: R }
-------------------------------[Operator]: {OpType: * ,Line:893 }
                                           {OpDir: R }
-----------------------------------[IdNode]: { Name: fin ,Line: 893 }
                                             {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: . ,Line:893 }
                                       {OpDir: M }
-------------------------------[Function]: {Name: eof ,Line:893 }
                                           ArgList: 0 Members
-------------------[Operator]: {OpType: || ,Line:893 }
                               {OpDir: M }
-------------------------------[IdNode]: { Name: buffer ,Line: 893 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: [ ,Line:893 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: cur ,Line: 893 }
                                         {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: != ,Line:893 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: 0 ,Line: 893 }
                                     {LexType:CONST }
---------------[Function]: {Name: shiftToNextToken ,Line:894 }
                           ArgList: 0 Members

---------------[Function]: {Name: analyseToken ,Line:895 }
                           ArgList: 0 Members



---[FuncDefine]: {Name: printLexRes ,Line:904 }
                 {ReturnType:void ,Modifier: None ,ArgTable:}
-------------[IdNode]: { Name: cout ,Line: 905 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: << ,Line:905 }
                     {OpDir: M }
-----------------[IdNode]: { Name: "宏定义：" ,Line: 905 }
                           {LexType:CONST }
-------------[Operator]: {OpType: << ,Line:905 }
                         {OpDir: M }
-----------------[IdNode]: { Name: endl ,Line: 905 }
                           {LexType:IDENTIFIER }

---------[Branch]: {Type: for ,Line:906 }
Foreach:
-------------------[VarDeclare]: {Name: it ,Line:906 }
                                 {Type:string,Modifier: None }
-------------------[IdNode]: { Name: macroBin ,Line: 906 }
                             {LexType:IDENTIFIER }
-------------------[IdNode]: { Name: cout ,Line: 907 }
                             {LexType:IDENTIFIER }
---------------[Operator]: {OpType: << ,Line:907 }
                           {OpDir: M }
-----------------------[IdNode]: { Name: it ,Line: 907 }
                                 {LexType:IDENTIFIER }
-------------------[Operator]: {OpType: << ,Line:907 }
                               {OpDir: M }
-----------------------[IdNode]: { Name: endl ,Line: 907 }
                                 {LexType:IDENTIFIER }


-------------[IdNode]: { Name: cout ,Line: 909 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: << ,Line:909 }
                     {OpDir: M }
-----------------[IdNode]: { Name: "词法分析词素：" ,Line: 909 }
                           {LexType:CONST }
-------------[Operator]: {OpType: << ,Line:909 }
                         {OpDir: M }
-----------------[IdNode]: { Name: endl ,Line: 909 }
                           {LexType:IDENTIFIER }

---------[Branch]: {Type: for ,Line:910 }
Foreach:
-------------------[VarDeclare]: {Name: it ,Line:910 }
                                 {Type:pair<int,pair<LEX_TYPE,string>>,Modifier: None }
-------------------[IdNode]: { Name: tokenRes ,Line: 910 }
                             {LexType:IDENTIFIER }
---------------[VarDeclare]: {Name: type ,Line:911 }
                             {Type:LEX_TYPE,Modifier: None }

-------------------[IdNode]: { Name: type ,Line: 911 }
                             {LexType:IDENTIFIER }
---------------[Operator]: {OpType: = ,Line:911 }
                           {OpDir: M }
-----------------------[IdNode]: { Name: it ,Line: 911 }
                                 {LexType:IDENTIFIER }
-------------------[Operator]: {OpType: . ,Line:911 }
                               {OpDir: M }
---------------------------[IdNode]: { Name: second ,Line: 911 }
                                     {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: . ,Line:911 }
                                   {OpDir: M }
---------------------------[IdNode]: { Name: first ,Line: 911 }
                                     {LexType:IDENTIFIER }

---------------[VarDeclare]: {Name: typeStr ,Line:912 }
                             {Type:string,Modifier: None }

-------------------[IdNode]: { Name: typeStr ,Line: 912 }
                             {LexType:IDENTIFIER }
---------------[Operator]: {OpType: = ,Line:912 }
                           {OpDir: M }
---------------------------[IdNode]: { Name: type ,Line: 912 }
                                     {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: == ,Line:912 }
                                   {OpDir: M }
-------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 912 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: :: ,Line:912 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: SEPERATOR ,Line: 912 }
                                         {LexType:IDENTIFIER }
-------------------[Operator]: {OpType: ? ,Line:912 }
                               {OpDir: M }
---------------------------[IdNode]: { Name: "LEX_TYPE::SEPERATOR" ,Line: 912 }
                                     {LexType:CONST }
-----------------------[Operator]: {OpType: : ,Line:912 }
                                   {OpDir: M }
-----------------------------------[IdNode]: { Name: type ,Line: 912 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: == ,Line:912 }
                                           {OpDir: M }
---------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 912 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: :: ,Line:912 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: IDENTIFIER ,Line: 912 }
                                                 {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: ? ,Line:912 }
                                       {OpDir: M }
-----------------------------------[IdNode]: { Name: "LEX_TYPE::IDENTIFIER" ,Line: 912 }
                                             {LexType:CONST }
-------------------------------[Operator]: {OpType: : ,Line:912 }
                                           {OpDir: M }
-------------------------------------------[IdNode]: { Name: type ,Line: 912 }
                                                     {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: == ,Line:912 }
                                                   {OpDir: M }
-----------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 912 }
                                                         {LexType:IDENTIFIER }
-------------------------------------------[Operator]: {OpType: :: ,Line:912 }
                                                       {OpDir: M }
-----------------------------------------------[IdNode]: { Name: OPERATOR ,Line: 912 }
                                                         {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: ? ,Line:912 }
                                               {OpDir: M }
-------------------------------------------[IdNode]: { Name: "LEX_TYPE::OPERATOR" ,Line: 912 }
                                                     {LexType:CONST }
---------------------------------------[Operator]: {OpType: : ,Line:912 }
                                                   {OpDir: M }
---------------------------------------------------[IdNode]: { Name: type ,Line: 912 }
                                                             {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: == ,Line:912 }
                                                           {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: LEX_TYPE ,Line: 912 }
                                                                 {LexType:IDENTIFIER }
---------------------------------------------------[Operator]: {OpType: :: ,Line:912 }
                                                               {OpDir: M }
-------------------------------------------------------[IdNode]: { Name: CONST ,Line: 912 }
                                                                 {LexType:IDENTIFIER }
-------------------------------------------[Operator]: {OpType: ? ,Line:912 }
                                                       {OpDir: M }
---------------------------------------------------[IdNode]: { Name: "LEX_TYPE::CONST    " ,Line: 912 }
                                                             {LexType:CONST }
-----------------------------------------------[Operator]: {OpType: : ,Line:912 }
                                                           {OpDir: M }
---------------------------------------------------[IdNode]: { Name: "LEX_TYPE::KEYWORD  " ,Line: 912 }
                                                             {LexType:CONST }

-------------------[IdNode]: { Name: cout ,Line: 913 }
                             {LexType:IDENTIFIER }
---------------[Operator]: {OpType: << ,Line:913 }
                           {OpDir: M }
-----------------------[IdNode]: { Name: "Line:" ,Line: 913 }
                                 {LexType:CONST }
-------------------[Operator]: {OpType: << ,Line:913 }
                               {OpDir: M }
-------------------------------[IdNode]: { Name: it ,Line: 913 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: . ,Line:913 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: first ,Line: 913 }
                                         {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: << ,Line:913 }
                                   {OpDir: M }
-------------------------------[IdNode]: { Name: "  ,Type:" ,Line: 913 }
                                         {LexType:CONST }
---------------------------[Operator]: {OpType: << ,Line:913 }
                                       {OpDir: M }
-----------------------------------[IdNode]: { Name: typeStr ,Line: 913 }
                                             {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: << ,Line:913 }
                                           {OpDir: M }
---------------------------------------[IdNode]: { Name: " \t,Content:" ,Line: 913 }
                                                 {LexType:CONST }
-----------------------------------[Operator]: {OpType: << ,Line:913 }
                                               {OpDir: M }
-----------------------------------------------[IdNode]: { Name: it ,Line: 913 }
                                                         {LexType:IDENTIFIER }
-------------------------------------------[Operator]: {OpType: . ,Line:913 }
                                                       {OpDir: M }
---------------------------------------------------[IdNode]: { Name: second ,Line: 913 }
                                                             {LexType:IDENTIFIER }
-----------------------------------------------[Operator]: {OpType: . ,Line:913 }
                                                           {OpDir: M }
---------------------------------------------------[IdNode]: { Name: second ,Line: 913 }
                                                             {LexType:IDENTIFIER }
---------------------------------------[Operator]: {OpType: << ,Line:913 }
                                                   {OpDir: M }
-------------------------------------------[IdNode]: { Name: endl ,Line: 913 }
                                                     {LexType:IDENTIFIER }


-------------[IdNode]: { Name: cout ,Line: 915 }
                       {LexType:IDENTIFIER }
---------[Operator]: {OpType: << ,Line:915 }
                     {OpDir: M }
-----------------[IdNode]: { Name: "每行开始空格数:" ,Line: 915 }
                           {LexType:CONST }
-------------[Operator]: {OpType: << ,Line:915 }
                         {OpDir: M }
-----------------[IdNode]: { Name: endl ,Line: 915 }
                           {LexType:IDENTIFIER }

---------[Branch]: {Type: for ,Line:916 }
Foreach:
-------------------[VarDeclare]: {Name: p ,Line:916 }
                                 {Type:pair<int,int>,Modifier: None }
-------------------[IdNode]: { Name: spaceRecord ,Line: 916 }
                             {LexType:IDENTIFIER }
-------------------[IdNode]: { Name: cout ,Line: 917 }
                             {LexType:IDENTIFIER }
---------------[Operator]: {OpType: << ,Line:917 }
                           {OpDir: M }
-----------------------[IdNode]: { Name: "Line:" ,Line: 917 }
                                 {LexType:CONST }
-------------------[Operator]: {OpType: << ,Line:917 }
                               {OpDir: M }
-------------------------------[IdNode]: { Name: p ,Line: 917 }
                                         {LexType:IDENTIFIER }
---------------------------[Operator]: {OpType: . ,Line:917 }
                                       {OpDir: M }
-------------------------------[IdNode]: { Name: first ,Line: 917 }
                                         {LexType:IDENTIFIER }
-----------------------[Operator]: {OpType: << ,Line:917 }
                                   {OpDir: M }
-------------------------------[IdNode]: { Name: " , has " ,Line: 917 }
                                         {LexType:CONST }
---------------------------[Operator]: {OpType: << ,Line:917 }
                                       {OpDir: M }
---------------------------------------[IdNode]: { Name: p ,Line: 917 }
                                                 {LexType:IDENTIFIER }
-----------------------------------[Operator]: {OpType: . ,Line:917 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: second ,Line: 917 }
                                                 {LexType:IDENTIFIER }
-------------------------------[Operator]: {OpType: << ,Line:917 }
                                           {OpDir: M }
---------------------------------------[IdNode]: { Name: " Space" ,Line: 917 }
                                                 {LexType:CONST }
-----------------------------------[Operator]: {OpType: << ,Line:917 }
                                               {OpDir: M }
---------------------------------------[IdNode]: { Name: endl ,Line: 917 }
                                                 {LexType:IDENTIFIER }



---[FuncDefine]: {Name: raiseSyntaxError ,Line:927 }
                 {ReturnType:void ,Modifier: None ,ArgTable:{int:line}{SYNTAX_ERROR:errorId}}
---------[Branch]: {Type: switch ,Line:928 }
                   Judgement:
-------------------[IdNode]: { Name: errorId ,Line: 928 }
                             {LexType:IDENTIFIER }
---------------[Branch]: {Type: case ,Line:930 }
                         Judgement:
-----------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 930 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: :: ,Line:930 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: NUM_CONST_FORMAT_ERROR ,Line: 930 }
                                       {LexType:IDENTIFIER }
-------------------------[IdNode]: { Name: cout ,Line: 931 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: << ,Line:931 }
                                 {OpDir: M }
-----------------------------[IdNode]: { Name: "Line:" ,Line: 931 }
                                       {LexType:CONST }
-------------------------[Operator]: {OpType: << ,Line:931 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: line ,Line: 931 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: << ,Line:931 }
                                         {OpDir: M }
-------------------------------------[IdNode]: { Name: ",出现非法数字常量格式错误" ,Line: 931 }
                                               {LexType:CONST }
---------------------------------[Operator]: {OpType: << ,Line:931 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: endl ,Line: 931 }
                                               {LexType:IDENTIFIER }

---------------------[Function]: {Name: abort ,Line:932 }
                                 ArgList: 0 Members

---------------------[Break]: {Line:933 }


---------------[Branch]: {Type: case ,Line:934 }
                         Judgement:
-----------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 934 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: :: ,Line:934 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: UNVALID_CHAR_ERROR ,Line: 934 }
                                       {LexType:IDENTIFIER }
-------------------------[IdNode]: { Name: cout ,Line: 935 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: << ,Line:935 }
                                 {OpDir: M }
-----------------------------[IdNode]: { Name: "Line:" ,Line: 935 }
                                       {LexType:CONST }
-------------------------[Operator]: {OpType: << ,Line:935 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: line ,Line: 935 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: << ,Line:935 }
                                         {OpDir: M }
-------------------------------------[IdNode]: { Name: ",出现非法字符错误" ,Line: 935 }
                                               {LexType:CONST }
---------------------------------[Operator]: {OpType: << ,Line:935 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: endl ,Line: 935 }
                                               {LexType:IDENTIFIER }

---------------------[Function]: {Name: abort ,Line:936 }
                                 ArgList: 0 Members

---------------------[Break]: {Line:937 }


---------------[Branch]: {Type: case ,Line:938 }
                         Judgement:
-----------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 938 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: :: ,Line:938 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: STRING_UNCLOSE_ERROR ,Line: 938 }
                                       {LexType:IDENTIFIER }
-------------------------[IdNode]: { Name: cout ,Line: 939 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: << ,Line:939 }
                                 {OpDir: M }
-----------------------------[IdNode]: { Name: "Line:" ,Line: 939 }
                                       {LexType:CONST }
-------------------------[Operator]: {OpType: << ,Line:939 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: line ,Line: 939 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: << ,Line:939 }
                                         {OpDir: M }
-------------------------------------[IdNode]: { Name: ",出现字符串常量格式错误" ,Line: 939 }
                                               {LexType:CONST }
---------------------------------[Operator]: {OpType: << ,Line:939 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: endl ,Line: 939 }
                                               {LexType:IDENTIFIER }

---------------------[Function]: {Name: abort ,Line:940 }
                                 ArgList: 0 Members

---------------------[Break]: {Line:941 }


---------------[Branch]: {Type: case ,Line:942 }
                         Judgement:
-----------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 942 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: :: ,Line:942 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: CHAR_SINGLE_QUOTE_UNMATCH_ERROR ,Line: 942 }
                                       {LexType:IDENTIFIER }
-------------------------[IdNode]: { Name: cout ,Line: 943 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: << ,Line:943 }
                                 {OpDir: M }
-----------------------------[IdNode]: { Name: "Line:" ,Line: 943 }
                                       {LexType:CONST }
-------------------------[Operator]: {OpType: << ,Line:943 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: line ,Line: 943 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: << ,Line:943 }
                                         {OpDir: M }
-------------------------------------[IdNode]: { Name: ",出现非法字符错误" ,Line: 943 }
                                               {LexType:CONST }
---------------------------------[Operator]: {OpType: << ,Line:943 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: endl ,Line: 943 }
                                               {LexType:IDENTIFIER }

---------------------[Function]: {Name: abort ,Line:944 }
                                 ArgList: 0 Members

---------------------[Break]: {Line:945 }


---------------[Branch]: {Type: case ,Line:946 }
                         Judgement:
-----------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 946 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: :: ,Line:946 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: OP_FORMAT_ERROR ,Line: 946 }
                                       {LexType:IDENTIFIER }
-------------------------[IdNode]: { Name: cout ,Line: 947 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: << ,Line:947 }
                                 {OpDir: M }
-----------------------------[IdNode]: { Name: "Line:" ,Line: 947 }
                                       {LexType:CONST }
-------------------------[Operator]: {OpType: << ,Line:947 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: line ,Line: 947 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: << ,Line:947 }
                                         {OpDir: M }
-------------------------------------[IdNode]: { Name: "出现非法运算符错误(〃ω〃)" ,Line: 947 }
                                               {LexType:CONST }
---------------------------------[Operator]: {OpType: << ,Line:947 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: endl ,Line: 947 }
                                               {LexType:IDENTIFIER }

---------------------[Function]: {Name: abort ,Line:948 }
                                 ArgList: 0 Members

---------------------[Break]: {Line:949 }


---------------[Branch]: {Type: case ,Line:950 }
                         Judgement:
-----------------------------[IdNode]: { Name: SYNTAX_ERROR ,Line: 950 }
                                       {LexType:IDENTIFIER }
-------------------------[Operator]: {OpType: :: ,Line:950 }
                                     {OpDir: M }
-----------------------------[IdNode]: { Name: MULLINE_NOTE_NOT_END_ERROR ,Line: 950 }
                                       {LexType:IDENTIFIER }
-------------------------[IdNode]: { Name: cout ,Line: 951 }
                                   {LexType:IDENTIFIER }
---------------------[Operator]: {OpType: << ,Line:951 }
                                 {OpDir: M }
-----------------------------[IdNode]: { Name: "Line:" ,Line: 951 }
                                       {LexType:CONST }
-------------------------[Operator]: {OpType: << ,Line:951 }
                                     {OpDir: M }
---------------------------------[IdNode]: { Name: line ,Line: 951 }
                                           {LexType:IDENTIFIER }
-----------------------------[Operator]: {OpType: << ,Line:951 }
                                         {OpDir: M }
-------------------------------------[IdNode]: { Name: ",发生注释无结尾错误TnT" ,Line: 951 }
                                               {LexType:CONST }
---------------------------------[Operator]: {OpType: << ,Line:951 }
                                             {OpDir: M }
-------------------------------------[IdNode]: { Name: endl ,Line: 951 }
                                               {LexType:IDENTIFIER }

---------------------[Function]: {Name: abort ,Line:952 }
                                 ArgList: 0 Members

---------------------[Break]: {Line:953 }


---------------[Branch]: {Type: default ,Line:954 }
---------------------[Break]: {Line:955 }
